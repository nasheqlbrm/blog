<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kaushik Sinha</title>
<link>https://nasheqlbrm.github.io/blog/</link>
<atom:link href="https://nasheqlbrm.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Notes on things I find interesting</description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Thu, 19 Dec 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Streaks</title>
  <dc:creator>Kaushik Sinha</dc:creator>
  <link>https://nasheqlbrm.github.io/blog/posts/2024-12-09-streaks/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Following the treatment in <span class="citation" data-cites="dorhauer_07032019">Dorhauer (2019)</span>, suppose we have a game where</p>
<ul>
<li>a team has <img src="https://latex.codecogs.com/png.latex?p"> probability of winning a round of the game (aka hit-rate)</li>
<li><img src="https://latex.codecogs.com/png.latex?q=1-p"> is the probability of losing a round of the game</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the number of independent rounds of the game</li>
<li><img src="https://latex.codecogs.com/png.latex?r%20%5Cin%20%5B0,%5Cldots,n%5D"> denotes the length of a streak
<ul>
<li>An <img src="https://latex.codecogs.com/png.latex?r">-game losing streak means you lose <img src="https://latex.codecogs.com/png.latex?r"> consecutive games.</li>
</ul></li>
</ul>
<section id="how-many-r-game-windows-are-possible-within-n-rounds" class="level2">
<h2 class="anchored" data-anchor-id="how-many-r-game-windows-are-possible-within-n-rounds">How many <img src="https://latex.codecogs.com/png.latex?r"> game windows are possible within <img src="https://latex.codecogs.com/png.latex?n"> rounds?</h2>
<p>To make this concrete, let <img src="https://latex.codecogs.com/png.latex?r=3"> and <img src="https://latex.codecogs.com/png.latex?n=10">. There are <img src="https://latex.codecogs.com/png.latex?8"> different <img src="https://latex.codecogs.com/png.latex?3">-game windows where a streak could occur within <img src="https://latex.codecogs.com/png.latex?10"> game rounds (games 1-3, 2-3,…,8-10). So there are <img src="https://latex.codecogs.com/png.latex?n-r"> different <img src="https://latex.codecogs.com/png.latex?r"> game windows possible within <img src="https://latex.codecogs.com/png.latex?n"> rounds.</p>
</section>
<section id="how-many-opportunities-are-there-to-start-a-winning-streak" class="level2">
<h2 class="anchored" data-anchor-id="how-many-opportunities-are-there-to-start-a-winning-streak">How many opportunities are there to start a winning streak?</h2>
<p>In <img src="https://latex.codecogs.com/png.latex?n"> rounds, any <img src="https://latex.codecogs.com/png.latex?r">-game winning streak will have to start by game <img src="https://latex.codecogs.com/png.latex?n-r+1"> at the latest. Thus, in <img src="https://latex.codecogs.com/png.latex?10"> rounds, any <img src="https://latex.codecogs.com/png.latex?3">-game winning streak will have to start by game <img src="https://latex.codecogs.com/png.latex?8"> at the latest. Any loss in the first <img src="https://latex.codecogs.com/png.latex?n-r"> games can potentially be followed by a <img src="https://latex.codecogs.com/png.latex?r">-game winning streak. For a <img src="https://latex.codecogs.com/png.latex?p"> hit-rate team, we expect <img src="https://latex.codecogs.com/png.latex?(n-r)q"> losses over the first <img src="https://latex.codecogs.com/png.latex?n-r"> games, plus the first game (which can always start a winning streak as there is no loss from a previous game to consider). That means a <img src="https://latex.codecogs.com/png.latex?p"> hit-rate team will have, on average, about <img src="https://latex.codecogs.com/png.latex?1+(n-r)q"> opportunities to begin a winning streak of at least <img src="https://latex.codecogs.com/png.latex?r"> games.</p>
<p>Similarly, in <img src="https://latex.codecogs.com/png.latex?n"> rounds, any <img src="https://latex.codecogs.com/png.latex?r">-game losing streak will have to start by game <img src="https://latex.codecogs.com/png.latex?n-r+1"> at the latest. Any win in the first <img src="https://latex.codecogs.com/png.latex?n-r"> games can potentially be followed by a <img src="https://latex.codecogs.com/png.latex?r">-game losing streak. For a <img src="https://latex.codecogs.com/png.latex?p"> hit-rate team, we expect <img src="https://latex.codecogs.com/png.latex?(n-r)p"> wins over the first <img src="https://latex.codecogs.com/png.latex?n-r"> games, plus the first game (which can always start a losing streak as there is no win from a previous game to consider). That means a <img src="https://latex.codecogs.com/png.latex?p"> hit-rate team will have, on average, about <img src="https://latex.codecogs.com/png.latex?1+(n-r)p"> opportunities to begin a losing streak of at least <img src="https://latex.codecogs.com/png.latex?r"> games.</p>
</section>
<section id="the-expected-number-of-losing-streaks" class="level2">
<h2 class="anchored" data-anchor-id="the-expected-number-of-losing-streaks">The expected number of losing streaks</h2>
<p>The expected number of losing streaks is the product of the expected number of opportunities to start a losing streak times the probability of <img src="https://latex.codecogs.com/png.latex?r"> consecutive losses, so <img src="https://latex.codecogs.com/png.latex?(1+(n%E2%88%92r)p)q%5E%7Br%7D"></p>
<div>
<div id="pyodide-1" class="exercise-cell">

</div>
<script type="pyodide-1-contents">
eyJhdHRyIjp7ImVkaXQiOnRydWUsImV2YWwiOnRydWV9LCJjb2RlIjoibiA9IDIwMCAjIG51bWJlciBvZiByb3VuZHMgb2YgdGhlIGdhbWVcbnIgPSA0ICMgbGVuZ3RoIG9mIGxvc2luZyBzdHJlYWtcbnAgPSAwLjYgIyBwcm9iYWJpbGl0eSBvZiB3aW5cbnEgPSAxLXAgIyBwcm9iYWJpbGl0eSBvZiBsb3NzXG5lbHMgPSAoMSArIChuLXIpKnApKihxKipyKSAjZXhwZWN0ZWQgbG9zaW5nIHN0cmVha3NcbnByaW50KGYnVGhlIGV4cGVjdGVkIG51bWJlciBvZiBsb3Npbmcgc3RyZWFrcyBvZiBsZW5ndGgge3J9IHNvbWV3aGVyZSBhbW9uZyB7bn0gaW5kZXBlbmRlbnQgcm91bmRzIG9mIHRoZSBnYW1lIGlzIGFwcHJveGltYXRlbHkge2VsczoxLjRmfScpIn0=
</script>
</div>
</section>
<section id="the-probability-of-at-least-one-losing-streak" class="level2">
<h2 class="anchored" data-anchor-id="the-probability-of-at-least-one-losing-streak">The probability of at least one losing streak</h2>
<p>The probability of at least one losing streak is 1 minus the probability of <img src="https://latex.codecogs.com/png.latex?0"> losing streaks. We first determine the probability of not completing a losing streak at every one of the opportunities we have for starting a losing streak. So, in other words, we will find the probability of having a winning streak at every one of these opportunities.</p>
<p>Now <img src="https://latex.codecogs.com/png.latex?q%5E%7Br%7D"> is the probability of having a losing streak at any opportunity. Hence, <img src="https://latex.codecogs.com/png.latex?(1-q%5E%7Br%7D)"> is the probability of having a winning streak at any opportunity. So, <img src="https://latex.codecogs.com/png.latex?(1-q%5E%7Br%7D)%5E%7B1+(n%E2%88%92r)p%7D"> is the probability of having a winning streak at each and every one of the <img src="https://latex.codecogs.com/png.latex?1+(n%E2%88%92r)p"> opportunities for starting a losing streak.</p>
<p>Finally, we have that <img src="https://latex.codecogs.com/png.latex?1%20-%20(1-q%5E%7Br%7D)%5E%7B1+(n%E2%88%92r)p%7D"> is the probability of at least one losing streak.</p>
<div>
<div id="pyodide-2" class="exercise-cell">

</div>
<script type="pyodide-2-contents">
eyJhdHRyIjp7ImVkaXQiOnRydWUsImV2YWwiOnRydWV9LCJjb2RlIjoibiA9IDIwMCAjIG51bWJlciBvZiByb3VuZHMgb2YgdGhlIGdhbWVcbnIgPSA0ICMgbGVuZ3RoIG9mIGxvc2luZyBzdHJlYWtcbnAgPSAwLjYgIyBwcm9iYWJpbGl0eSBvZiB3aW5cbnEgPSAxLXAgIyBwcm9iYWJpbGl0eSBvZiBsb3NzXG5wcm9iID0gMSAtICggKDEgLSAocSoqcikgKSoqICgxKyhuLXIpKnApIClcbnByaW50KGYnVGhlIHByb2JhYmlsaXR5IG9mIGF0IGxlYXN0IG9uZSBsb3Npbmcgc3RyZWFrIG9mIGxlbmd0aCB7cn0gc29tZXdoZXJlIGFtb25nIHtufSBpbmRlcGVuZGVudCByb3VuZHMgb2YgdGhlIGdhbWUgaXMgYXBwcm94aW1hdGVseSB7cHJvYjoxLjQlfScpIn0=
</script>
</div>
</section>
<section id="the-longest-expected-losing-streak" class="level2">
<h2 class="anchored" data-anchor-id="the-longest-expected-losing-streak">The longest expected losing streak</h2>
<p>From <span class="citation" data-cites="soccerwidow_streaks_note">SoccerWidow (2016)</span>, the length of the longest expected losing streak is given by <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%7Cln(n)%7C%7D%7B%7Cln(q)%7C%7D">.</p>
<div>
<div id="pyodide-3" class="exercise-cell">

</div>
<script type="pyodide-3-contents">
eyJhdHRyIjp7ImVkaXQiOnRydWUsImV2YWwiOnRydWV9LCJjb2RlIjoiaW1wb3J0IHBhbmRhcyBhcyBwZFxuaW1wb3J0IG51bXB5IGFzIG5wXG5uID0gNTAgIyBudW1iZXIgb2Ygcm91bmRzIG9mIHRoZSBnYW1lXG5xcyA9IG5wLmFyYW5nZSgwLjEsMSwwLjEpICNyYW5nZSBmb3IgdGhlIGxvc3MgcHJvYmFiaWxpdHkgXG5kZiA9IChwZC5EYXRhRnJhbWUoeydxJzogcXMsICduJzogW25dKmxlbihxcyl9KVxuICAgIC5hc3NpZ24oaGl0X3JhdGUgPSBsYW1iZGEgZGZfOiAoMS4wIC0gZGZfLnEpLFxuICAgICAgICAgICAgb2RkcyA9IGxhbWJkYSBkZl86IGRmXy5oaXRfcmF0ZS5wb3coLTEpLFxuICAgICAgICAgICAgbWF4X2xvc2luZ19zdHJlYWsgPSBsYW1iZGEgZGZfOiBucC5hYnMobnAubG9nKGRmXy5uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpdihucC5sb2coZGZfLnEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgIClcbiAgICBbWydxJywnb2RkcycsJ21heF9sb3Npbmdfc3RyZWFrJywnbiddXVxuICAgICApXG5kZi5zdHlsZSBcXFxuICAuZm9ybWF0KHByZWNpc2lvbj0yLCB0aG91c2FuZHM9XCIsXCIpIn0=
</script>
</div>
<p>Similarly, the length of the longest expected winning streak is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%7Cln(n)%7C%7D%7B%7Cln(p)%7C%7D">.</p>
</section>
<section id="the-number-of-rounds-played-to-encounter-a-losing-streak-of-a-particular-length" class="level2">
<h2 class="anchored" data-anchor-id="the-number-of-rounds-played-to-encounter-a-losing-streak-of-a-particular-length">The number of rounds played to encounter a losing streak of a particular length</h2>
<p>From <span class="citation" data-cites="soccerwidow_streaks_note">SoccerWidow (2016)</span>, for a game where the probability of losing at any given round is <img src="https://latex.codecogs.com/png.latex?q">, we expect to have encountered a losing streak of length <img src="https://latex.codecogs.com/png.latex?r"> somewhere on or before <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bq%5E%7Br%7D%7D"> rounds.</p>
<div>
<div id="pyodide-4" class="exercise-cell">

</div>
<script type="pyodide-4-contents">
eyJhdHRyIjp7ImVkaXQiOnRydWUsImV2YWwiOnRydWV9LCJjb2RlIjoiZnJvbSBpdGVydG9vbHMgaW1wb3J0IGNoYWluXG5pbXBvcnQgcGFuZGFzIGFzIHBkXG5pbXBvcnQgbnVtcHkgYXMgbnBcbnFzID0gbnAuYXJhbmdlKDAuNSwwLjYxLDAuMDUpICNyYW5nZSBmb3IgdGhlIGxvc3MgcHJvYmFiaWxpdHkgXG5zdHJlYWtfbGVuZ3RocyA9IFszLCA1LCAxMF1cbnJzID0gY2hhaW4uZnJvbV9pdGVyYWJsZSggWyBbcl0gKiBsZW4ocXMpIGZvciByIGluIHN0cmVha19sZW5ndGhzIF0gKVxuZGYgPSAocGQuRGF0YUZyYW1lKHsncSc6IG5wLnRpbGUocXMsIGxlbihzdHJlYWtfbGVuZ3RocykpLFxuICAgICAgICAgICAgICAgICAgICAncic6IHJzXG4gICAgICAgICAgICAgICAgICAgfSlcbiAgICAuYXNzaWduKGhpdF9yYXRlID0gbGFtYmRhIGRmXzogKDEuMCAtIGRmXy5xKSxcbiAgICAgICAgICAgIG9kZHMgPSBsYW1iZGEgZGZfOiBkZl8uaGl0X3JhdGUucG93KC0xKSxcbiAgICAgICAgICAgIG4gPSBsYW1iZGEgZGZfOiBkZl8ucS5wb3coLTEpLnBvdyhkZl8ucilcbiAgICAgICAgICAgKVxuICAgIC5kcm9wKGNvbHVtbnM9WydoaXRfcmF0ZSddKVxuICAgIC5waXZvdChpbmRleD1bJ3EnLCdvZGRzJ10sIGNvbHVtbnM9WydyJ10sIHZhbHVlcz1bJ24nXSkgIFxuICAgIC5yZXNldF9pbmRleCgpXG4gICAgLnNvcnRfdmFsdWVzKGJ5PVsncSddLCBhc2NlbmRpbmc9RmFsc2UpXG4gICAgIClcbmRmLnN0eWxlIFxcXG4gIC5mb3JtYXQocHJlY2lzaW9uPTIsIHRob3VzYW5kcz1cIixcIikifQ==
</script>
</div>
</section>
<section id="starting-bankroll" class="level2">
<h2 class="anchored" data-anchor-id="starting-bankroll">Starting Bankroll</h2>
<p>For strategies with a hit rate between 45% to 55% the starting bank roll should be (Length of maximum losing streak X planned stake per bet X 5)</p>


<script type="pyodide-data">
eyJvcHRpb25zIjp7ImluZGV4VVJMIjoiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L3B5b2RpZGUvdjAuMjYuMS9mdWxsLyJ9LCJwYWNrYWdlcyI6eyJwa2dzIjpbInB5b2RpZGVfaHR0cCIsIm1pY3JvcGlwIiwiaXB5dGhvbiIsIm51bXB5IiwicGFuZGFzIiwiaXB5d2lkZ2V0cyIsImppbmphMiJdfX0=
</script>
<script type="ojs-module-contents">

</script>
<div id="exercise-loading-indicator" class="exercise-loading-indicator d-none d-flex align-items-center gap-2">
<div id="exercise-loading-status" class="d-flex gap-2">

</div>
<div class="spinner-grow spinner-grow-sm">

</div>
</div>
<script type="vfs-file">
W10=
</script>

</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-dorhauer_07032019" class="csl-entry">
Dorhauer, Adam. 2019. <span>“&lt;A Href="https://Tht.fangraphs.com/the-Probability-of-Streaks//&lt;/a&gt;.”</span> <a href="https://tht.fangraphs.com/the-probability-of-streaks//" class="uri">https://tht.fangraphs.com/the-probability-of-streaks//</a>.
</div>
<div id="ref-soccerwidow_streaks_note" class="csl-entry">
SoccerWidow. 2016. <span>“&lt;A Href="https://Www.soccerwidow.com/Football-Gambling/Betting-Knowledge/Value-Betting-Academy/Learning-Centre/Betting-Terminology/Science-Calculating-Winning-Losing-Streaks/Comment-Page-1/&lt;/a&gt;.”</span> <a href="https://www.soccerwidow.com/football-gambling/betting-knowledge/value-betting-academy/learning-centre/betting-terminology/science-calculating-winning-losing-streaks/comment-page-1/" class="uri">https://www.soccerwidow.com/football-gambling/betting-knowledge/value-betting-academy/learning-centre/betting-terminology/science-calculating-winning-losing-streaks/comment-page-1/</a>.
</div>
</div></section></div> ]]></description>
  <category>TIL</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2024-12-09-streaks/</guid>
  <pubDate>Thu, 19 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL\(:\) Installing Python packages inside Jupyter</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-11-19-install-packages-inside-a-jupyter-notebook.html</link>
  <description><![CDATA[ 





<p>The right way to install a package from within a Jupyter notebook. From <a href="https://modelpredict.com/importing-packages-in-jupyter-notebook/">here</a>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using conda</span></span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>conda install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>yes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>prefix {sys.prefix} tensorflow</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using pip</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>{sys.executable} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m pip install tensorflow</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>For this post, I ran into the following Quarto error when including the colon character in the description section of the preamble.</p>
<p><img src="https://nasheqlbrm.github.io/blog/images/quarto_preview_error.png" class="img-fluid"></p>
<p>What seems to work is enclosing the colon character with $ signs. So hooray <img src="https://latex.codecogs.com/png.latex?%5CLaTeX">!</p>
</div>
</div>
</div>



 ]]></description>
  <category>TIL</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-11-19-install-packages-inside-a-jupyter-notebook.html</guid>
  <pubDate>Sat, 19 Nov 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Simple Neural Net Backward Pass</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-11-13-backward-pass.html</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Connect the math to the code for what Jeremy Howard did in his <code>03_backprop.ipynb</code> notebook for the <a href="https://www.fast.ai/posts/part2-2022.html">2022 part 2 course</a>. The simple network for this post is that we have a single neuron followed by a Rectified Linear Unit (ReLU) and then the Mean Squared Error (MSE) loss function.</p>
<p>I know we want to get to many neurons (stacked in multiple layers) but even this simple setting will take us quite far.</p>
</section>
<section id="notation" class="level1">
<h1>Notation</h1>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?N"> : number of training examples</li>
<li><img src="https://latex.codecogs.com/png.latex?d"> : number of features</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E%7B(i)%7D"> is the <img src="https://latex.codecogs.com/png.latex?i">-th training example and can be represented as a column vector <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D%5E%7B(i)%7D%20=%20%5Cbegin%7Bbmatrix%7D%0Ax%5E%7B(i)%7D_1%20%5C%5C%0Ax%5E%7B(i)%7D_2%20%5C%5C%0A%5Cvdots%20%5C%5C%0Ax%5E%7B(i)%7D_d%0A%5Cend%7Bbmatrix%7D%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bw%7D"> is the vector of weights for a single neuron <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bw%7D%20=%20%5Cbegin%7Bbmatrix%7D%0Aw_1%20%5C%5C%0Aw_2%20%5C%5C%0A%5Cvdots%20%5C%5C%0Aw_d%0A%5Cend%7Bbmatrix%7D%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?b"> is the bias term for a single neuron</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is an <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20d"> matrix with the training examples stacked in rows <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BX%7D%20=%20%5Cbegin%7Bbmatrix%7D%0Ax%5E%7B(1)%7D_1%20&amp;%20x%5E%7B(1)%7D_2%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(1)%7D_d%5C%5C%0Ax%5E%7B(2)%7D_1%20&amp;%20x%5E%7B(2)%7D_2%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(2)%7D_d%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%5C%5C%0Ax%5E%7B(N)%7D_1%20&amp;%20x%5E%7B(N)%7D_2%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(N)%7D_d%0A%5Cend%7Bbmatrix%7D%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5C%7By%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D"> are the targets for each of the <img src="https://latex.codecogs.com/png.latex?N"> training examples</li>
<li><img src="https://latex.codecogs.com/png.latex?z%5E%7B(i)%7D"> is the output of our single neuron when the <img src="https://latex.codecogs.com/png.latex?i">-th training example is passed through it
<ul>
<li>Specifically, <img src="https://latex.codecogs.com/png.latex?z%5E%7B(i)%7D%20=%20%5Cmathbf%7Bw%7D%5ET%5Cmathbf%7Bx%7D%5E%7B(i)%7D%20+%20b%20=%20b%20+%20%5Csum_%7Bj=1%7D%5E%7Bd%7Dw_%7Bj%7Dx%5E%7B(i)%7D_%7Bj%7D%20=%20b%20+%20w_%7B1%7Dx%5E%7B(i)%7D_%7B1%7D%20+%20%5Cldots%20+%20w_%7Bj%7Dx%5E%7B(i)%7D_%7Bj%7D%20+%20%5Cldots%20+%20w_%7Bd%7Dx%5E%7B(i)%7D_%7Bd%7D">. Additionally we see that,
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20w_%7Bj%7D%7D%20=%20x%5E%7B(i)%7D_%7Bj%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20b%7D%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20=%20w_%7Bj%7D"></li>
</ul></li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?a%5E%7B(i)%7D%20=%20%5Cphi(z%5E%7B(i)%7D)"> is the activation when an input <img src="https://latex.codecogs.com/png.latex?z%5E%7B(i)%7D"> is passed through an activation function <img src="https://latex.codecogs.com/png.latex?%5Cphi">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5C%7Ba%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D"> are the activations for each of the <img src="https://latex.codecogs.com/png.latex?N"> training examples when passed through a single neuron followed by the application of the activation function</li>
<li>For the purposes of this page the activation function is considered to be a ReLU so <img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B(i)%7D%20=%20%5Cphi(z%5E%7B(i)%7D)%20=%20%5Cmax%5C%7B0,%20z%5E%7B(i)%7D%5C%7D%20=%0A%5Cbegin%7Bcases%7D%0Az%5E%7B(i)%7D%20&amp;%20z%5E%7B(i)%7D%20%5Cgt%200%20%5C%5C%0A0%20&amp;%20z%5E%7B(i)%7D%20%5Cleq%200%0A%5Cend%7Bcases%7D%0A"></li>
</ul></li>
</ul>
</section>
<section id="gradients" class="level1">
<h1>Gradients</h1>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Erik Learned-Miller’s <a href="http://Cs231n.stanford.edu/vecDerivs.pdf">Vector, Matrix, and Tensor Derivatives</a> was very helpful for this section particularly the following excerpt from page <img src="https://latex.codecogs.com/png.latex?7">:</p>
<p><img src="https://nasheqlbrm.github.io/blog/images/derivative_single_components.png" class="img-fluid"></p>
<p>Another useful reference is Terence Parr and Jeremy Howard’s <a href="https://explained.ai/matrix-calculus/">Matrix Calculus You Need For Deep Learning</a>.</p>
<p>After reading this post a good next stop would be Justin Johnson’s <a href="http://cs231n.stanford.edu/handouts/linear-backprop.pdf">Backpropagation for a Linear Layer</a>.</p>
</div>
</div>
</div>
<section id="gradient-of-loss-with-respect-to-the-activations-ai" class="level2">
<h2 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-the-activations-ai">Gradient of loss with respect to the Activations <img src="https://latex.codecogs.com/png.latex?a%5E%7B(i)%7D"></h2>
<p><img src="https://latex.codecogs.com/png.latex?J%5Cleft(%5C%7By%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D,%5C%7Ba%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D%5Cright)%20=%20%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bi=1%7D%5E%7BN%7D(y%5E%7B(i)%7D-a%5E%7B(i)%7D)%5E%7B2%7D"> is the loss (mean squared error) across the <img src="https://latex.codecogs.com/png.latex?N"> training examples</p>
<p>The <code>backward</code> function of the <code>Mse</code> class computes an estimate of how the loss function changes as the input activations change.</p>
<div id="89bb62e7-d107-4d15-907e-d9559e183114" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mse():</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp, targ):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp,targ</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(inp, targ)</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb1-6">    </span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-8">        N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-9">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp</span>
<span id="cb1-10">        Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ</span>
<span id="cb1-11">        dJ_dA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>N) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (A.squeeze() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Y).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dA</span></code></pre></div>
</div>
<p>The change in the loss as the <img src="https://latex.codecogs.com/png.latex?i">-th activation changes is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(i)%7D%7D%20=%20%5Cfrac%7B2%7D%7BN%7D%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Cfrac%7B%5Cpartial%20(y%5E%7B(i)%7D-a%5E%7B(i)%7D)%5E%7B2%7D%7D%7B%5Cpartial%20a%5E%7B(i)%7D%7D%20=%20%5Cfrac%7B2%7D%7BN%7D(y%5E%7B(i)%7D-a%5E%7B(i)%7D)%5Cfrac%7B%5Cpartial%20(y%5E%7B(i)%7D-a%5E%7B(i)%7D)%20%7D%7B%5Cpartial%20a%5E%7B(i)%7D%7D%20=%20%5Cfrac%7B2%7D%7BN%7D(a%5E%7B(i)%7D-y%5E%7B(i)%7D)"></p>
<p>where the last step follows because <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20(y%5E%7B(i)%7D-a%5E%7B(i)%7D)%20%7D%7B%5Cpartial%20a%5E%7B(i)%7D%7D%20=%200-1%20=-1">.</p>
<p>The change in the loss as a function of the change in activations from our training examples is captured by the <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%201"> matrix:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A=%20%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B2%7D%7BN%7D%5Cleft(a%5E%7B(1)%7D-y%5E%7B(1)%7D%5Cright)%20%5C%5C%0A%5Cfrac%7B2%7D%7BN%7D%5Cleft(a%5E%7B(2)%7D-y%5E%7B(2)%7D%5Cright)%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B2%7D%7BN%7D%5Cleft(a%5E%7B(N)%7D-y%5E%7B(N)%7D%5Cright)%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>From the implementation perspective, the activations <img src="https://latex.codecogs.com/png.latex?%5C%7Ba%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D"> and the targets <img src="https://latex.codecogs.com/png.latex?%5C%7By%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D"> are passed in and stored during the forward pass (specifically in the dunder <code>__call__</code> method). In the backward pass these are retrieved and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D"> is computed and stored for access by the <code>backward</code> function of the prior layer. Hopefully the <code>backward</code> method for the <code>Mse</code> class makes sense now.</p>
</section>
<section id="gradient-of-loss-with-respect-to-the-linear-output-zi" class="level2">
<h2 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-the-linear-output-zi">Gradient of loss with respect to the Linear Output <img src="https://latex.codecogs.com/png.latex?z%5E%7B(i)%7D"></h2>
<div id="6863192c-2c41-4180-bcfa-c9895353cf9a" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Relu():</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb2-6">    </span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb2-8">        dJ_dA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb2-9">        dA_dZ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() </span>
<span id="cb2-10">        </span>
<span id="cb2-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note this is an elementwise multiplication         </span></span>
<span id="cb2-12">        dJ_dZ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dA_dZ</span>
<span id="cb2-13">        </span>
<span id="cb2-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dZ</span></code></pre></div>
</div>
<p>How does the loss change as the output of the linear unit changes?</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(i)%7D%7D%20%5Cfrac%7B%5Cpartial%20a%5E%7B(i)%7D%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%20=%20%5Cfrac%7B2%7D%7BN%7D%5Cleft(a%5E%7B(i)%7D-y%5E%7B(i)%7D%5Cright)%5Cfrac%7B%5Cpartial%20a%5E%7B(i)%7D%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D"></p>
<p>For the ReLU activation function we have that, <img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20a%5E%7B(i)%7D%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%20=%0A%5Cbegin%7Bcases%7D%0A%20%201%20&amp;%20z%5E%7B(i)%7D%20%5Cgt%200%20%5C%5C%0A%20%200%20&amp;%20z%5E%7B(i)%7D%20%5Cleq%200%0A%5Cend%7Bcases%7D%0A"></p>
<p>and hence</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20a%5E%7B(1)%7D%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20a%5E%7B(2)%7D%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20a%5E%7B(N)%7D%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>Thus the change in the loss as a function of the change in the output from the linear unit on our training examples is given by the <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%201"> matrix:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A=%20%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(1)%7D%7D%5Cfrac%7B%5Cpartial%20a%5E%7B(1)%7D%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(2)%7D%7D%5Cfrac%7B%5Cpartial%20a%5E%7B(2)%7D%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20a%5E%7B(N)%7D%7D%5Cfrac%7B%5Cpartial%20a%5E%7B(N)%7D%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>So <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D"> ends up being an elementwise product between the corresponding entries of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D">.</p>
<p>From the implementation perspective, in the backward pass <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D"> will be computed locally and multiplied elementwise with <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Ba%7D%7D"> (this will have been computed in the backward pass in the <code>Mse</code> class and will be available to access when the backward function of the <code>Relu</code> function is called).</p>
</section>
<section id="gradient-of-loss-with-respect-to-w_j-b-and-x" class="level2">
<h2 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-w_j-b-and-x">Gradient of loss with respect to <img src="https://latex.codecogs.com/png.latex?w_%7Bj%7D,%20b"> and <img src="https://latex.codecogs.com/png.latex?X"></h2>
<p>The next three subsections will explain the <code>backward</code> function of the <code>Lin</code> class.</p>
<div id="7a872e37-5f5a-436e-b3cb-26e767610620" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Lin():</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w,b</span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(inp, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b)</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out</span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See Gradient of loss with respect to w_j         </span></span>
<span id="cb3-11">        dJ_dZ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out.g</span>
<span id="cb3-12">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp</span>
<span id="cb3-13">        dJ_dW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.t() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dJ_dZ</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dW</span>
<span id="cb3-15">        </span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See Gradient of loss with respect to the bias b</span></span>
<span id="cb3-17">        dJ_db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dZ.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_db</span>
<span id="cb3-19">        </span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See Gradient of loss with respect to X</span></span>
<span id="cb3-21">        dJ_dX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dZ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.t()</span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dJ_dX</span></code></pre></div>
</div>
<section id="gradient-of-loss-with-respect-to-w_j" class="level3">
<h3 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-w_j">Gradient of loss with respect to <img src="https://latex.codecogs.com/png.latex?w_%7Bj%7D"></h3>
<p>How does the loss react when we wiggle <img src="https://latex.codecogs.com/png.latex?w_%7Bj%7D">? <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w_%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%20%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%7B%5Cpartial%20w_%7Bj%7D%7D=%20%5Csum_%7Bi=1%7D%5E%7BN%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%20%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20w_%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7Dx%5E%7B(1)%7D_%7Bj%7D%20+%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7Dx%5E%7B(2)%7D_%7Bj%7D%20+%20%5Cldots%20+%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7Dx%5E%7B(N)%7D_%7Bj%7D"></p>
<p>Thus,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bw%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w_%7B1%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w_%7B2%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20w_%7Bd%7D%7D%0A%5Cend%7Bbmatrix%7D%0A=%20%5Cbegin%7Bbmatrix%7D%0Ax%5E%7B(1)%7D_%7B1%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20+%20x%5E%7B(2)%7D_%7B1%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20+%20%5Cldots%20+%20x%5E%7B(N)%7D_%7B1%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%20%5C%5C%0Ax%5E%7B(1)%7D_%7B2%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20+%20x%5E%7B(2)%7D_%7B2%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20+%20%5Cldots%20+%20x%5E%7B(N)%7D_%7B2%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0Ax%5E%7B(1)%7D_%7Bd%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20+%20x%5E%7B(2)%7D_%7Bd%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20+%20%5Cldots%20+%20x%5E%7B(N)%7D_%7Bd%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>This is a matrix multiplication in disguise (each row is a dot product) and can be written more compactly as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bw%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%0Ax%5E%7B(1)%7D_1%20&amp;%20x%5E%7B(2)%7D_1%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(N)%7D_1%5C%5C%0Ax%5E%7B(1)%7D_2%20&amp;%20x%5E%7B(2)%7D_2%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(N)%7D_2%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%5C%5C%0Ax%5E%7B(1)%7D_d%20&amp;%20x%5E%7B(2)%7D_d%20&amp;%20%5Ccdots%20&amp;%20x%5E%7B(N)%7D_d%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A=%5Cmathbf%7BX%7D%5E%7BT%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%0A"></p>
<p>From the implementation perspective <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D%5E%7BT%7D"> is computed locally in the <code>backward</code> function of the <code>Lin</code> class while <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D"> is ready and waiting to be accessed. Recall the latter was computed in the <code>backward</code> function of the <code>Relu</code> class.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Aside
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In the <code>lin_grad</code> function, in the earlier portion of the notebook, we see Jeremy computing the gradient with respect to the weights as <code>w.g = (inp.unsqueeze(-1) * out.g.unsqueeze(1)).sum(0)</code>.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lin_grad(inp, out, w, b):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grad of matmul with respect to input</span></span>
<span id="cb4-3">    inp.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w.t()</span>
<span id="cb4-4">    </span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># What's going on here?</span></span>
<span id="cb4-6">    w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (inp.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out.g.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-7">    </span>
<span id="cb4-8">    b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>This uses broadcasting to achieve the same computation as the matrix multiplication between <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D">.</p>
<p>The <code>inp.unsqueeze(-1)</code> takes <code>inp</code> (our <img src="https://latex.codecogs.com/png.latex?X">) and converts it into a tensor with shape <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20d%20%5Ctimes%201">. This is then multiplied with <code>out.g.unsqueeze(1)</code> (<code>out.g</code> is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D">) with shape <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%201%20%5Ctimes%201">. Broadcasting will make <img src="https://latex.codecogs.com/png.latex?d"> “copies” of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D"> each of which will get multiplied (in the dot product sense) by a column of <img src="https://latex.codecogs.com/png.latex?X"> (each column of <img src="https://latex.codecogs.com/png.latex?X"> is just the feature values across the training examples). Finally, the <code>sum(0)</code> at the end sums across the first axis to get our <img src="https://latex.codecogs.com/png.latex?d%20%5Ctimes%201"> shaped output.</p>
</div>
</div>
</div>
</section>
<section id="gradient-of-loss-with-respect-to-the-bias-b" class="level3">
<h3 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-the-bias-b">Gradient of loss with respect to the bias <img src="https://latex.codecogs.com/png.latex?b"></h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20b%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%20%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%7B%5Cpartial%20b%7D=%20%5Csum_%7Bi=1%7D%5E%7BN%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%20%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20b%7D=%20%5Csum_%7Bi=1%7D%5E%7BN%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%201%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20+%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20+%20%5Cldots%20+%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D"></p>
<p>From the implementation perspective we need to access <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D"> and sum across the first axis. The local derivative computation of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%7B%5Cpartial%20b%7D"> is particulary simple (since each <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20b%7D"> is just <img src="https://latex.codecogs.com/png.latex?1">).</p>
</section>
<section id="gradient-of-loss-with-respect-to-xi_j" class="level3">
<h3 class="anchored" data-anchor-id="gradient-of-loss-with-respect-to-xi_j">Gradient of loss with respect to <img src="https://latex.codecogs.com/png.latex?x%5E%7B(i)%7D_%7Bj%7D"></h3>
<p>Let’s understand how the loss will change as we twiddle the <img src="https://latex.codecogs.com/png.latex?j">-th feature of the <img src="https://latex.codecogs.com/png.latex?i">-th training example.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%20%5Cfrac%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D=%20%5Csum_%7Bk=1%7D%5E%7BN%7D%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(k)%7D%7D%20%5Cfrac%7B%5Cpartial%20z%5E%7B(k)%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7D%5Cfrac%7B%5Cpartial%20z%5E%7B(i)%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20+%20%5Csum_%7Bk:%20k%20%5Cneq%20i%7D%5E%7BN%7D%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(k)%7D%7D%5Cfrac%7B%5Cpartial%20z%5E%7B(k)%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20z%5E%7B(k)%7D%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20=%200"> for any <img src="https://latex.codecogs.com/png.latex?k%20%5Cneq%20i"> we get</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(i)%7D_%7Bj%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(i)%7D%7Dw_%7Bj%7D"></p>
<p>Thus the <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20d"> matrix of these gradients are,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7BX%7D%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(1)%7D_%7B1%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(1)%7D_%7B2%7D%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(1)%7D_%7Bd%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(2)%7D_%7B1%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(2)%7D_%7B2%7D%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(2)%7D_%7Bd%7D%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(N)%7D_%7B1%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(N)%7D_%7B2%7D%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20x%5E%7B(N)%7D_%7Bd%7D%7D%0A%5Cend%7Bbmatrix%7D=%0A%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7Dw_%7B1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7Dw_%7B2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7Dw_%7Bd%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7Dw_%7B1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7Dw_%7B2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7Dw_%7Bd%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7Dw_%7B1%7D%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7Dw_%7B2%7D%20&amp;%20%5Ccdots%20&amp;%20%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7Dw_%7Bd%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>More compactly this can be represented as an outer product,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7BX%7D%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(1)%7D%7D%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(2)%7D%7D%20%5C%5C%0A%5Cvdots%20%5C%5C%0A%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20z%5E%7B(N)%7D%7D%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0Aw_%7B1%7D%20&amp;%20w_%7B2%7D%20&amp;%20%5Ccdots%20&amp;%20w_%7Bd%7D%0A%5Cend%7Bbmatrix%7D%0A=%5Cfrac%7B%5Cpartial%20J%7D%7B%5Cpartial%20%5Cmathbf%7Bz%7D%7D%5Cmathbf%7Bw%7D%5E%7BT%7D%0A"></p>


</section>
</section>
</section>

 ]]></description>
  <category>neural-nets</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-11-13-backward-pass.html</guid>
  <pubDate>Sun, 13 Nov 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Exercises with Convex Sets</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-05-27-exercises-with-convex-sets.html</link>
  <description><![CDATA[ 





<section id="is-the-set-s-ax-b-fx-g-affine" class="level2">
<h2 class="anchored" data-anchor-id="is-the-set-s-ax-b-fx-g-affine">Is the set <img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7BAx%20+%20b%20%7C%20Fx%20=%20g%5C%7D"> affine?</h2>
<p>Consider two points <img src="https://latex.codecogs.com/png.latex?x_1"> and <img src="https://latex.codecogs.com/png.latex?x_2"> in <img src="https://latex.codecogs.com/png.latex?S">. Is <img src="https://latex.codecogs.com/png.latex?y%20=%20%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2"> in the set (for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5Cmathbf%7BR%7D)">?</p>
<p><img src="https://latex.codecogs.com/png.latex?Fy%20=%20F(%20%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2)"> <img src="https://latex.codecogs.com/png.latex?%5Cquad%20=%20%5Ctheta%20Fx_1%20+%20(1-%5Ctheta)Fx_2"> and since <img src="https://latex.codecogs.com/png.latex?x_1,%20x_2%20%5Cin%20S"> we have <img src="https://latex.codecogs.com/png.latex?Fy%20=%20%5Ctheta%20g%20+%20(1-%5Ctheta)g%20=%20g"></p>
<p>This means <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20S"> and that <img src="https://latex.codecogs.com/png.latex?S"> is affine.</p>
</section>
<section id="check-whether-s-alpha-in-mathbfr3-alpha_1-alpha_2-e-t-alpha_3-e-2t-leq-1.1-text-for-t-geq-1-is-affine-convex-andor-a-polyhedron." class="level2">
<h2 class="anchored" data-anchor-id="check-whether-s-alpha-in-mathbfr3-alpha_1-alpha_2-e-t-alpha_3-e-2t-leq-1.1-text-for-t-geq-1-is-affine-convex-andor-a-polyhedron.">Check whether <img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7B%20%5Calpha%20%5Cin%20%5Cmathbf%7BR%7D%5E%7B3%7D%20%7C%20%5Calpha_1%20+%5Calpha_2%20e%5E%7B-t%7D%20+%20%5Calpha_3%20e%5E%7B-2t%7D%20%5Cleq%201.1%20%5Ctext%7B%20for%20%7D%20t%20%5Cgeq%201%5C%7D"> is affine, convex and/or a polyhedron.</h2>
<p><img src="https://latex.codecogs.com/png.latex?S"> cannot be a polyhedron since a polyhedron is defined by finitely many linear inequalities (the condition <img src="https://latex.codecogs.com/png.latex?t%20%5Cgeq%201"> is definitely not on finitely many <img src="https://latex.codecogs.com/png.latex?t">).</p>
<p>Suppose <img src="https://latex.codecogs.com/png.latex?%5Calpha,%20%5Cbeta%20%5Cin%20S"> then is <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20=%20%20%5Ctheta%20%5Calpha%20+%20(1-%5Ctheta)%20%5Cbeta"> in <img src="https://latex.codecogs.com/png.latex?S">?</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cgamma_1%20+%5Cgamma_2%20e%5E%7B-t%7D%20+%20%5Cgamma_3%20e%5E%7B-2t%7D%20=%20%5Ctheta%20%5Calpha_1%20+%20(1-%5Ctheta)%20%5Cbeta_1%20+%20(%5Ctheta%20%5Calpha_2%20+%20(1-%5Ctheta)%20%5Cbeta_2)%20e%5E%7B-t%7D%20+%20(%5Ctheta%20%5Calpha_3%20+%20(1-%5Ctheta)%20%5Cbeta_3)%20e%5E%7B-2t%7D"> <img src="https://latex.codecogs.com/png.latex?=%20%5Ctheta%20(%5Calpha_1%20+%5Calpha_2%20e%5E%7B-t%7D%20+%20%5Calpha_3%20e%5E%7B-2t%7D)%20+%20(1-%5Ctheta)(%5Cbeta_1%20+%5Cbeta_2%20e%5E%7B-t%7D%20+%20%5Cbeta_3%20e%5E%7B-2t%7D)%20%5Cleq%201.1"></p>
<ul>
<li><p>the last inequality holds if <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"> as $ (_1 +_2 e^{-t} + _3 e^{-2t}) $ and <img src="https://latex.codecogs.com/png.latex?(1-%5Ctheta)(%5Cbeta_1%20+%5Cbeta_2%20e%5E%7B-t%7D%20+%20%5Cbeta_3%20e%5E%7B-2t%7D)%20%5Cleq%20(1-%5Ctheta)%20*%201.1">.</p></li>
<li><p>The last inequality won’t hold for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5Cmathbf%7BR%7D"> as $ (_1 +_2 e^{-t} + _3 e^{-2t}) $ if <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%3C%200"> (a similar observation holds for <img src="https://latex.codecogs.com/png.latex?(1-%5Ctheta)">) so <img src="https://latex.codecogs.com/png.latex?S"> is not affine.</p></li>
</ul>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Cgamma%20%5Cin%20S"> if <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"> so <img src="https://latex.codecogs.com/png.latex?S"> is convex.</p>
</section>
<section id="if-two-sets-can-be-separated-by-a-hyperplane-then-they-are-convex.-true-or-false" class="level2">
<h2 class="anchored" data-anchor-id="if-two-sets-can-be-separated-by-a-hyperplane-then-they-are-convex.-true-or-false">If two sets can be separated by a hyperplane, then they are convex. True or False?</h2>
<p>False. (Can do a proof by picture)</p>
</section>
<section id="a-point-x_0-on-the-boundary-of-a-convex-set-uniquely-defines-a-supporting-hyperplane-for-the-set-at-that-point.-true-or-false." class="level2">
<h2 class="anchored" data-anchor-id="a-point-x_0-on-the-boundary-of-a-convex-set-uniquely-defines-a-supporting-hyperplane-for-the-set-at-that-point.-true-or-false.">A point <img src="https://latex.codecogs.com/png.latex?x_0"> on the boundary of a convex set uniquely defines a supporting hyperplane for the set at that point. True or False.</h2>
<p>False. If <img src="https://latex.codecogs.com/png.latex?x_0"> is, for example, the corner of a square in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E2">, then there are infinitely many supporting hyperplanes at that point.</p>
</section>
<section id="consider-the-cone-k-x_1x_2-0-leq-x_1-leq-x_2-subseteq-mathbfr2." class="level2">
<h2 class="anchored" data-anchor-id="consider-the-cone-k-x_1x_2-0-leq-x_1-leq-x_2-subseteq-mathbfr2.">Consider the cone <img src="https://latex.codecogs.com/png.latex?K%20=%20%5C%7B(x_1,x_2)%20%7C%200%20%5Cleq%20x_1%20%5Cleq%20x_2%5C%7D%20%5Csubseteq%20%5Cmathbf%7BR%7D%5E2">.</h2>
<ul>
<li><p>Is <img src="https://latex.codecogs.com/png.latex?(1,3)%20%5Cpreceq_%7BK%7D%20(3,4)"> True or False? False. <img src="https://latex.codecogs.com/png.latex?(1,3)%20%5Cpreceq_%7BK%7D%20(3,4)%20%5CLongleftrightarrow%20(3,4)%20-%20(1,3)%20%5Cin%20K">. So the question is if <img src="https://latex.codecogs.com/png.latex?(2,1)%20%5Cin%20K">? Clearly not since the <img src="https://latex.codecogs.com/png.latex?x_1%20%3E%20x_2">.</p></li>
<li><p>Is <img src="https://latex.codecogs.com/png.latex?(-1,2)%20%5Csucceq_%7BK%5E%7B%5Cast%7D%7D%200"> True or False? True. Now <img src="https://latex.codecogs.com/png.latex?(-1,2)%20%5Csucceq_%7BK%5E%7B%5Cast%7D%7D%200%20%5CLongleftrightarrow%20(-1,2)%5E%7BT%7Dx%20%5Cgeq%200,%20%5Cforall%20x%20%5Csucceq_%7BK%7D%200">. But $(-1,2)^{T}x = -x_1 + x_2 &gt;=0 $ for any <img src="https://latex.codecogs.com/png.latex?x%20%5Csucceq_%7BK%7D%200"> (since <img src="https://latex.codecogs.com/png.latex?x_1%20%5Cleq%20x_2">) thus this claim is True.</p></li>
</ul>
</section>
<section id="what-is-the-distance-between-the-two-parallel-hyperplanes-h_1-x-in-mathbfrn-atxb_1-and-h_2-x-in-mathbfrn-atxb_2" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-distance-between-the-two-parallel-hyperplanes-h_1-x-in-mathbfrn-atxb_1-and-h_2-x-in-mathbfrn-atxb_2">What is the distance between the two parallel hyperplanes <img src="https://latex.codecogs.com/png.latex?H_1%20=%20%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7Bn%7D%20%7C%20a%5ETx=b_1%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?H_2%20=%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7Bn%7D%20%7C%20a%5ETx=b_2%5C%7D">?</h2>
Let’s turn to 2d for inspiration.
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/parallel_hyperplanes_2d.jpg?raw=1" width="400"></p>
</div>
<p>The line with end points <img src="https://latex.codecogs.com/png.latex?(b_2/a_1,0)"> and <img src="https://latex.codecogs.com/png.latex?(0,b_2/a_2)"> is on the hyperplane <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7B2%7D%20%7C%20a%5ETx=b_2%5C%7D"> while that with end points <img src="https://latex.codecogs.com/png.latex?(b_1/a_1,0)"> and <img src="https://latex.codecogs.com/png.latex?(0,b_1/a_2)"> is on the hyperplane <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7B2%7D%20%7C%20a%5ETx=b_2%5C%7D">.</p>
<p><em>We have been asked to find <img src="https://latex.codecogs.com/png.latex?d">.</em></p>
<p>The vector <img src="https://latex.codecogs.com/png.latex?x%20=%20(x_1,x_2)"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20(%5Chat%7Bx%7D_1,%5Chat%7Bx%7D_2)"> are collinear with the vector <img src="https://latex.codecogs.com/png.latex?a%20=%20(a_1,a_2)">. Thus, the cosine of the angle between the vectors <img src="https://latex.codecogs.com/png.latex?x"> with <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> with <img src="https://latex.codecogs.com/png.latex?a"> should equal <img src="https://latex.codecogs.com/png.latex?1"> (since <img src="https://latex.codecogs.com/png.latex?%5Ccos%200%20=1">).</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Ba_1x_1%20+%20a_2x_2%7D%7B%7C%7Ca%7C%7C_2%7C%7Cx%7C%7C_2%7D%20=%201"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Ba_1%5Chat%7Bx%7D_1%20+%20a_2%5Chat%7Bx%7D_2%7D%7B%7C%7Ca%7C%7C_2%7C%7C%5Chat%7Bx%7D%7C%7C_2%7D%20=%201"> or that <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bb_2%7D%7B%7C%7Ca%7C%7C_2%7C%7Cx%7C%7C_2%7D%20=%201"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bb_1%7D%7B%7C%7Ca%7C%7C_2%7C%7C%5Chat%7Bx%7D%7C%7C_2%7D%20=%201"> (since <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> lie on <img src="https://latex.codecogs.com/png.latex?H_1"> and <img src="https://latex.codecogs.com/png.latex?H_2"> respectively).</p>
<p>Thus, we get that <img src="https://latex.codecogs.com/png.latex?%7C%7Cx%7C%7C_2%20=%20%5Cfrac%7Bb_2%7D%7B%7C%7Ca%7C%7C_2%7D"> and <img src="https://latex.codecogs.com/png.latex?%7C%7C%5Chat%7Bx%7D%7C%7C_2%20=%20%5Cfrac%7Bb_1%7D%7B%7C%7Ca%7C%7C_2%7D"> (these measure the lengths of the vector <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D"> respectively).</p>
<p>Hence, <img src="https://latex.codecogs.com/png.latex?d%20=%20%7C%7C%5Chat%7Bx%7D%7C%7C_2%20-%20%7C%7Cx%7C%7C_2%20=%20%5Cfrac%7Bb_1%20-%20b_2%7D%7B%7C%7Ca%7C%7C_2%7D"></p>
<p>Another way to think about this is that for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"> a point of the form <img src="https://latex.codecogs.com/png.latex?(%5Cfrac%7Bb_2%7D%7Ba_1%7D%5Ctheta,%20%5Cfrac%7Bb_2%7D%7Ba_2%7D(1-%5Ctheta))"> lies on <img src="https://latex.codecogs.com/png.latex?H_1">. So,in particular, for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Cfrac%7Ba_1%5E2%7D%7B%7C%7Ca%7C%7C%5E2_2%7D"> we have that <img src="https://latex.codecogs.com/png.latex?(x_1,x_2)%20=%20(%5Cfrac%7Bb_2%7D%7Ba_1%7D%5Cfrac%7Ba_1%5E2%7D%7B%7C%7Ca%7C%7C%5E2_2%7D,%20%5Cfrac%7Bb_2%7D%7Ba_2%7D%5Cfrac%7Ba_2%5E2%7D%7B%7C%7Ca%7C%7C%5E2_2%7D)"> lies on <img src="https://latex.codecogs.com/png.latex?H_1">. Thus, <img src="https://latex.codecogs.com/png.latex?x%20=%20(%5Cfrac%7Bb_2%7D%7B%7C%7Ca%7C%7C%5E2_2%7Da_1,%20%5Cfrac%7Bb_2%7D%7B%7C%7Ca%7C%7C%5E2_2%7Da_2)"></p>
<p>Similarly, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bx%7D%20=%20(%5Cfrac%7Bb_1%7D%7B%7C%7Ca%7C%7C%5E2_2%7Da_1,%20%5Cfrac%7Bb_1%7D%7B%7C%7Ca%7C%7C%5E2_2%7Da_2)"></p>
<p>So d = <img src="https://latex.codecogs.com/png.latex?%7C%7Cx-%5Chat%7Bx%7D%7C%7C_2%20=%20%5Csqrt%7B%20%5Cfrac%7B(b_2-b_1)%5E2%7D%7B%7C%7Ca%7C%7C%5E4_2%7Da%5E2_1%20+%20%5Cfrac%7B(b_2-b_1)%5E2%7D%7B%7C%7Ca%7C%7C%5E4_2%7Da%5E2_2%7D%20=%20%5Csqrt%7B%5Cfrac%7B(b_2-b_1)%5E2%7D%7B%7C%7Ca%7C%7C%5E2_2%7D%7D%20=%20%5Cfrac%7B%7Cb_2-b_1%7C%7D%7B%7C%7Ca%7C%7C_2%7D"></p>
</section>
<section id="let-a-and-b-be-distinct-points-in-mathbfrn-and-consider-the-set-of-points-that-are-closer-in-euclidean-norm-to-a-than-b-i.e.-mathcalc-x-x-a_2-leq-x-b_2-.-show-that-mathcalc-is-a-halfspace-namely-that-it-can-be-described-by-a-set-of-the-form-x-ctx-leq-d-for-c-neq-0." class="level2">
<h2 class="anchored" data-anchor-id="let-a-and-b-be-distinct-points-in-mathbfrn-and-consider-the-set-of-points-that-are-closer-in-euclidean-norm-to-a-than-b-i.e.-mathcalc-x-x-a_2-leq-x-b_2-.-show-that-mathcalc-is-a-halfspace-namely-that-it-can-be-described-by-a-set-of-the-form-x-ctx-leq-d-for-c-neq-0.">Let <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> be distinct points in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D%5E%7Bn%7D"> and consider the set of points that are closer (in Euclidean norm) to <img src="https://latex.codecogs.com/png.latex?a"> than <img src="https://latex.codecogs.com/png.latex?b"> i.e., <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D%20=%20%5C%7Bx%20%7C%20%7C%7Cx-a%7C%7C_2%20%5Cleq%20%7C%7Cx-b%7C%7C_2%20%5C%7D">. Show that <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D"> is a halfspace (namely that it can be described by a set of the form <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%7C%20c%5ETx%20%5Cleq%20d%5C%7D"> for <img src="https://latex.codecogs.com/png.latex?c%20%5Cneq%200">).</h2>
<p>Norms are strictly non-negative so, <img src="https://latex.codecogs.com/png.latex?%7C%7Cx-a%7C%7C_2%20%5Cleq%20%7C%7Cx-b%7C%7C_2%20%5CLongleftrightarrow%20%7C%7Cx-a%7C%7C%5E%7B2%7D_2%20%5Cleq%20%7C%7Cx-b%7C%7C%5E%7B2%7D_2%20"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?(x-a)%5ET(x-a)%20%5Cleq%20(x-b)%5ET(x-b)"> or <img src="https://latex.codecogs.com/png.latex?x%5ETx%20-2a%5ETx%20+%20a%5ETa%20%5Cleq%20x%5ETx%20-2b%5ETx%20+%20b%5ETb">.</p>
<p>So <img src="https://latex.codecogs.com/png.latex?2(b%5ET%20-%20a%5ET)x%20%5Cleq%20b%5ETb%20-%20a%5ETa"> or <img src="https://latex.codecogs.com/png.latex?2(b-a)%5ETx%20%5Cleq%20b%5ETb%20-%20a%5ETa"> which satisfies the definition of a half space of the form <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%7C%20c%5ETx%20%5Cleq%20d%5C%7D"> with <img src="https://latex.codecogs.com/png.latex?c%20=%20(b-a)%5ET"> and <img src="https://latex.codecogs.com/png.latex?d=%5Cfrac%7Bb%5ETb%20-%20a%5ETa%7D%7B2%7D">.</p>
</section>
<section id="which-of-the-following-sets-is-convex" class="level2">
<h2 class="anchored" data-anchor-id="which-of-the-following-sets-is-convex">Which of the following sets is convex?</h2>
<ul>
<li><em>A slab, i.e., a set of the form <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7Bn%7D%20%7C%20%5Calpha%20%5Cleq%20a%5ETx%5Cleq%20%5Cbeta%20%5C%7D"></em>. Yes, convex since this is an intersection of two half spaces (it is also a polyhedron). Recall a half space is convex and an intersection of convex sets is convex.</li>
<li><em>A rectangle, i.e., a set of the form <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7Bn%7D%20%7C%20%5Calpha_i%20%5Cleq%20x_i%5Cleq%20%5Cbeta_i%20%5C%7D"></em>. A rectangle is sometimes called a hyperrectangle when <img src="https://latex.codecogs.com/png.latex?n%20%3E%202">. Yes, convex since it is an intersection of finitely many half spaces (it’s also a polyhedron).</li>
<li><em>A wedge, i.e., a set of the form <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5Cmathbf%7BR%7D%5E%7Bn%7D%20%7C%20a_1%5ETx%5Cleq%20b_1,%20a_2%5ETx%5Cleq%20b_2%20%5C%7D"></em>. Yes, convex since an intersection of two half spaces.</li>
<li><em>The set of points closer to a given point than a given set i.e., <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%7C%20%7C%7Cx%20-%20x_0%7C%7C_2%20%5Cleq%20%7C%7Cx-y%7C%7C_2%20%5Ctext%7B%20for%20all%20%7D%20y%5Cin%20S%5C%7D"> where <img src="https://latex.codecogs.com/png.latex?S%20%5Csubseteq%20%5Cmathbf%7BR%7D%5E%7Bn%7D"></em>. We can see that <img src="https://latex.codecogs.com/png.latex?S%20=%20%5Ccap_%7By%5Cin%20S%7D%20S(y)"> where <img src="https://latex.codecogs.com/png.latex?S(y)%20=%20%5C%7Bx%20%7C%20%7C%7Cx%20-%20x_0)%7C%7C_2%20%5Cleq%20%7C%7Cx-y%7C%7C_2%5C%7D"> (for some specific choice of <img src="https://latex.codecogs.com/png.latex?y%20%5Cin%20S">). Each <img src="https://latex.codecogs.com/png.latex?S(y)"> is convex and hence <img src="https://latex.codecogs.com/png.latex?S"> is convex since it is the intersection of convex sets.</li>
<li><em>The set of points closer to one set than another, i.e., <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D%20=%20%5C%7Bx%20%7C%20dist(x,S)%20%5Cleq%20dist(x,T)%5C%7D">, where <img src="https://latex.codecogs.com/png.latex?S,T%20%5Csubseteq%20%5Cmathbf%7BR%7D%5E%7Bn%7D">, and <img src="https://latex.codecogs.com/png.latex?dist(x,S)%20=%20%5Ctext%7Binf%7D%5C%7B%7C%7Cx-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D"></em>. Suppose <img src="https://latex.codecogs.com/png.latex?x,y%20%5Cin%20%5Cmathcal%7BC%7D"> then for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"> is <img src="https://latex.codecogs.com/png.latex?c=%5Ctheta%20x%20+%20(1-%5Ctheta)%20y"> in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D">?</li>
</ul>
<p>Since <img src="https://latex.codecogs.com/png.latex?x,y%20%5Cin%20%5Cmathcal%7BC%7D"> we have <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%7C%7Cx-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%7C%7Cx-z%7C%7C_2%20%7C%20z%20%5Cin%20T%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%7C%7Cy-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%7C%7Cy-z%7C%7C_2%20%7C%20z%20%5Cin%20T%5C%7D">. Then, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%5Ctheta%7C%7Cx-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20+%20%5Ctext%7Binf%7D%5C%7B(1-%5Ctheta)%7C%7Cy-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%5Ctheta%7C%7Cx-z%7C%7C_2%7C%20z%20%5Cin%20T%5C%7D%20+%20%5Ctext%7Binf%7D%5C%7B(1-%5Ctheta)%7C%7Cy-z%7C%7C_2%7C%20z%20%5Cin%20T%5C%7D"></p>
<p>In order to show <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%7C%7Cc-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%7C%7Cc-z%7C%7C_2%20%7C%20z%20%5Cin%20T%5C%7D"> we could potentially argue that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%7C%7Cc-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%5Ctheta%7C%7Cx-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D%20+%20%5Ctext%7Binf%7D%5C%7B(1-%5Ctheta)%7C%7Cy-z%7C%7C_2%20%7C%20z%20%5Cin%20S%5C%7D"> (Triangle inequality?)</p>
<p>However we likely won’t be able to show <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Binf%7D%5C%7B%7C%7Cc-z%7C%7C_2%20%7C%20z%20%5Cin%20T%5C%7D%20%5Cleq%20%5Ctext%7Binf%7D%5C%7B%5Ctheta%7C%7Cx-z%7C%7C_2%7C%20z%20%5Cin%20T%5C%7D%20+%20%5Ctext%7Binf%7D%5C%7B(1-%5Ctheta)%7C%7Cy-z%7C%7C_2%7C%20z%20%5Cin%20T%5C%7D"> (it may go the other direction).</p>
<p>So I feel <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D"> is not convex.</p>
</section>
<section id="let-x-be-a-real-valued-random-variable-with-mathbfprobxa_ip_i-i1ldotsn-where-a_1-a_2-ldots-a_n.-of-course-p-in-mathbfrn-lies-in-the-standard-probability-simplex-p-p-mathbf1tp1-p-succeq-0.-which-if-the-following-conditions-are-convex-in-p.-that-is-for-which-of-the-following-conditions-is-the-set-of-p-in-p-that-satisfy-the-condition-convex." class="level2">
<h2 class="anchored" data-anchor-id="let-x-be-a-real-valued-random-variable-with-mathbfprobxa_ip_i-i1ldotsn-where-a_1-a_2-ldots-a_n.-of-course-p-in-mathbfrn-lies-in-the-standard-probability-simplex-p-p-mathbf1tp1-p-succeq-0.-which-if-the-following-conditions-are-convex-in-p.-that-is-for-which-of-the-following-conditions-is-the-set-of-p-in-p-that-satisfy-the-condition-convex.">Let <img src="https://latex.codecogs.com/png.latex?x"> be a real-valued random variable with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprob%7D(x=a_%7Bi%7D)=p_i,%20i=1,%5Cldots,n">, where <img src="https://latex.codecogs.com/png.latex?a_1%20%3C%20a_2%20%3C%20%5Cldots%20%3C%20a_n">. Of course <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5Cmathbf%7BR%7D%5En"> lies in the standard probability simplex <img src="https://latex.codecogs.com/png.latex?P%20=%20%5C%7Bp%20%7C%20%5Cmathbf%7B1%7D%5ETp=1,%20p%20%5Csucceq%200%5C%7D">. Which if the following conditions are convex in <img src="https://latex.codecogs.com/png.latex?p">. (That is, for which of the following conditions is the set of <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20P"> that satisfy the condition convex?).</h2>
<p>Now <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BE%7Df(x)%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7Dp_i%20f(a_i)%20=%20w%5ETp"> where <img src="https://latex.codecogs.com/png.latex?w%5E%7BT%7D%20=(f(a_1),%5Cldots,f(a_n))">. Essentially the <img src="https://latex.codecogs.com/png.latex?w">’s are constants.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cleq%20%5Cmathbf%7BE%7Df(x)%20%5Cleq%20%5Cbeta"> - This is a slab so it is convex.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprob%7D(x%20%3E%20%5Calpha)%20%5Cleq%20%5Cbeta"> - Now <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprob%7D(x%20%3E%20%5Calpha)%20=%20%5Csum_%7Bi:a_%7Bi%7D%20%3E%20%5Calpha%7Dp_%7Bi%7D">. We can define an indicator function that takes the value <img src="https://latex.codecogs.com/png.latex?0"> when <img src="https://latex.codecogs.com/png.latex?i"> is such that <img src="https://latex.codecogs.com/png.latex?a_i%20%5Cleq%20%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?1"> otherwise. The expecation of that indicator function is the same as the desired probability. So <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprob%7D(x%20%3E%20%5Calpha)%20=%20%5Csum_%7Bi%7D%20p_%7Bi%7D%20f(a_i)"> where <img src="https://latex.codecogs.com/png.latex?f(a_i)%20=%20I(a_i%20%3E%20%5Calpha)"> so this is a half space and hence convex.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BE%7D%7Cx%5E3%7C%20%5Cleq%20%5Calpha%20%5Cmathbf%7BE%7D%7Cx%7C"> - This is nothing but <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(%7Ca_i%5E3%7C%20-%20%5Calpha%7Ca_i%7C)p_i%20%5Cleq%200"> which is a half space hence it is convex.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BE%7D%7Cx%5E2%7C%20%5Cleq%20%5Calpha"> - This is nothing but <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%7Ca_i%5E2%7Cp_i%20%5Cleq%200"> which is a half space hence it is convex.</li>
</ul>
</section>
<section id="what-is-the-dual-cone-of" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-dual-cone-of">What is the dual cone of:</h2>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?K%20=%20%5C%7B0%5C%7D%20%5Csubseteq%20%5Cmathbf%7BR%7D%5E2">? The dual cone of a cone <img src="https://latex.codecogs.com/png.latex?K"> is <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5C%7By%20%7C%20y%5ETx%20%5Cgeq%200%20%5Cforall%20x%20%5Cin%20K%5C%7D">. So for this case we will have <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5C%7By%20%7C%20y%5ETx%20%5Cgeq%200%20%5Ctext%7B%20for%20all%20%7D%20x%20%5Cin%20%5C%7B0%5C%7D%5C%7D">. Hence <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5Cmathbf%7BR%7D%5E2">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?K%20=%20%5Cmathbf%7BR%7D%5E2">? <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5C%7By%20%7C%20y%5ETx%20%5Cgeq%200%20%5Ctext%7B%20for%20all%20%7D%20x%20%5Cin%20%5Cmathbf%7BR%7D%5E2%5C%7D%20=%20%5C%7B0%5C%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?K%20=%20%5C%7B%20(x,y)%7C%20%5Ctext%7B%20%20%7D%20%7Cx%7C%20%5Cleq%20y%20%5C%7D">? A 2d picture really helps here, as we are essentially looking a region of vectors which has a non negative inner product with <img src="https://latex.codecogs.com/png.latex?K">. <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5C%7B%20(x,y)%7C%20%5Ctext%7B%20%20%7D%20%7Cx%7C%20%5Cleq%20y%20%5C%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?K%20=%20%5C%7B%20(x,y)%20%7C%20x%20+%20y%20=%200%20%5C%7D">? Draw a picture of this line in 2d. Then convince yourself that <img src="https://latex.codecogs.com/png.latex?K%5E%7B%5Cast%7D%20=%20%5C%7B%20(x,y)%20%7C%20x%20-%20y%20=%200%20%5C%7D"></p></li>
</ul>
</section>
<section id="which-conditions-in-terms-of-the-ordinary-inequalities-on-matrix-coefficents-must-hold-true-for-the-elements-of-the-positive-semidefinite-cone-mathbfsn_-for-n123" class="level2">
<h2 class="anchored" data-anchor-id="which-conditions-in-terms-of-the-ordinary-inequalities-on-matrix-coefficents-must-hold-true-for-the-elements-of-the-positive-semidefinite-cone-mathbfsn_-for-n123">Which conditions, in terms of the ordinary inequalities on matrix coefficents, must hold true for the elements of the positive semidefinite cone <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BS%7D%5E%7Bn%7D_+"> for <img src="https://latex.codecogs.com/png.latex?n=1,2,3">:</h2>
<p>Recall that: 1. <img src="https://latex.codecogs.com/png.latex?X%20%5Cin%20%5Cmathbf%7BS%7D%5E%7Bn%7D_+%20%5CLongleftrightarrow%20z%5ETXz%20%5Cgeq%200"> for all <img src="https://latex.codecogs.com/png.latex?z">.</p>
<ol start="2" type="1">
<li>Per <span class="citation" data-cites="prussing1986principal">[1]</span>, a symmetric <img src="https://latex.codecogs.com/png.latex?n%20x%20n"> matrix is positive semidefinite if and only if all principal minors (determinants of symmetric submatrices) of the the matrix are nonnegative. In contrast, for a symmetric <img src="https://latex.codecogs.com/png.latex?n%20x%20n"> matrix to be positive definite we only need all of the <em>leading</em> principal minors (upper left determinants) to be positive (<em>Sylvester’s criterion</em>).</li>
</ol>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?n=1,%5Cquad%20%5Bx_1%5D">: Thus we must have <img src="https://latex.codecogs.com/png.latex?z%5E2x%20%5Cgeq%200"> for all <img src="https://latex.codecogs.com/png.latex?z">. Since <img src="https://latex.codecogs.com/png.latex?z%5E2%20%5Cgeq%200"> we must have <img src="https://latex.codecogs.com/png.latex?x_1%20%5Cgeq%200">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?n=2">, <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation*%7D%0AX%20=%0A%5Cbegin%7Bbmatrix%7D%0Ax_1%20&amp;%20x_2%20%5C%5C%0Ax_2%20&amp;%20x_3%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Bequation*%7D"> We want <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation*%7D%0A%5Cbegin%7Bbmatrix%7D%0Az_1%20&amp;%20z_2%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0Ax_1%20&amp;%20x_2%20%5C%5C%0Ax_2%20&amp;%20x_3%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0Az_1%20%5C%5C%0Az_2%0A%5Cend%7Bbmatrix%7D%0A=x_1z_1%5E2%20+%202x_2z_1z_2%20+%20x_3z_2%5E2%20%5Cgeq%200%0A%5Cend%7Bequation*%7D"> So for <img src="https://latex.codecogs.com/png.latex?X"> to be positive semidefinite we must have <img src="https://latex.codecogs.com/png.latex?x_1%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_3%20%5Cgeq%200"> and <img src="https://latex.codecogs.com/png.latex?x_1x_3%20-x%5E2_2%20%5Cgeq%200">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?n=3">, <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation*%7D%0AX=%0A%5Cbegin%7Bbmatrix%7D%0Ax_1%20&amp;%20x_2%20&amp;%20x_3%20%5C%5C%0Ax_2%20&amp;%20x_4%20&amp;%20x_5%20%5C%5C%0Ax_3%20&amp;%20x_5%20&amp;%20x_6%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Bequation*%7D"> So for <img src="https://latex.codecogs.com/png.latex?X"> to be positive semidefinite we must have <img src="https://latex.codecogs.com/png.latex?x_1%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_4%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_6%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_4x_6%20-x%5E2_5%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_1x_6%20-x%5E2_3%20%5Cgeq%200">, <img src="https://latex.codecogs.com/png.latex?x_1x_4%20-x%5E2_2%20%5Cgeq%200"> and <img src="https://latex.codecogs.com/png.latex?x_6x_4x_1%20-%20x_6x_2%5E2%20-%20x_4x_3%5E2%20-x_5%5E2x_1%20+%202x_5x_3x_2%20%5Cgeq%200"></p></li>
</ul>
</section>
<section id="show-the-set-c-xy-in-mathbfr2_-xy-geq-alpha-is-convex." class="level2">
<h2 class="anchored" data-anchor-id="show-the-set-c-xy-in-mathbfr2_-xy-geq-alpha-is-convex.">Show the set <img src="https://latex.codecogs.com/png.latex?C%20=%20%5C%7B(x,y)%20%5Cin%20%5Cmathbf%7BR%7D%5E2_%7B++%7D%20%7C%20xy%20%5Cgeq%20%5Calpha%20%5C%7D"> is convex.</h2>
<p>Consider two points <img src="https://latex.codecogs.com/png.latex?(x_1,y_1)%20%5Cin%20C"> and <img src="https://latex.codecogs.com/png.latex?(x_2,y_2)%20%5Cin%20C">. So we have that <img src="https://latex.codecogs.com/png.latex?y_1%20%5Cgeq%20%5Cfrac%7B%5Calpha%7D%7Bx_1%7D"> and <img src="https://latex.codecogs.com/png.latex?y_2%20%5Cgeq%20%5Cfrac%7B%5Calpha%7D%7Bx_2%7D"> (since both <img src="https://latex.codecogs.com/png.latex?(x_1,y_1),%20(x_2,y_2)%20%5Cin%20%5Cmathbf%7BR%7D%5E2_%7B++%7D"> we can safely divide by <img src="https://latex.codecogs.com/png.latex?x_1"> and <img src="https://latex.codecogs.com/png.latex?x_2">). Thus, for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20%5Cin%20%5B0,1%5D"> we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctheta%20y_1%20+%20(1-%5Ctheta)y_2%20%5Cgeq%20%5Calpha%5Cleft%5B%20%5Cfrac%7B%5Ctheta%7D%7Bx_1%7D%20+%20%5Cfrac%7B1-%5Ctheta%7D%7Bx_2%7D%20%5Cright%5D"></p>
<p>Multiplying both sides by <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2"> we get that</p>
<p><img src="https://latex.codecogs.com/png.latex?(%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2)(%5Ctheta%20y_1%20+%20(1-%5Ctheta)y_2)%20%5Cgeq%20%5Calpha%5Cleft%5B%20%5Ctheta%5E2%20+%20%5Ctheta(1-%5Ctheta)%5Cfrac%7Bx_1%7D%7Bx_2%7D%20+%20%5Ctheta(1-%5Ctheta)%5Cfrac%7Bx_2%7D%7Bx_1%7D%20+%20(1-%5Ctheta)%5E2%20%5Cright%5D"> <img src="https://latex.codecogs.com/png.latex?%20%5Cgeq%20%5Calpha%5Cleft%5B%201%20+%202%5Ctheta%5E2%20-2%5Ctheta%20+%20%5Ctheta(1-%5Ctheta)%5Cfrac%7Bx_1%5E2%20+%20x_2%5E2%7D%7Bx_1x_2%7D%20%5Cright%5D"> <img src="https://latex.codecogs.com/png.latex?%20%5Cgeq%20%5Calpha%5Cleft%5B%201%20-%202%5Ctheta(1%20-%5Ctheta)%20+%20%5Ctheta(1-%5Ctheta)%5Cfrac%7Bx_1%5E2%20+%20x_2%5E2%7D%7Bx_1x_2%7D%20%5Cright%5D"> <img src="https://latex.codecogs.com/png.latex?%20%5Cgeq%20%5Calpha%5Cleft%5B%201%20-%20%5Ctheta(1%20-%5Ctheta)%5Cleft(2-%20%5Cfrac%7Bx_1%5E2%20+%20x_2%5E2%7D%7Bx_1x_2%7D%5Cright)%20%5Cright%5D"> <img src="https://latex.codecogs.com/png.latex?%20%5Cgeq%20%5Calpha%5Cleft%5B%201%20+%20%5Ctheta(1%20-%5Ctheta)%5Cfrac%7B(x_1%20-%20x_2)%5E2%7D%7Bx_1x_2%7D%20%5Cright%5D"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?1%20+%20%5Ctheta(1%20-%5Ctheta)%5Cfrac%7B(x_1%20-%20x_2)%5E2%7D%7Bx_1x_2%7D%20%5Cgeq%201"> we have shown that <img src="https://latex.codecogs.com/png.latex?(%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2)(%5Ctheta%20y_1%20+%20(1-%5Ctheta)y_2)%20%5Cgeq%20%5Calpha">.</p>
<p>Thus <img src="https://latex.codecogs.com/png.latex?(%5Ctheta%20x_1%20+%20(1-%5Ctheta)x_2,%20%5Ctheta%20y_1%20+%20(1-%5Ctheta)y_2)%20%5Cin%20C"> and hence <img src="https://latex.codecogs.com/png.latex?C"> is convex.</p>
<p>Note that <img src="https://latex.codecogs.com/png.latex?C%20=%20%5C%7B(x,y)%20%5Cin%20%5Cmathbf%7BR%7D%5E2_%7B+%7D%20%7C%20xy%20%5Cgeq%200%20%5C%7D"> is convex since in that case <img src="https://latex.codecogs.com/png.latex?C%20=%20%5C%7B(x,y)%20%5Cin%20%5Cmathbf%7BR%7D%5E2_%7B+%7D%5C%7D"> which is convex.</p>
</section>
<section id="notation" class="level1">
<h1>Notation</h1>
<ul>
<li>Let <img src="https://latex.codecogs.com/png.latex?A"> be a symmetric <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> matrix then a <em>principal minor</em> of order <img src="https://latex.codecogs.com/png.latex?k"> is obtained by deleting <img src="https://latex.codecogs.com/png.latex?n-k"> rows and the <img src="https://latex.codecogs.com/png.latex?n-k"> columns with the same numbers (where <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5B1,%5Cldots,n%5D">). Use <img src="https://latex.codecogs.com/png.latex?%5CDelta_k"> for the principal minor of order <img src="https://latex.codecogs.com/png.latex?k">.
<ul>
<li>There are <img src="https://latex.codecogs.com/png.latex?%5Cbinom%7Bn%7D%7Bk%7D"> <em>principal minors</em> of order <img src="https://latex.codecogs.com/png.latex?k">. Thus, there are a total of <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn%7D-1"> <em>principal minors</em>.</li>
</ul></li>
<li>The <em>leading principal minor</em> of <img src="https://latex.codecogs.com/png.latex?A"> of order <img src="https://latex.codecogs.com/png.latex?k"> is the minor of order <img src="https://latex.codecogs.com/png.latex?k"> obtained by deleting the last <img src="https://latex.codecogs.com/png.latex?n-k"> rows and columns (where <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5B1,%5Cldots,n%5D">). Use <img src="https://latex.codecogs.com/png.latex?D_k"> for the leading principal minor of order <img src="https://latex.codecogs.com/png.latex?k">.
<ul>
<li>The leading principal minors are a subset of the principal minors.</li>
<li>The leading principal minors are the upper left determinants of the matrix.</li>
</ul></li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-prussing1986principal" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. E. Prussing, <span>“The principal minor test for semidefinite matrices,”</span> <em>Journal of Guidance, Control, and Dynamics</em>, vol. 9, no. 1, pp. 121–122, 1986.</div>
</div>
</div></section></div> ]]></description>
  <category>notes</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-05-27-exercises-with-convex-sets.html</guid>
  <pubDate>Fri, 27 May 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Losses</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-05-26-losses.html</link>
  <description><![CDATA[ 





<p>Some notes while reading <span class="citation" data-cites="barratt2021optimal">Barratt, Angeris, and Boyd (2021)</span>.</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cvxpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cp</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rsw</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<section id="equality-loss" class="level2">
<h2 class="anchored" data-anchor-id="equality-loss">Equality Loss</h2>
<p>Constrain <img src="https://latex.codecogs.com/png.latex?x%20=%20f_%7B%5Ctext%7Bdes%7D%7D"> so let <img src="https://latex.codecogs.com/png.latex?l(x,%20f_%7Bdes%7D)%20=%20+%5Cinfty"> for <img src="https://latex.codecogs.com/png.latex?x%20%5Cneq%20f_%7Bdes%7D"> and <img src="https://latex.codecogs.com/png.latex?0"> when <img src="https://latex.codecogs.com/png.latex?x%20=%20f_%7Bdes%7D">. Here <img src="https://latex.codecogs.com/png.latex?l"> represents our loss function.</p>
<section id="convex-optimization-version" class="level3">
<h3 class="anchored" data-anchor-id="convex-optimization-version">Convex Optimization Version</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin%20%5Cfrac%7B1%7D%7B%5Clambda%7D%5Csum_%7Bi=1%7D%5E%7Bm%7D(%20%5Chat%7Bf%7D_%7Bi%7D-f%5E%7Bi%7D)%5E%7B2%7D%20=%20%5Cfrac%7B1%7D%7B%5Clambda%7D%7C%7C%5Chat%7Bf%7D-f%7C%7C%5E%7B2%7D_%7B2%7D"> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsubject%20to:%7D%5Cquad%20%5Chat%7Bf%7D_%7Bi%7D%20=%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D,%5Cquad%20i=1,%5Cldots,m"></p>
</section>
<section id="proximal-version" class="level3">
<h3 class="anchored" data-anchor-id="proximal-version">Proximal Version</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20l%7D(f_%7B%5Ctext%7Bdes%7D%7D)%20=%20argmin_%7Bx%7D%20%5Cleft(%20l(x,%20f_%7Bdes%7D)%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7Cx-f_%7B%5Ctext%7Bdes%7D%7D%7C%7C%5E%7B2%7D_%7B2%7D%20%5Cright)"></p>
<p>So we have to set <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D%20=%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D">for each <img src="https://latex.codecogs.com/png.latex?i"> in order to avoid the loss of <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> which we incur for any other choice.</p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20l%7D(f_%7B%5Ctext%7Bdes%7D%7D)_%7Bi%7D%20=%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D"> is the <img src="https://latex.codecogs.com/png.latex?i">-th component of the minimizer <img src="https://latex.codecogs.com/png.latex?x">.</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of "marginals" we want to match.</span></span>
<span id="cb2-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expected values of these functions under the induced distribution.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There is one for each marginal that we want to match.</span></span>
<span id="cb2-6">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(m) </span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The desired or target values we want to match by applying weights</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  to f.</span></span>
<span id="cb2-10">fdes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(m)</span>
<span id="cb2-11"></span>
<span id="cb2-12">lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>The following demonstrates that the <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D"> obtained via Convex optimization is the same as the minimizer <img src="https://latex.codecogs.com/png.latex?x"> obtained using the Proximal route.</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cp.Variable(m)</span>
<span id="cb3-2">cp.Problem(cp.Minimize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f)),</span>
<span id="cb3-3">            [fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> fdes]).solve()</span>
<span id="cb3-4"></span>
<span id="cb3-5">equality <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rsw.EqualityLoss(fdes)   </span>
<span id="cb3-6">np.testing.assert_allclose(fhat.value, equality.prox(f, lam))</span></code></pre></div>
</div>
</section>
</section>
<section id="inequality-loss" class="level2">
<h2 class="anchored" data-anchor-id="inequality-loss">Inequality Loss</h2>
<p>Constrain <img src="https://latex.codecogs.com/png.latex?x"> to a range around <img src="https://latex.codecogs.com/png.latex?f_%7B%5Ctext%7Bdes%7D%7D"> so let <img src="https://latex.codecogs.com/png.latex?l(x,%20f_%7Bdes%7D)%20=%200"> for <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5Bf_%7Bdes%7D+%5Ctext%7Blower%7D,%20f_%7Bdes%7D+%5Ctext%7Bupper%7D%5D"> and <img src="https://latex.codecogs.com/png.latex?+%5Cinfty"> otherwise. Here the lower and upper refer to some acceptable range around each entry in <img src="https://latex.codecogs.com/png.latex?f_%7Bdes%7D."></p>
<section id="convex-optimization-version-1" class="level3">
<h3 class="anchored" data-anchor-id="convex-optimization-version-1">Convex Optimization Version</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin%20%5Cfrac%7B1%7D%7B%5Clambda%7D%7C%7C%5Chat%7Bf%7D-f%7C%7C%5E%7B2%7D_%7B2%7D"> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsubject%20to:%7D%5Cquad%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Blower%7D%5E%7Bi%7D%20%5Cleq%20%5Chat%7Bf%7D_%7Bi%7D%20%5Cleq%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D,%5Cquad%20i=1,%5Cldots,m"></p>
<p>So ideally we want to set each <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> to <img src="https://latex.codecogs.com/png.latex?f_%7Bi%7D"> to minimize the objective function. But what if <img src="https://latex.codecogs.com/png.latex?f_%7Bi%7D%20%3E%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D">? In this case, accepting such an <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> leads to infeasibility and to avoid this we will clip <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> to <img src="https://latex.codecogs.com/png.latex?f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D">. We cannot clip any lower because then we would be incurring additional loss (over and above that resulting from setting to <img src="https://latex.codecogs.com/png.latex?f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D">) in the objective function unnecessarily.</p>
<p>Similary, we clip <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> to <img src="https://latex.codecogs.com/png.latex?f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Blower%7D%5E%7Bi%7D"> if we find that <img src="https://latex.codecogs.com/png.latex?f_%7Bi%7D%20%3C%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Blower%7D%5E%7Bi%7D">.</p>
</section>
<section id="proximal-version-1" class="level3">
<h3 class="anchored" data-anchor-id="proximal-version-1">Proximal Version</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20l%7D(f_%7B%5Ctext%7Bdes%7D%7D)%20=%20argmin_%7Bx%7D%20%5Cleft(%20l(x,%20f_%7Bdes%7D)%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7Cx-f_%7B%5Ctext%7Bdes%7D%7D%7C%7C%5E%7B2%7D_%7B2%7D%20%5Cright)"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20l%7D(f_%7B%5Ctext%7Bdes%7D%7D)_%7Bi%7D%20=%20%5Cbegin%7Bcases%7D%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Blower%7D%5E%7Bi%7D,%20%5Ctext%7Bif%20%7D%20f_%7Bi%7D%20%5Cleq%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Blower%7D%5E%7Bi%7D%5C%5C%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D,%20%5Ctext%7Bif%20%7D%20f_%7Bi%7D%20%5Cgeq%20f%5E%7Bi%7D_%7B%5Ctext%7Bdes%7D%7D%20+%20%5Ctext%7Bupper%7D%5E%7Bi%7D%5C%5C%20f_%7Bi%7D,%20%5Ctext%7B%20otherwise%7D%5Cend%7Bcases%7D"></p>
<p>So we see that the Proximal version when passed the input (vector) <img src="https://latex.codecogs.com/png.latex?f"> and the Convex optimization version will both end up with the same minimizer.</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">lower <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>])</span>
<span id="cb4-2">upper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>])</span>
<span id="cb4-3"></span>
<span id="cb4-4">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cp.Variable(m)</span>
<span id="cb4-5">cp.Problem(cp.Minimize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f)),</span>
<span id="cb4-6">            [lower <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> fdes, fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> fdes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper]).solve()</span>
<span id="cb4-7"></span>
<span id="cb4-8">inequality <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rsw.InequalityLoss(fdes, lower, upper)           </span>
<span id="cb4-9">np.testing.assert_allclose(fhat.value, inequality.prox(f, lam))</span></code></pre></div>
</div>
</section>
</section>
<section id="boolean-loss" class="level2">
<h2 class="anchored" data-anchor-id="boolean-loss">Boolean Loss</h2>
<p><img src="https://latex.codecogs.com/png.latex?l(x)%20=%20%5Cbegin%7Bcases%7D0%20%5Cquad%20x%20%5Cin%20%5C%7B0,%201/k%5C%7D%5E%7Bn%7D%20%5C%5C%20%5Cinfty%20%5Cquad%20%5Ctext%7BOtherwise%7D%5Cend%7Bcases%7D"></p>
<p>We want <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D%20=%201/k"> for <img src="https://latex.codecogs.com/png.latex?k%20%3C%20n"> samples (and <img src="https://latex.codecogs.com/png.latex?0"> for the others). Choosing any other value results an infinite loss (think infeasibility).</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20l%7D(f_%7B%5Ctext%7Bdes%7D%7D)%20=%20argmin_%7Bx%7D(%20l(x)%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7Cx%20-%20f_%7Bdes%7D%7C%7C%5E%7B2%7D_%7B2%7D%20)"></p>
<p>The proximal operator of <img src="https://latex.codecogs.com/png.latex?l"> is the projection of <img src="https://latex.codecogs.com/png.latex?f_%7Bdes%7D"> onto the (nonconvex) set <img src="https://latex.codecogs.com/png.latex?%5C%7Bx%20%5Cin%20%5C%7B0,%201/k%5C%7D%5E%7Bn%7D%20%7C%20%5Cmathbf%7B1%7D%5E%7BT%7Dx=1%5C%7D">. If each component of <img src="https://latex.codecogs.com/png.latex?x"> is either <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?1/k"> then the constraint <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B1%7D%5E%7BT%7Dx=1"> means that exactly <img src="https://latex.codecogs.com/png.latex?k"> of them are set to <img src="https://latex.codecogs.com/png.latex?1/k"> and the remaining are set to <img src="https://latex.codecogs.com/png.latex?0"> (as was desired).</p>
<p>The solution here is to set the largest <img src="https://latex.codecogs.com/png.latex?k"> entries of <img src="https://latex.codecogs.com/png.latex?f_%7Bdes%7D"> to <img src="https://latex.codecogs.com/png.latex?1/k"> and the remaining to <img src="https://latex.codecogs.com/png.latex?0">.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">boolean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rsw.BooleanRegularizer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-2">np.testing.assert_allclose(np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), boolean.prox(np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]), lam))</span></code></pre></div>
</div>
</section>
<section id="weighted-least-squares-loss" class="level2">
<h2 class="anchored" data-anchor-id="weighted-least-squares-loss">(Weighted) Least Squares Loss</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bi=1%7D%5E%7Bm%7Dd%5E%7B2%7D_%7Bi%7D(%5Chat%7Bf%7D_%7Bi%7D%20-%20f%5E%7Bi%7D_%7Bdes%7D)%5E2%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7C%5Chat%7Bf%7D%20-%20f_%7Bdes%7D%7C%7C%5E%7B2%7D_%7B2%7D"></p>
<p>Taking the derivative with respect to <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> and setting equal to zero we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?d%5E%7B2%7D_%7Bi%7D(%5Chat%7Bf%7D_%7Bi%7D%20-%20f%5E%7Bi%7D_%7Bdes%7D)%20+%20%5Cfrac%7B1%7D%7B%5Clambda%7D(%5Chat%7Bf%7D_%7Bi%7D%20-%20f%5E%7Bi%7D_%7Bdes%7D)%20=%200"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D(%20d%5E%7B2%7D_%7Bi%7D%20+%20%5Cfrac%7B1%7D%7B%5Clambda%7D%20)%20=%20%5Cfrac%7Bf%5E%7Bi%7D_%7Bdes%7D%7D%7B%5Clambda%7D%20+%20d%5E%7B2%7D_%7Bi%7Df%5E%7Bi%7D_%7Bdes%7D"></p>
<p>Finally we get that <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D%20=%20%5Cfrac%7B%20d%5E%7B2%7D_%7Bi%7Df%5E%7Bi%7D_%7Bdes%7D%20+%20%5Cfrac%7Bf%5E%7Bi%7D_%7Bdes%7D%7D%7B%5Clambda%7D%20%7D%7B%20(%20d%5E%7B2%7D_%7Bi%7D%20+%20%5Cfrac%7B1%7D%7B%5Clambda%7D%20)%20%7D"></p>
<p>The <img src="https://latex.codecogs.com/png.latex?d">’s are called the diagonals in the code and are used to weight each sample (row) in the data. Imagine a matrix with zeros everywhere but for the diagonal entries.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m)</span>
<span id="cb6-2"></span>
<span id="cb6-3">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cp.Variable(m)</span>
<span id="cb6-4">cp.Problem(cp.Minimize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(cp.multiply(d, fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> fdes)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-5">                        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lam) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f))).solve()</span>
<span id="cb6-6"></span>
<span id="cb6-7">lstsq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rsw.LeastSquaresLoss(fdes, d)                        </span>
<span id="cb6-8">np.testing.assert_allclose(fhat.value, lstsq.prox(f, lam))</span></code></pre></div>
</div>
</section>
<section id="entropy-loss" class="level2">
<h2 class="anchored" data-anchor-id="entropy-loss">Entropy Loss</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin%20%5Csum_%7Bi=1%7D%5E%7Bm%7D%5Chat%7Bf%7D_%7Bi%7D%5Cln%5Chat%7Bf%7D_%7Bi%7D%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7C%5Chat%7Bf%7D%20-%20f%7C%7C%5E%7B2%7D_%7B2%7D"></p>
<p>Taking the derivative with respect to <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> and setting equal to zero we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?1%20+%20%5Cln%5Chat%7Bf%7D_%7Bi%7D%20+%20%5Cfrac%7B1%7D%7B%5Clambda%7D(%5Chat%7Bf%7D_%7Bi%7D%20-%20f_%7Bi%7D)%20=%200"></p>
<p>Rearranging terms: <img src="https://latex.codecogs.com/png.latex?%20%5Cln%5Chat%7Bf%7D_%7Bi%7D%20+%20%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7D%20=%20%5Cfrac%7Bf_%7Bi%7D%7D%7B%5Clambda%7D%20-%201%20"></p>
<p>Exponentiating both sides and then dividing both sides by <img src="https://latex.codecogs.com/png.latex?%5Clambda">: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7D%7D%20=%20%5Cfrac%7B1%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B%5Clambda%7D%20-%201%20%7D"></p>
<p>Applying the Lambert W function on both sides: <img src="https://latex.codecogs.com/png.latex?W(%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7D%7D)%20=%20W(%5Cfrac%7B1%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B%5Clambda%7D%20-%201%20%7D)"></p>
<p>Finally, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D%20=%20%5Clambda%20W(%5Cfrac%7B1%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B%5Clambda%7D%20-%201%20%7D)">.</p>
<p>Just for fun, suppose that each instance of <img src="https://latex.codecogs.com/png.latex?%5Clambda"> and <img src="https://latex.codecogs.com/png.latex?f_%7Bi%7D"> in the above result were replaced by <img src="https://latex.codecogs.com/png.latex?0.5%5Clambda"> and <img src="https://latex.codecogs.com/png.latex?f_%7Bi%7D%20+%200.5%5Clambda%20%5Cln%20f%5E%7Bi%7D_%7Bdes%7D"> respectively then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D%20=%200.5%5Clambda%20W(%5Cfrac%7B1%7D%7B0.5%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%20+%200.5%5Clambda%20%5Cln%20f%5E%7Bi%7D_%7Bdes%7D%7D%7B0.5%5Clambda%7D%20-%201%20%7D)%20=%200.5%5Clambda%20W(%5Cfrac%7Bf%5E%7Bi%7D_%7Bdes%7D%7D%7B0.5%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B0.5%5Clambda%7D%20-%201%20%7D)"></p>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m)</span>
<span id="cb7-2">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> f.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-3"></span>
<span id="cb7-4">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cp.Variable(m)</span>
<span id="cb7-5">cp.Problem(cp.Minimize(cp.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cp.entr(fhat)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-6">                        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lam) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f))).solve()</span>
<span id="cb7-7">np.testing.assert_allclose(</span>
<span id="cb7-8">    fhat.value, rsw.losses._entropy_prox(f, lam), atol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span></code></pre></div>
</div>
<section id="entropy-regularizer" class="level3">
<h3 class="anchored" data-anchor-id="entropy-regularizer">Entropy Regularizer</h3>
<p>Minimize <img src="https://latex.codecogs.com/png.latex?r(w)"> where</p>
<p><img src="https://latex.codecogs.com/png.latex?r(w)%20=%20%5Cbegin%7Bcases%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20w_%7Bi%7D%5Cln%20w_%7Bi%7D,%20%5Cquad%20(1/(%5Ckappa%20n))%5Cmathbf%7B1%7D%20%5Cleq%20w%20%5Cleq%20(%5Ckappa/n%20)%5Cmathbf%7B1%7D%20%5C%5C%20%5Cinfty%20%5Cquad%20%5Ctext%7BOtherwise%7D%5Cend%7Bcases%7D"></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?%5Ckappa%20%3E%201"> is a hyper-parameter (also called <em>limit</em> in the code). Observe that there is a constraint on <img src="https://latex.codecogs.com/png.latex?w"> that says they must lie within <img src="https://latex.codecogs.com/png.latex?%5B1/(%5Ckappa%20n),%20%5Ckappa/n%5D"> otherwise the loss is infinite (i.e., we have an infeasible solution). If we interpret <img src="https://latex.codecogs.com/png.latex?w_i"> as a weight then the constraint says that no item can be down-weighted by less than <img src="https://latex.codecogs.com/png.latex?1/%5Ckappa"> or up-weighted by more than <img src="https://latex.codecogs.com/png.latex?%5Ckappa">.</p>
<p>The final solution is <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bprox%7D_%7B%5Clambda%20r%7D(w_%7B%5Ctext%7Bdes%7D%7D)_%7Bi%7D%20=%20%5Cbegin%7Bcases%7D%201/(%5Ckappa%20n),%20%5Ctext%7Bif%20%7D%20%5Chat%7Bw%7D_%7Bi%7D%20%5Cleq%201/(%5Ckappa%20n)%5C%5C%20%5Ckappa/n,%20%5Ctext%7Bif%20%7D%20%5Chat%7Bw%7D_%7Bi%7D%20%5Cgeq%20%5Ckappa/n%5C%5C%20%5Chat%7Bw%7D_%7Bi%7D,%20%5Ctext%7B%20otherwise%7D%5Cend%7Bcases%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bw%7D%20=%20%5Clambda%20W(%5Cfrac%7B1%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bw%5E%7Bdes%7D_%7Bi%7D%7D%7B%5Clambda%7D%20-%201%20%7D)"> from the Entropy Loss section (<img src="https://latex.codecogs.com/png.latex?w%5E%7Bdes%7D"> is some desired weight vector, provided as input, which we want <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bw%7D"> to be close to).</p>
</section>
</section>
<section id="kl-loss" class="level2">
<h2 class="anchored" data-anchor-id="kl-loss">KL Loss</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmin%20%5Cfrac%7B1%7D%7B2%7D%5Cleft%5B%20%5Csum_%7Bi=1%7D%5E%7Bm%7D%5Chat%7Bf%7D_%7Bi%7D%5Cln%5Chat%7Bf%7D_%7Bi%7D%20-%20%5Csum_%7Bi=1%7D%5E%7Bm%7D%5Chat%7Bf%7D_%7Bi%7D%5Cln%20f%5E%7Bi%7D_%7Bdes%7D%20%20%5Cright%5D%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D%7C%7C%5Chat%7Bf%7D%20-%20f%7C%7C%5E%7B2%7D_%7B2%7D"></p>
<p>Taking the derivative with respect to <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D"> and setting equal to zero we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D%5Cleft%5B%201%20+%20%5Cln%5Chat%7Bf%7D_%7Bi%7D%20-%20%5Cln%20f%5E%7Bi%7D_%7Bdes%7D%20%5Cright%5D%20+%20%5Cfrac%7B1%7D%7B%5Clambda%7D(%5Chat%7Bf%7D_%7Bi%7D%20-%20f_%7Bi%7D)%20=%200"></p>
<p>Multiplying both sides by <img src="https://latex.codecogs.com/png.latex?2"> and then rearrange terms to obtain: <img src="https://latex.codecogs.com/png.latex?%5Cln%5Chat%7Bf%7D_%7Bi%7D%20+%20%5Cfrac%7B2%5Chat%7Bf%7D_%7Bi%7D%7D%7B%5Clambda%7D%20=%20%5Cfrac%7B2f_%7Bi%7D%7D%7B%5Clambda%7D%20-1%20+%20%5Cln%20f%5E%7Bi%7D_%7Bdes%7D"></p>
<p>Next, exponentiate both sides to get: <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7De%5E%7B%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B0.5%5Clambda%7D%7D%20=%20f%5E%7Bi%7D_%7Bdes%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B0.5%5Clambda%7D%20-1%7D"></p>
<p>Divide both sides by <img src="https://latex.codecogs.com/png.latex?0.5%5Clambda"> and then apply the Lambert W function to get:</p>
<p><img src="https://latex.codecogs.com/png.latex?W(%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B0.5%5Clambda%7De%5E%7B%5Cfrac%7B%5Chat%7Bf%7D_%7Bi%7D%7D%7B0.5%5Clambda%7D%7D)%20=%20W(%5Cfrac%7Bf%5E%7Bi%7D_%7Bdes%7D%7D%7B0.5%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B0.5%5Clambda%7D%20-1%7D)"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bi%7D%20=%200.5%5Clambda%20W(%5Cfrac%7Bf%5E%7Bi%7D_%7Bdes%7D%7D%7B0.5%5Clambda%7De%5E%7B%5Cfrac%7Bf_%7Bi%7D%7D%7B0.5%5Clambda%7D%20-1%7D)."></p>
<p>Hopefully, this reminds you of the last expression in the Entropy Loss section.</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m)</span>
<span id="cb8-2">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> f.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-3"></span>
<span id="cb8-4">fdes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>m)</span>
<span id="cb8-5">fdes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> fdes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-6"></span>
<span id="cb8-7">kl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rsw.KLLoss(fdes, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb8-8">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cp.Variable(m, nonneg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-9">cp.Problem(cp.Minimize(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (cp.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cp.entr(fhat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cp.multiply(fhat, np.log(fdes)))) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-10">                        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lam) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cp.sum_squares(fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> f))).solve()</span>
<span id="cb8-11">np.testing.assert_allclose(fhat.value, kl.prox(f, lam), atol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span></code></pre></div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-barratt2021optimal" class="csl-entry">
Barratt, Shane, Guillermo Angeris, and Stephen Boyd. 2021. <span>“Optimal Representative Sample Weighting.”</span> <em>Statistics and Computing</em> 31 (2): 1–14.
</div>
</div></section></div> ]]></description>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-05-26-losses.html</guid>
  <pubDate>Thu, 26 May 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Lambert W</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-05-24-lambert-w.html</link>
  <description><![CDATA[ 





<p>From <span class="citation" data-cites="youtube:Lambert_W_Function_Intro">[1]</span>:</p>
<p>The Lambert W Function is denoted <img src="https://latex.codecogs.com/png.latex?W(x)"> and is the inverse of the function <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20xe%5E%7Bx%7D">.</p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?W(x)%20=%20f%5E%7B-1%7D(x)">.</p>
<p>For <img src="https://latex.codecogs.com/png.latex?f(x)"> we have that:</p>
<ul>
<li>The derivative <img src="https://latex.codecogs.com/png.latex?f'(x)%20=%20e%5E%7Bx%7D(x+1)"></li>
<li><img src="https://latex.codecogs.com/png.latex?f''(x)%20=%202e%5E%7Bx%7D%20%20+%20xe%5E%7Bx%7D"> and <img src="https://latex.codecogs.com/png.latex?f''(-1)%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?f(x)"> is minimized at <img src="https://latex.codecogs.com/png.latex?x%20=%20-1"></li>
<li>Domain of <img src="https://latex.codecogs.com/png.latex?f(x)"> is <img src="https://latex.codecogs.com/png.latex?%5B-1,%5Cinfty)"></li>
<li>Range of <img src="https://latex.codecogs.com/png.latex?f(x)"> is <img src="https://latex.codecogs.com/png.latex?%5B-%5Cfrac%7B1%7D%7Be%7D,%5Cinfty)"></li>
</ul>
<p>The last two bullet points mean that the domain and range of <img src="https://latex.codecogs.com/png.latex?W(x)"> are <img src="https://latex.codecogs.com/png.latex?%5B-%5Cfrac%7B1%7D%7Be%7D,%5Cinfty)"> and <img src="https://latex.codecogs.com/png.latex?%5B-1,%5Cinfty)"> respectively.</p>
<p>For <img src="https://latex.codecogs.com/png.latex?W(x)"> we also have that:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?W(f(x))%20=%20W(xe%5E%7Bx%7D)%20=%20x"></li>
<li><img src="https://latex.codecogs.com/png.latex?f(W(x))%20=%20W(x)e%5E%7BW(x)%7D%20=%20x">. In other words, <img src="https://latex.codecogs.com/png.latex?e%5E%7BW(x)%7D%20=%20%5Cfrac%7Bx%7D%7BW(x)%7D"></li>
</ol>
<section id="solve-xx-2" class="level2">
<h2 class="anchored" data-anchor-id="solve-xx-2">Solve <img src="https://latex.codecogs.com/png.latex?x%5E%7Bx%7D%20=%202"></h2>
<p>Take the log of both sides to get <img src="https://latex.codecogs.com/png.latex?x%5Cln(x)%20=%20%5Cln(2)"> or that <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cln(x)%7D%5Cln(x)%20=%20%5Cln(2)">. Rearranging we get <img src="https://latex.codecogs.com/png.latex?%5Cln(x)e%5E%7B%5Cln(x)%7D%20=%20%5Cln(2)">.</p>
<p>Applying the Lambert W function on both sides produces <img src="https://latex.codecogs.com/png.latex?W(%5Cln(x)e%5E%7B%5Cln(x)%7D)%20=%20W(%5Cln(2))"> or that <img src="https://latex.codecogs.com/png.latex?%5Cln(x)%20=%20W(%5Cln(2))">.</p>
<p>Finally, we get that <img src="https://latex.codecogs.com/png.latex?x%20=%20e%5E%7BW(%5Cln(2))%7D">.</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lambertw</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp( lambertw( np.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) ) )</span>
<span id="cb2-2">x, np.allclose( np.power(x,x) , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((1.5596104694623694+0j), True)</code></pre>
</div>
</div>
<p>Thus, the solution of <img src="https://latex.codecogs.com/png.latex?x%5E%7Bx%7D%20=%202"> is <img src="https://latex.codecogs.com/png.latex?x%20=%201.55961"></p>
</section>
<section id="solve-x2ex-2" class="level2">
<h2 class="anchored" data-anchor-id="solve-x2ex-2">Solve <img src="https://latex.codecogs.com/png.latex?x%5E%7B2%7De%5E%7Bx%7D%20=%202"></h2>
<p>Take the square root in both sides to get <img src="https://latex.codecogs.com/png.latex?xe%5E%7Bx/2%7D%20=%20%5Csqrt%202">. Divide both sides by <img src="https://latex.codecogs.com/png.latex?2"> to get <img src="https://latex.codecogs.com/png.latex?0.5xe%5E%7B0.5x%7D%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%202%7D">.</p>
<p>Applying the Lambert W function on both sides produces <img src="https://latex.codecogs.com/png.latex?W(0.5xe%5E%7B0.5x%7D)%20=%20W(%5Cfrac%7B1%7D%7B%5Csqrt%202%7D)"> or <img src="https://latex.codecogs.com/png.latex?0.5x%20=%20W(%5Cfrac%7B1%7D%7B%5Csqrt%202%7D)">.</p>
<p>Finally, we get <img src="https://latex.codecogs.com/png.latex?x%20=%202W(%5Cfrac%7B1%7D%7B%5Csqrt%202%7D)">.</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lambertw(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-2">x, np.allclose( x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.exp(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((0.9012010317296661+0j), True)</code></pre>
</div>
</div>
</section>
<section id="solve-x-ex-2" class="level2">
<h2 class="anchored" data-anchor-id="solve-x-ex-2">Solve <img src="https://latex.codecogs.com/png.latex?x%20+%20e%5E%7Bx%7D%20=%202"></h2>
<p>Exponentiating both sides we get <img src="https://latex.codecogs.com/png.latex?e%5E%7Bx%7De%5E%7Be%5E%7Bx%7D%7D%20=%20e%5E%7B2%7D">. Applying the Lambert W function on both sides produces <img src="https://latex.codecogs.com/png.latex?W(%20e%5E%7Bx%7De%5E%7Be%5E%7Bx%7D%7D%20)%20=%20W(e%5E%7B2%7D)"> or <img src="https://latex.codecogs.com/png.latex?e%5E%7Bx%7D%20=%20W(e%5E%7B2%7D)"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cln(W(e%5E%7B2%7D))"></p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log( lambertw( np.exp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) ) )</span>
<span id="cb6-2">x, np.allclose( x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(x) , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((0.4428544010023887+0j), True)</code></pre>
</div>
</div>
</section>
<section id="find-the-minimizer-of-x-lnfracxu-frac12lambdax-v2-suppose-lambda-0." class="level2">
<h2 class="anchored" data-anchor-id="find-the-minimizer-of-x-lnfracxu-frac12lambdax-v2-suppose-lambda-0.">Find the minimizer of <img src="https://latex.codecogs.com/png.latex?x%20%5Cln(%5Cfrac%7Bx%7D%7Bu%7D)%20+%20%5Cfrac%7B1%7D%7B2%5Clambda%7D(x-v)%5E%7B2%7D"> (suppose <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%3E0">).</h2>
<p>This is a sum of convex functions so it is convex and a minimizer exists.</p>
<p>Taking the derivative and setting equal to zero we get: <img src="https://latex.codecogs.com/png.latex?1%20+%20%5Cln%20x%20-%20%5Cln%20u%20+%20%5Cfrac%7Bx%7D%7B%5Clambda%7D%20-%20%5Cfrac%7Bv%7D%7B%5Clambda%7D%20=%200"></p>
<p>Hence, <img src="https://latex.codecogs.com/png.latex?%5Cln%20x%20+%20%5Cfrac%7Bx%7D%7B%5Clambda%7D%20=%20%5Cln%20u%20%20+%20%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201">.</p>
<p>Exponentiating both sides we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cln%20x%20+%20%5Cfrac%7Bx%7D%7B%5Clambda%7D%7D%20=%20e%5E%7B%5Cln%20u%20%20+%20%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D"> or <img src="https://latex.codecogs.com/png.latex?xe%5E%7B%5Cfrac%7Bx%7D%7B%5Clambda%7D%7D%20=%20ue%5E%7B%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D">.</p>
<p>Dividing both sides by <img src="https://latex.codecogs.com/png.latex?%5Clambda"> we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bx%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bx%7D%7B%5Clambda%7D%7D%20=%20%5Cfrac%7Bu%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D">.</p>
<p>Applying the Lambert W function on both sides gives: <img src="https://latex.codecogs.com/png.latex?%20W(%5Cfrac%7Bx%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bx%7D%7B%5Clambda%7D%7D)%20=%20W(%5Cfrac%7Bu%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D)"> or</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bx%7D%7B%5Clambda%7D%20=%20W(%5Cfrac%7Bu%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D)">.</p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Clambda%20W(%5Cfrac%7Bu%7D%7B%5Clambda%7De%5E%7B%5Cfrac%7Bv%7D%7B%5Clambda%7D%20-%201%7D)"></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-youtube:Lambert_W_Function_Intro" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">blackpenredpen, <span>“&lt;A href="https://www.youtube.com/watch?v=sWgNCra93D8"&gt;"lambert w function intro and x^x=2"&lt;/a&gt;.”</span> <a href="https://www.youtube.com/watch?v=sWgNCra93D8" class="uri">https://www.youtube.com/watch?v=sWgNCra93D8</a>, 2018.</div>
</div>
</div></section></div> ]]></description>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-05-24-lambert-w.html</guid>
  <pubDate>Tue, 24 May 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>McElreath Chapter 4</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-04-10-mcelreath-chapter-4.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pylab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> patsy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dmatrix</span>
<span id="cb1-10"></span>
<span id="cb1-11">az.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arviz-darkgrid"</span>)</span>
<span id="cb1-12">az.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats.hdi_prob"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89</span></span></code></pre></div>
</details>
</div>
<section id="m1" class="level2">
<h2 class="anchored" data-anchor-id="m1">4M1</h2>
<p>For the model definition below, simulate observed <img src="https://latex.codecogs.com/png.latex?y"> values from the prior (not the posterior).</p>
<p><img src="https://latex.codecogs.com/png.latex?y%20%5Csim%20%5Ctext%7BNormal%7D(%5Cmu,%20%5Csigma)%20"> <img src="https://latex.codecogs.com/png.latex?%5Cmu%20%5Csim%20%5Ctext%7BNormal%7D(0,%2010)%20"> <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Csim%20%5Ctext%7BExponential%7D(1)%20"></p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb2-2">sample_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb2-3">sample_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.expon.rvs( scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb2-4">sample_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_mu, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_std, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span></code></pre></div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">az.plot_kde(sample_y)</span>
<span id="cb3-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Prior Predictive values'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'Distribution of Prior Predictive values')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-4-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">plt.hist(sample_y)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(array([ 10.,  35., 116., 202., 232., 218., 118.,  47.,  17.,   5.]),
 array([-30.14262363, -23.65619686, -17.1697701 , -10.68334333,
         -4.19691657,   2.2895102 ,   8.77593697,  15.26236373,
         21.7487905 ,  28.23521727,  34.72164403]),
 &lt;a list of 10 Patch objects&gt;)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="m4" class="level2">
<h2 class="anchored" data-anchor-id="m4">4M4</h2>
<p>A sample of students is measured for height each year for 3 years. After the third year, you want to fit a linear regression predicting height using year as a predictor. Write down the mathematical model definition for this regression, using any variable names and priors you choose. Be prepared to defend your choice of priors.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?h_%7Bij%7D"> be the height of the <img src="https://latex.codecogs.com/png.latex?i">-th student in year <img src="https://latex.codecogs.com/png.latex?j"> (where <img src="https://latex.codecogs.com/png.latex?j%20%5Cin%20%5C%7B1,2,3%5C%7D">).</p>
<p><img src="https://latex.codecogs.com/png.latex?h_%7Bij%7D%20%5Csim%20N(%5Cmu_%7Bij%7D,%5Csigma)"> <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bij%7D%20=%20%5Calpha%20+%20%5Cbeta(x_%7Bij%7D-%5Cbar%7Bx%7D)"> <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Csim%20N(100,10)"> <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Csim%20%5Ctext%7BNormal%7D(0,10)"> <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Csim%20%5Ctext%7BExponential%7D(1)"></p>
<ul>
<li>Let <img src="https://latex.codecogs.com/png.latex?x_%7Bij%7D"> be the year corresponding to student <img src="https://latex.codecogs.com/png.latex?i"> for year <img src="https://latex.codecogs.com/png.latex?j"> in the dataset.
<ul>
<li>In particular, <img src="https://latex.codecogs.com/png.latex?x_%7Bi1%7D=1,%20x_%7Bi2%7D=2"> and <img src="https://latex.codecogs.com/png.latex?x_%7Bi3%7D=3">.</li>
</ul></li>
<li>Let <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D"> be the average year in the dataset.
<ul>
<li>As each student was measured for height each year, <img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D%20=%20%5Cfrac%7B1+2+3%7D%7B3%7D=2">.</li>
</ul></li>
<li>The mean height of the students is taking to be 100 cm.</li>
<li>The Exponential is used as the prior distribution for <img src="https://latex.codecogs.com/png.latex?%5Csigma"> (the standard deviation) to constrain it to be positive.</li>
</ul>
<p>Next, let’s simulate a dataset consisting of 40 children:</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb7-2">sample_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb7-3">sample_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb7-4">sample_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.expon.rvs( scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb7-5"></span>
<span id="cb7-6">years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb7-7">xbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean( years )</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample_y = stats.norm.rvs( loc=sample_mu, scale=sample_std, size=n_samples )</span></span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each row is a student, column 1 is for year-1, column 2 is for year-2 and</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column 3 is for year-3</span></span>
<span id="cb8-3">sample_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( sample_alpha.reshape(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-4">             sample_beta.reshape(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) )</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each row is a student, column 1 is for year-1, column 2 is for year-2 and</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column 3 is for year-3</span></span>
<span id="cb9-3">sample_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb9-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> years:</span>
<span id="cb9-6">    mu_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_alpha[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sample_beta[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar)</span>
<span id="cb9-7">    sample_height[i, j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( mu_ij , sample_std[i] )</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb10-2">  plt.plot( years , sample_height[i] , color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> )</span>
<span id="cb10-3">plt.xticks( years )</span>
<span id="cb10-4">plt.xlabel( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span> )</span>
<span id="cb10-5">plt.ylabel( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height (cm)'</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0, 0.5, 'height (cm)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Each line tracks the simulated height of each student across the 3 years. Clearly there are some nonsensical relationships here where the height for some students actually goes down across the years.</p>
</section>
<section id="m5" class="level2">
<h2 class="anchored" data-anchor-id="m5">4M5</h2>
<p>Now suppose I remind you that every student got taller each year. Does this information lead you to change your choice of priors? How?</p>
<p>Yes, we can impose a Log-Normal prior on the slope so that it is constrained to be positive. Per <span class="citation" data-cites="wiki:Log-normal_distribution">[1]</span>, if <img src="https://latex.codecogs.com/png.latex?Z%20%5Csim%20%5Ctext%7BNormal%7D(0,1)"> and if <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%3E%200"> are two real numbers then <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%20e%5E%7B%5Cmu%20+%20%5Csigma%20Z%7D"> is log-normally distributed with parameters <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">. Also <img src="https://latex.codecogs.com/png.latex?E%5B%5Cbeta%5D%20=%20e%5E%7B%5Cmu%20+%20%5Cfrac%7B1%7D%7B2%7D%5Csigma%5E%7B2%7D%7D">. * So if <img src="https://latex.codecogs.com/png.latex?%5Cmu=1"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma=0.1"> then <img src="https://latex.codecogs.com/png.latex?E%5B%5Cbeta%5D%20%5Capprox%202.73%20%5Ctext%7Bcm/year%7D"></p>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb12-2">sample_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb12-3">sample_beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.lognormal( mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)</span>
<span id="cb12-4">sample_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.expon.rvs( scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples )</span>
<span id="cb12-5"></span>
<span id="cb12-6">years <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb12-7">xbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean( years )</span>
<span id="cb12-8"></span>
<span id="cb12-9">sample_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb12-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb12-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> years:</span>
<span id="cb12-12">    mu_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample_alpha[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sample_beta[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar)</span>
<span id="cb12-13">    sample_height[i, j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm.rvs( mu_ij , sample_std[i] )</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb13-2">  plt.plot( years , sample_height[i] , color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> )</span>
<span id="cb13-3">plt.xticks( years )</span>
<span id="cb13-4">plt.xlabel( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span> )</span>
<span id="cb13-5">plt.ylabel( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height (cm)'</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0, 0.5, 'height (cm)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-14-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This looks much better with height increasing across the years. However there are still some weird observations where the height zig-zags.</p>
</section>
<section id="m6" class="level2">
<h2 class="anchored" data-anchor-id="m6">4M6</h2>
<p>Now suppose I tell you that the variance among heights for students of the same age is never more than 64cm. How does this lead you to revise your priors?</p>
<p>This would lead me to set <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Csim%20%5Ctext%7BUniform%7D(0,%5Csqrt%7B64%7D)"></p>
</section>
<section id="m7" class="level2">
<h2 class="anchored" data-anchor-id="m7">4M7</h2>
<p>Refit model m4.3 from the chapter, but omit the mean weight xbar this time. Compare the new model’s posterior to that of the original model. In particular, look at the covariance among the parameters. What is different? Then compare the posterior predictions of both models.</p>
<div id="cell-24" class="cell">
<div class="cell-output cell-output-display">

  <div id="df-d738ee05-04e1-4022-83c3-45b2e677885a">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">height</th>
<th data-quarto-table-cell-role="th">weight</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">male</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>151.765</td>
<td>47.825606</td>
<td>63.0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>139.700</td>
<td>36.485807</td>
<td>63.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>136.525</td>
<td>31.864838</td>
<td>65.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>156.845</td>
<td>53.041914</td>
<td>41.0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>145.415</td>
<td>41.276872</td>
<td>51.0</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-d738ee05-04e1-4022-83c3-45b2e677885a')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-d738ee05-04e1-4022-83c3-45b2e677885a button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-d738ee05-04e1-4022-83c3-45b2e677885a');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">xbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2.weight.mean()</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> m4_3:</span>
<span id="cb15-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-5">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Lognormal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-6">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Uniform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb15-7">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (d2.weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar)</span>
<span id="cb15-8">    height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d2.height)</span>
<span id="cb15-9">    trace_4_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, return_inferencedata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> m4M7:</span>
<span id="cb15-12">  alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> )</span>
<span id="cb15-13">  beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Lognormal( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb15-14">  sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Uniform( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span> , lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, upper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> )</span>
<span id="cb15-15">  mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d2.weight</span>
<span id="cb15-16">  height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span> , mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d2.height )</span>
<span id="cb15-17">  trace_4M7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, return_inferencedata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Sequential sampling (2 chains in 1 job)
NUTS: [sigma, b, a]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="2000" class="" max="2000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [2000/2000 00:10&lt;00:00 Sampling chain 0, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="2000" class="" max="2000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [2000/2000 00:08&lt;00:00 Sampling chain 1, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 19 seconds.
Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Sequential sampling (2 chains in 1 job)
NUTS: [sigma, beta, alpha]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="2000" class="" max="2000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [2000/2000 00:13&lt;00:00 Sampling chain 0, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="2000" class="" max="2000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [2000/2000 00:13&lt;00:00 Sampling chain 1, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 27 seconds.
The acceptance probability does not match the target. It is 0.8897350788344733, but should be close to 0.8. Try to increase the number of tuning steps.</code></pre>
</div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">az.summary(trace_4M7, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Got error No model on context stack. trying to find log_likelihood in translation.
/usr/local/lib/python3.7/dist-packages/arviz/data/io_pymc3_3x.py:102: FutureWarning: Using `from_pymc3` without the model will be deprecated in a future release. Not using the model will return less accurate and less useful results. Make sure you use the model argument or call from_pymc3 within a model context.
  FutureWarning,</code></pre>
</div>
<div class="cell-output cell-output-display">

  <div id="df-0980208f-ea43-4756-83b2-d786abfc86ba">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_5.5%</th>
<th data-quarto-table-cell-role="th">hdi_94.5%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">alpha</td>
<td>114.491</td>
<td>1.858</td>
<td>111.612</td>
<td>117.473</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">beta</td>
<td>0.892</td>
<td>0.041</td>
<td>0.826</td>
<td>0.955</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>5.093</td>
<td>0.202</td>
<td>4.750</td>
<td>5.383</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-0980208f-ea43-4756-83b2-d786abfc86ba')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-0980208f-ea43-4756-83b2-d786abfc86ba button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-0980208f-ea43-4756-83b2-d786abfc86ba');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">az.summary(trace_4_3, kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Got error No model on context stack. trying to find log_likelihood in translation.
/usr/local/lib/python3.7/dist-packages/arviz/data/io_pymc3_3x.py:102: FutureWarning: Using `from_pymc3` without the model will be deprecated in a future release. Not using the model will return less accurate and less useful results. Make sure you use the model argument or call from_pymc3 within a model context.
  FutureWarning,</code></pre>
</div>
<div class="cell-output cell-output-display">

  <div id="df-dcbb3707-c159-491f-8833-a04ca8d93ce5">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_5.5%</th>
<th data-quarto-table-cell-role="th">hdi_94.5%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">a</td>
<td>154.604</td>
<td>0.281</td>
<td>154.128</td>
<td>155.004</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">b</td>
<td>0.903</td>
<td>0.043</td>
<td>0.839</td>
<td>0.975</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>5.104</td>
<td>0.202</td>
<td>4.774</td>
<td>5.416</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-dcbb3707-c159-491f-8833-a04ca8d93ce5')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-dcbb3707-c159-491f-8833-a04ca8d93ce5 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-dcbb3707-c159-491f-8833-a04ca8d93ce5');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Model 4_3 intercept (a) is larger than in M47 (alpha) but the slope is roughly the same.</p>
<section id="plot-the-posterior-inference-against-the-data" class="level3">
<h3 class="anchored" data-anchor-id="plot-the-posterior-inference-against-the-data">Plot the posterior inference against the data</h3>
<section id="superimpose-the-posterior-mean-values-over-the-height-and-weight-data" class="level4">
<h4 class="anchored" data-anchor-id="superimpose-the-posterior-mean-values-over-the-height-and-weight-data">Superimpose the posterior mean values over the height and weight data</h4>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">plt.scatter(d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>], d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>])</span>
<span id="cb23-2">plt.plot(d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>], ( trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>].mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb23-3">                        trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>].mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>] ),</span>
<span id="cb23-4">         color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span> )</span>
<span id="cb23-5">plt.xlabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb23-6">plt.ylabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0, 0.5, 'height')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-the-uncertainty-around-the-mean" class="level4">
<h4 class="anchored" data-anchor-id="add-the-uncertainty-around-the-mean">Add the uncertainty around the mean</h4>
<p>First add the uncertainty around the average height.</p>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">trace_iq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_4M7 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#trace in question</span></span>
<span id="cb25-2">posterior_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trace_iq), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb25-3">weight_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71</span>)</span></code></pre></div>
</div>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">cred_intervals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb26-2">    [ az.hdi( trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>][posterior_samples] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb26-3">             trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>][posterior_samples]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>wt ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> wt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weight_seq ]</span>
<span id="cb26-4">)</span></code></pre></div>
</div>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">cred_intervals.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(71, 2)</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">plt.scatter(d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>], d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>])</span>
<span id="cb29-2">plt.plot(weight_seq, ( trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>].mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb29-3">                        trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>].mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weight_seq ),</span>
<span id="cb29-4">         color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span> )</span>
<span id="cb29-5">plt.fill_between(</span>
<span id="cb29-6">    weight_seq, cred_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cred_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, </span>
<span id="cb29-7">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Uncertainty in $\mu$"</span>,</span>
<span id="cb29-8">)</span>
<span id="cb29-9">plt.xlabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-10">plt.ylabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb29-11">plt.axvline(np.mean(d2.weight), ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean weight"</span>)</span>
<span id="cb29-12">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="add-the-prediction-intervals" class="level3">
<h3 class="anchored" data-anchor-id="add-the-prediction-intervals">Add the prediction intervals</h3>
<p>Next add the uncertainty around the actual heights making use of the standard deviation.</p>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>][posterior_samples].shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(10000,)</code></pre>
</div>
</div>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a function to compute mu for all posterior samples at given value of </span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weight</span></span>
<span id="cb32-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_mu(w):</span>
<span id="cb32-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ( trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>][posterior_samples] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb32-5">            trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>][posterior_samples] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w )</span>
<span id="cb32-6"></span>
<span id="cb32-7">pi_67 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb32-8">    [</span>
<span id="cb32-9">        az.hdi(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compute_mu(x), </span>
<span id="cb32-10">                                scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>][posterior_samples]), </span>
<span id="cb32-11">                                hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>)</span>
<span id="cb32-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weight_seq</span>
<span id="cb32-13">    ]</span>
<span id="cb32-14">)</span>
<span id="cb32-15"></span>
<span id="cb32-16">pi_89 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb32-17">    [</span>
<span id="cb32-18">        az.hdi(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compute_mu(x), </span>
<span id="cb32-19">                                scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>][posterior_samples]))</span>
<span id="cb32-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weight_seq</span>
<span id="cb32-21">    ]</span>
<span id="cb32-22">)</span>
<span id="cb32-23"></span>
<span id="cb32-24">pi_97 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb32-25">    [</span>
<span id="cb32-26">        az.hdi(np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compute_mu(x), </span>
<span id="cb32-27">                                scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>][posterior_samples]), </span>
<span id="cb32-28">                                hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>)</span>
<span id="cb32-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weight_seq</span>
<span id="cb32-30">    ]</span>
<span id="cb32-31">)</span></code></pre></div>
</div>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">plt.scatter(d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>], d2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>])</span>
<span id="cb33-2">plt.plot(weight_seq, ( trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>].mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb33-3">                        trace_4M7[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>].mean()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weight_seq ),</span>
<span id="cb33-4">         color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span> )</span>
<span id="cb33-5">plt.fill_between(</span>
<span id="cb33-6">    weight_seq, cred_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cred_intervals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, </span>
<span id="cb33-7">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Uncertainty in $\mu$"</span>,</span>
<span id="cb33-8">)</span>
<span id="cb33-9">plt.fill_between(</span>
<span id="cb33-10">    weight_seq, pi_67[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pi_67[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb33-11">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> </span>
<span id="cb33-12">)</span>
<span id="cb33-13">plt.fill_between(</span>
<span id="cb33-14">    weight_seq, pi_89[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pi_89[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb33-15">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> </span>
<span id="cb33-16">)</span>
<span id="cb33-17">plt.fill_between(</span>
<span id="cb33-18">    weight_seq, pi_97[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], pi_97[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb33-19">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> </span>
<span id="cb33-20">)</span>
<span id="cb33-21">plt.xlabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb33-22">plt.ylabel(d2.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb33-23">plt.axvline(np.mean(d2.weight), ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean weight"</span>)</span>
<span id="cb33-24">plt.xlim(d2.weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), d2.weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-25">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Another way to generate the same plot.</p>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given that we have 2,000 samples let's use 200 for plotting </span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (or we can use all of them too if desired)</span></span>
<span id="cb34-3">trace_iq_thinned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_iq[::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb34-4">mu_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(weight_seq), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trace_iq_thinned) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> trace_iq.nchains))</span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(weight_seq):</span>
<span id="cb34-6">    mu_pred[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( trace_iq_thinned[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb34-7">                  trace_iq_thinned[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w )</span></code></pre></div>
</div>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">trace_iq_thinned, mu_pred.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(&lt;MultiTrace: 2 chains, 100 iterations, 5 variables&gt;, (71, 200))</code></pre>
</div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">mu_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_pred.mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb37-2">mu_hdi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> az.hdi(mu_pred.T)</span>
<span id="cb37-3">mu_mean.shape, mu_hdi.shape</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: hdi currently interprets 2d data as (draw, shape) but this will change in a future release to (chain, draw) for coherence with other functions
  </code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>((71,), (71, 2))</code></pre>
</div>
</div>
<p>Generate heights from the posterior manually.</p>
<div id="cell-46" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">post_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb40-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of samples from the posterior</span></span>
<span id="cb40-3">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(trace_iq))</span>
<span id="cb40-4">    mu_pr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>][i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'beta'</span>][i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weight_seq</span>
<span id="cb40-5">    sigma_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_iq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigma'</span>][i]</span>
<span id="cb40-6">    post_samples.append(np.random.normal(mu_pr, sigma_pred))</span></code></pre></div>
</div>
<div id="cell-47" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>az.plot_hdi(weight_seq, mu_pred.T)</span>
<span id="cb41-2">az.plot_hdi(weight_seq, np.array(post_samples), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>)</span>
<span id="cb41-3">az.plot_hdi(weight_seq, np.array(post_samples), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89</span>)</span>
<span id="cb41-4">az.plot_hdi(weight_seq, np.array(post_samples), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>)</span>
<span id="cb41-5">plt.scatter(d2.weight, d2.height)</span>
<span id="cb41-6">plt.plot(weight_seq, mu_mean, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>)</span>
<span id="cb41-7">plt.axvline(np.mean(d2.weight), ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean weight"</span>)</span>
<span id="cb41-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb41-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>)</span>
<span id="cb41-10">plt.xlim(d2.weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), d2.weight.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/arviz/plots/hdiplot.py:157: FutureWarning: hdi currently interprets 2d data as (draw, shape) but this will change in a future release to (chain, draw) for coherence with other functions
  hdi_data = hdi(y, hdi_prob=hdi_prob, circular=circular, multimodal=False, **hdi_kwargs)
/usr/local/lib/python3.7/dist-packages/arviz/plots/hdiplot.py:157: FutureWarning: hdi currently interprets 2d data as (draw, shape) but this will change in a future release to (chain, draw) for coherence with other functions
  hdi_data = hdi(y, hdi_prob=hdi_prob, circular=circular, multimodal=False, **hdi_kwargs)
/usr/local/lib/python3.7/dist-packages/arviz/plots/hdiplot.py:157: FutureWarning: hdi currently interprets 2d data as (draw, shape) but this will change in a future release to (chain, draw) for coherence with other functions
  hdi_data = hdi(y, hdi_prob=hdi_prob, circular=circular, multimodal=False, **hdi_kwargs)
/usr/local/lib/python3.7/dist-packages/arviz/plots/hdiplot.py:157: FutureWarning: hdi currently interprets 2d data as (draw, shape) but this will change in a future release to (chain, draw) for coherence with other functions
  hdi_data = hdi(y, hdi_prob=hdi_prob, circular=circular, multimodal=False, **hdi_kwargs)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-31-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">trace_4M7_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.trace_to_dataframe( trace_4M7 )</span>
<span id="cb43-2">trace_4M7_df.cov().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-23bbb8f7-cafe-4353-a3d9-ac4231dcd300">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">alpha</th>
<th data-quarto-table-cell-role="th">beta</th>
<th data-quarto-table-cell-role="th">sigma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">alpha</td>
<td>3.452</td>
<td>-0.076</td>
<td>-0.026</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">beta</td>
<td>-0.076</td>
<td>0.002</td>
<td>0.001</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>-0.026</td>
<td>0.001</td>
<td>0.041</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-23bbb8f7-cafe-4353-a3d9-ac4231dcd300')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-23bbb8f7-cafe-4353-a3d9-ac4231dcd300 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-23bbb8f7-cafe-4353-a3d9-ac4231dcd300');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>There doesn’t seem to be much of a covariance between the parameters. This is similar to what we saw in m_4_3 (shown below).</p>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">pm.trace_to_dataframe( trace_4_3 ).cov().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-6cb4ae1f-c24c-465f-9108-8eb252ad7149">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">sigma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">a</td>
<td>0.079</td>
<td>-0.000</td>
<td>-0.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">b</td>
<td>-0.000</td>
<td>0.002</td>
<td>0.000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>-0.000</td>
<td>0.000</td>
<td>0.041</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6cb4ae1f-c24c-465f-9108-8eb252ad7149')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6cb4ae1f-c24c-465f-9108-8eb252ad7149 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6cb4ae1f-c24c-465f-9108-8eb252ad7149');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Next let’s examine the correlations.</p>
<div id="cell-52" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">trace_4M7_df.corr().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-b7567d55-d3c1-47a0-ac85-ccd7919bd494">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">alpha</th>
<th data-quarto-table-cell-role="th">beta</th>
<th data-quarto-table-cell-role="th">sigma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">alpha</td>
<td>1.00</td>
<td>-0.99</td>
<td>-0.07</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">beta</td>
<td>-0.99</td>
<td>1.00</td>
<td>0.07</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>-0.07</td>
<td>0.07</td>
<td>1.00</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-b7567d55-d3c1-47a0-ac85-ccd7919bd494')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-b7567d55-d3c1-47a0-ac85-ccd7919bd494 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-b7567d55-d3c1-47a0-ac85-ccd7919bd494');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>Intercept (alpha) and slope (beta) are negatively correlated unlike model m_4_3.</p>
<div id="cell-54" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">pm.trace_to_dataframe( trace_4_3 ).corr().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-c7daa43d-6b74-4ea8-b314-21ebbdc4d402">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">a</th>
<th data-quarto-table-cell-role="th">b</th>
<th data-quarto-table-cell-role="th">sigma</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">a</td>
<td>1.000</td>
<td>-0.041</td>
<td>-0.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">b</td>
<td>-0.041</td>
<td>1.000</td>
<td>0.051</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma</td>
<td>-0.000</td>
<td>0.051</td>
<td>1.000</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-c7daa43d-6b74-4ea8-b314-21ebbdc4d402')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-c7daa43d-6b74-4ea8-b314-21ebbdc4d402 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-c7daa43d-6b74-4ea8-b314-21ebbdc4d402');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
</section>
</section>
<section id="m8" class="level2">
<h2 class="anchored" data-anchor-id="m8">4M8</h2>
<p>In the chapter, we used 15 knots with the cherry blossom spline. Increase the number of knots and observe what happens to the resulting spline. Then adjust also the width of the prior on the weights – change the standard deviation of the prior and watch what happens. What do you think the combination of knot number and the prior on the weight controls?</p>
<p>Suppose <img src="https://latex.codecogs.com/png.latex?D_%7Bi%7D"> be the date of year of the cherry blossom in year <img src="https://latex.codecogs.com/png.latex?i"> then a formal description of the model is:</p>
<p><img src="https://latex.codecogs.com/png.latex?D_%7Bi%7D%20%5Csim%20N(%5Cmu_%7Bi%7D,%5Csigma)"> <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bi%7D%20=%20%5Calpha%20+%20%5Csum_%7Bk=1%7D%5E%7BK%7Dw_%7Bk%7DB_%7Bki%7D"> <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Csim%20N(100,10)"> <img src="https://latex.codecogs.com/png.latex?w_%7Bk%7D%20%5Csim%20%5Ctext%7BNormal%7D(0,10)"> <img src="https://latex.codecogs.com/png.latex?%5Csigma%20%5Csim%20%5Ctext%7BExponential%7D(1)"></p>
<p><img src="https://latex.codecogs.com/png.latex?B_%7Bki%7D"> is the value of the <img src="https://latex.codecogs.com/png.latex?k">-th basis function for year <img src="https://latex.codecogs.com/png.latex?i">.</p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/rmcelreath/rethinking/'</span>\</span>
<span id="cb47-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'master/data/cherry_blossoms.csv'</span></span>
<span id="cb47-3">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb47-4">d.head()</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-aa02430b-54f7-41df-b276-51d69fcd6f64">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th">doy</th>
<th data-quarto-table-cell-role="th">temp</th>
<th data-quarto-table-cell-role="th">temp_upper</th>
<th data-quarto-table-cell-role="th">temp_lower</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>801</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>802</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>803</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>804</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>805</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-aa02430b-54f7-41df-b276-51d69fcd6f64')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-aa02430b-54f7-41df-b276-51d69fcd6f64 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-aa02430b-54f7-41df-b276-51d69fcd6f64');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-58" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d.dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doy'</span>])</span>
<span id="cb48-2">d2.head()</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-6a6cdc61-2355-49cc-90d0-1c94731cb431">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th">doy</th>
<th data-quarto-table-cell-role="th">temp</th>
<th data-quarto-table-cell-role="th">temp_upper</th>
<th data-quarto-table-cell-role="th">temp_lower</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>812</td>
<td>92.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>815</td>
<td>105.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>831</td>
<td>96.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50</td>
<td>851</td>
<td>108.0</td>
<td>7.38</td>
<td>12.1</td>
<td>2.66</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">52</td>
<td>853</td>
<td>104.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6a6cdc61-2355-49cc-90d0-1c94731cb431')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6a6cdc61-2355-49cc-90d0-1c94731cb431 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6a6cdc61-2355-49cc-90d0-1c94731cb431');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-60" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">num_knots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb49-2">knot_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(d2.year, np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_knots))</span></code></pre></div>
</div>
<div id="cell-61" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">knot_list</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>array([ 812., 1036., 1174., 1269., 1377., 1454., 1518., 1583., 1650.,
       1714., 1774., 1833., 1893., 1956., 2015.])</code></pre>
</div>
</div>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dmatrix(</span>
<span id="cb52-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bs(year, knots=knots, degree=3, include_intercept=True) - 1"</span>,</span>
<span id="cb52-3">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>: d2.year.values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"knots"</span>: knot_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]},</span>
<span id="cb52-4">)</span></code></pre></div>
</div>
<div id="cell-63" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">np.asarray( B ).shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>(827, 17)</code></pre>
</div>
</div>
<div id="cell-64" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">B</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>DesignMatrix with shape (827, 17)
  Columns:
    ['bs(year, knots=knots, degree=3, include_intercept=True)[0]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[1]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[2]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[3]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[4]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[5]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[6]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[7]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[8]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[9]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[10]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[11]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[12]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[13]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[14]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[15]',
     'bs(year, knots=knots, degree=3, include_intercept=True)[16]']
  Terms:
    'bs(year, knots=knots, degree=3, include_intercept=True)' (columns 0:17)
  (to view full data, use np.asarray(this_obj))</code></pre>
</div>
</div>
<p>Let’s plot the basis functions.</p>
<div id="cell-70" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">_, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb57-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>( B.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] ):</span>
<span id="cb57-3">    ax.plot(d2.year, (B[:, i]))</span>
<span id="cb57-4">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>)</span>
<span id="cb57-5">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"basis"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-48-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Next, let’s learn the parameters.</p>
<div id="cell-72" class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> pm.Model() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> m_4M8:</span>
<span id="cb58-2">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb58-3">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>B.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-4">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Deterministic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pm.math.dot(B.base, w.T))</span>
<span id="cb58-5">    sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Exponential(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-6">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.Normal(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, mu, sigma, observed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d2.doy)</span>
<span id="cb58-7">    trace_m_4M8 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pm.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, tune<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, chains<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb58-8">                            return_inferencedata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Sequential sampling (2 chains in 1 job)
NUTS: [sigma, w, a]</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:40&lt;00:00 Sampling chain 0, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="4000" class="" max="4000" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [4000/4000 00:40&lt;00:00 Sampling chain 1, 0 divergences]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Sampling 2 chains for 2_000 tune and 2_000 draw iterations (4_000 + 4_000 draws total) took 81 seconds.
The number of effective samples is smaller than 25% for some parameters.</code></pre>
</div>
</div>
<p>Plot each basis weighted by it’s corresponding parameter.</p>
<div id="cell-77" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">_, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb61-2">wp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_m_4M8[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>].mean(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#17 entries, one for each basis fn</span></span>
<span id="cb61-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>( B.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] ):</span>
<span id="cb61-4">    ax.plot(d2.year, (wp[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B[:, i]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>)</span>
<span id="cb61-5">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">812</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2015</span>)</span>
<span id="cb61-6">ax.set_ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-53-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-79" class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">post_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( az.summary(trace_m_4M8, var_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>], hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.94</span>).</span>
<span id="cb62-2">             reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) )</span>
<span id="cb62-3">post_pred.head()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Got error No model on context stack. trying to find log_likelihood in translation.
/usr/local/lib/python3.7/dist-packages/arviz/data/io_pymc3_3x.py:102: FutureWarning: Using `from_pymc3` without the model will be deprecated in a future release. Not using the model will return less accurate and less useful results. Make sure you use the model argument or call from_pymc3 within a model context.
  FutureWarning,</code></pre>
</div>
<div class="cell-output cell-output-display">

  <div id="df-db8c2938-66bf-40d6-ab41-5e6f0abe74ef">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">sd</th>
<th data-quarto-table-cell-role="th">hdi_3%</th>
<th data-quarto-table-cell-role="th">hdi_97%</th>
<th data-quarto-table-cell-role="th">mcse_mean</th>
<th data-quarto-table-cell-role="th">mcse_sd</th>
<th data-quarto-table-cell-role="th">ess_bulk</th>
<th data-quarto-table-cell-role="th">ess_tail</th>
<th data-quarto-table-cell-role="th">r_hat</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100.320</td>
<td>3.179</td>
<td>93.831</td>
<td>105.847</td>
<td>0.050</td>
<td>0.035</td>
<td>4039.0</td>
<td>3348.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100.406</td>
<td>2.994</td>
<td>94.330</td>
<td>105.655</td>
<td>0.047</td>
<td>0.033</td>
<td>4124.0</td>
<td>3292.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100.822</td>
<td>2.182</td>
<td>96.796</td>
<td>105.020</td>
<td>0.032</td>
<td>0.023</td>
<td>4692.0</td>
<td>3168.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>101.262</td>
<td>1.555</td>
<td>98.286</td>
<td>104.116</td>
<td>0.021</td>
<td>0.015</td>
<td>5426.0</td>
<td>3262.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>101.302</td>
<td>1.514</td>
<td>98.484</td>
<td>104.162</td>
<td>0.021</td>
<td>0.015</td>
<td>5442.0</td>
<td>3287.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-db8c2938-66bf-40d6-ab41-5e6f0abe74ef')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-db8c2938-66bf-40d6-ab41-5e6f0abe74ef button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-db8c2938-66bf-40d6-ab41-5e6f0abe74ef');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="cell-80" class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">plt.fill_between(</span>
<span id="cb64-2">    d2.year,</span>
<span id="cb64-3">    post_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_3%"</span>],</span>
<span id="cb64-4">    post_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hdi_97%"</span>],</span>
<span id="cb64-5">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>,</span>
<span id="cb64-6">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,</span>
<span id="cb64-7">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-8"></span>
<span id="cb64-9">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gca()</span>
<span id="cb64-10">ax.plot(d2.year, d2.doy, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb64-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> knot <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> knot_list:</span>
<span id="cb64-12">    ax.axvline(knot, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-13">ax.plot(d2.year, </span>
<span id="cb64-14">        post_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>],</span>
<span id="cb64-15">        lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"firebrick"</span>)</span>
<span id="cb64-16"></span>
<span id="cb64-17">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.gcf()</span>
<span id="cb64-18">fig.set_size_inches(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb64-19">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>)</span>
<span id="cb64-20">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days in year"</span>)</span>
<span id="cb64-21">ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'knots=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_knots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'knots=15')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-56-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Increase the number of knots to 30.</p>
<div id="cell-84" class="cell">
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'knots=30')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-59-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Change the width of the prior on the weights.</p>
<div id="cell-88" class="cell">
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'knots=30; w ~ N(0,100)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-62-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-91" class="cell">
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'knots=30; w ~ N(0,1)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-65-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-94" class="cell">
<div class="cell-output cell-output-display">
<pre><code>Text(0.5, 1.0, 'knots=5; w ~ N(0,100)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-04-10-McElreath-Chapter-4_files/figure-html/cell-68-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The larger the number of knots the more local variation we are able to capture. The prior on the weight controls how much weights are allowed to vary around the mean. A tighter (smaller) standard deviation on the weight will not allow the weight to vary much.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-wiki:Log-normal_distribution" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">Wikipedia, <span>“&lt;A href="http://en.wikipedia.org/w/index.php?title=log-normal%20distribution&amp;oldid=1080654936"&gt;"<span>Log-normal distribution</span> — <span>W</span>ikipedia<span>,</span> the free encyclopedia"&lt;/a&gt;.”</span> <a href="http://en.wikipedia.org/w/index.php?title=Log-normal%20distribution&amp;oldid=1080654936" class="uri">http://en.wikipedia.org/w/index.php?title=Log-normal%20distribution&amp;oldid=1080654936</a>, 2022.</div>
</div>
</div></section></div> ]]></description>
  <category>statistical-rethinking</category>
  <category>bayesian</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-04-10-mcelreath-chapter-4.html</guid>
  <pubDate>Sun, 10 Apr 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>McElreath Chapter 3</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-03-19-mcelreath-chapter-3.html</link>
  <description><![CDATA[ 





<p>Exercise problems from Chapter 3, Sampling the Imaginary, of <span class="citation" data-cites="mcelreath2020statistical">[1]</span>.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pylab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">RANDOM_SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8927</span></span>
<span id="cb2-2">np.random.seed(RANDOM_SEED)</span></code></pre></div>
</div>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> grid_approx(num_grid_points, successes, tosses):</span>
<span id="cb3-2">  p_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_grid_points) )</span>
<span id="cb3-3">  prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_grid_points) ) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uniform prior</span></span>
<span id="cb3-4">  likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.binom.pmf( k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>successes , n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tosses , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_grid )</span>
<span id="cb3-5">  unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> likelihood</span>
<span id="cb3-6">  posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> unstd_posterior.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb3-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> p_grid, posterior</span></code></pre></div>
</div>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">p_grid , posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> )</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate samples from the posterior</span></span>
<span id="cb4-3">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice( p_grid , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>posterior , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>) , replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> )</span></code></pre></div>
</div>
<section id="e1" class="level2">
<h2 class="anchored" data-anchor-id="e1">3E1</h2>
<p>From the samples, how much posterior probability lies below <img src="https://latex.codecogs.com/png.latex?p=0.2">?</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span> </span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.0008</code></pre>
</div>
</div>
</section>
<section id="e2" class="level2">
<h2 class="anchored" data-anchor-id="e2">3E2</h2>
<p>From the samples, how much posterior probability lies above <img src="https://latex.codecogs.com/png.latex?p=0.8">?</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span> </span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.1243</code></pre>
</div>
</div>
</section>
<section id="e3" class="level2">
<h2 class="anchored" data-anchor-id="e3">3E3</h2>
<p>From the samples, how much posterior probability lies between <img src="https://latex.codecogs.com/png.latex?p=0.2"> and <img src="https://latex.codecogs.com/png.latex?p=0.8">?</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( (samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span> </span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.8749</code></pre>
</div>
</div>
</section>
<section id="e4" class="level2">
<h2 class="anchored" data-anchor-id="e4">3E4</h2>
<p>From the samples, <img src="https://latex.codecogs.com/png.latex?20%5C%25"> of the posterior probability lies below which value of <img src="https://latex.codecogs.com/png.latex?p">?</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">np.quantile( samples , <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.5175175175175175</code></pre>
</div>
</div>
</section>
<section id="e5" class="level2">
<h2 class="anchored" data-anchor-id="e5">3E5</h2>
<p>From the samples, <img src="https://latex.codecogs.com/png.latex?20%5C%25"> of the posterior probability lies above which value of <img src="https://latex.codecogs.com/png.latex?p">?</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">np.quantile( samples , <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.7627627627627628</code></pre>
</div>
</div>
</section>
<section id="e6" class="level2">
<h2 class="anchored" data-anchor-id="e6">3E6</h2>
<p>Which values of <img src="https://latex.codecogs.com/png.latex?p"> contain the narrowest interval equal to <img src="https://latex.codecogs.com/png.latex?66%5C%25"> of the posterior probability?</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">az.hdi( samples , hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.66</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.53053053, 0.8028028 ])</code></pre>
</div>
</div>
</section>
<section id="e7" class="level2">
<h2 class="anchored" data-anchor-id="e7">3E7</h2>
<p>Which values of <img src="https://latex.codecogs.com/png.latex?p"> contain <img src="https://latex.codecogs.com/png.latex?66%5C%25"> of the posterior probability, assuming equal posterior probability both below and above the interval?</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">np.quantile( samples , (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.66</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.17</span>) )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.5005005 , 0.77777778])</code></pre>
</div>
</div>
</section>
<section id="m1" class="level2">
<h2 class="anchored" data-anchor-id="m1">3M1</h2>
<p>Suppose the globe tossing data had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as before.</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">p_grid, posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
</div>
</section>
<section id="m2" class="level2">
<h2 class="anchored" data-anchor-id="m2">3M2</h2>
<p>Draw 10,000 samples from the posterior above. Then use the samples to calculate the 90% HPDI for p.</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice( p_grid , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>posterior , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>) , </span>
<span id="cb20-2">                           replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> )</span>
<span id="cb20-3">az.hdi( samples , hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.34034034, 0.72572573])</code></pre>
</div>
</div>
</section>
<section id="m3" class="level2">
<h2 class="anchored" data-anchor-id="m3">3M3</h2>
<p>Construct a posterior predictive check for this model and data. This means simulate the distribution of samples, averaging over the posterior uncertainty in p.&nbsp;What is the probability of observing 8 water in 15 tosses?</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conduct 1 experiment where we toss the globe 15 times </span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the fraction of the water on the globe is 0.5 </span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and record the number of waters.</span></span>
<span id="cb22-4">np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([9])</code></pre>
</div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conduct 2 experiment where we toss the globe 15 times </span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the fraction of the water on the globe is 0.2 and 0.5 in the first and </span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second experiment respectively.</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Record the number of waters.</span></span>
<span id="cb24-5">np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>] )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([3, 7])</code></pre>
</div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples )</span>
<span id="cb26-2">ppd.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(10000,)</code></pre>
</div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span></code></pre></div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">count_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(ppd)</span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We recorded 8 waters as the outcome in 1,460 out of the 10,000 experiments</span></span>
<span id="cb29-3">count_dict</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Counter({0: 7,
         1: 35,
         2: 119,
         3: 260,
         4: 525,
         5: 833,
         6: 1199,
         7: 1412,
         8: 1460,
         9: 1337,
         10: 1169,
         11: 791,
         12: 522,
         13: 241,
         14: 73,
         15: 17})</code></pre>
</div>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">possible_num_waters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>( count_dict.keys()  )</span>
<span id="cb31-2">plt.bar( possible_num_waters , </span>
<span id="cb31-3">        [count_dict[waters] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> waters <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> possible_num_waters ] )</span>
<span id="cb31-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of water samples'</span>)</span>
<span id="cb31-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0, 0.5, 'count')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-19-McElreath-Chapter-3_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-31" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There is 14.6% probability of observing 8 waters in 15 tosses</span></span>
<span id="cb33-2">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ppd.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.146</code></pre>
</div>
</div>
</section>
<section id="m4" class="level2">
<h2 class="anchored" data-anchor-id="m4">3M4</h2>
<p>Using the posterior distribution constructed from the new (8/15) data, now calculate the probability of observing 6 water in 9 tosses.</p>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples )</span>
<span id="cb35-2">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ppd.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.1789</code></pre>
</div>
</div>
</section>
<section id="m5" class="level2">
<h2 class="anchored" data-anchor-id="m5">3M5</h2>
<p>Start over at 3M1, but now use a prior that is zero below p=0.5 and a constant above p=0.5. This corresponds to prior information that a majority of the Earth’s surface is water. Repeat each problem above and compare the inferences. What difference does the better prior make? If it helps, compare inferences (using both priors) to the true value p=0.7.</p>
<div id="cell-35" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">np.heaviside( np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0., 0., 1., 2., 2.])</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([False, False,  True,  True,  True])</code></pre>
</div>
</div>
<div id="cell-37" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">( np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> ).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0, 0, 1, 1, 1])</code></pre>
</div>
</div>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">( np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> ).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0., 0., 2., 2., 2.])</code></pre>
</div>
</div>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> grid_approx2(num_grid_points, successes, tosses):</span>
<span id="cb45-2">  p_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> , <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_grid_points) )</span>
<span id="cb45-3">  prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( p_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> ).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># truncated prior</span></span>
<span id="cb45-4">  likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.binom.pmf( k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>successes , n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tosses , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_grid )</span>
<span id="cb45-5">  unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> likelihood</span>
<span id="cb45-6">  posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> unstd_posterior.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb45-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> p_grid, posterior</span></code></pre></div>
</div>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">p_grid, posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#3M1'</span></span>
<span id="cb46-2"></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3M2'</span></span>
<span id="cb46-4">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice( p_grid , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>posterior , size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>) </span>
<span id="cb46-5">                           , replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> )</span>
<span id="cb46-6">az.hdi( samples , hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span> )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.5005005 , 0.71271271])</code></pre>
</div>
</div>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3M3'</span></span>
<span id="cb48-2">ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> , p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples )</span>
<span id="cb48-3"></span>
<span id="cb48-4">count_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(ppd)</span>
<span id="cb48-5">count_dict</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Counter({1: 2,
         2: 6,
         3: 45,
         4: 127,
         5: 341,
         6: 664,
         7: 1107,
         8: 1623,
         9: 1739,
         10: 1613,
         11: 1359,
         12: 825,
         13: 383,
         14: 141,
         15: 25})</code></pre>
</div>
</div>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">possible_num_waters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>( count_dict.keys()  )</span>
<span id="cb50-2">plt.bar( possible_num_waters , </span>
<span id="cb50-3">        [count_dict[waters] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> waters <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> possible_num_waters ] )</span>
<span id="cb50-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of water samples'</span>)</span>
<span id="cb50-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Text(0, 0.5, 'count')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-19-McElreath-Chapter-3_files/figure-html/cell-30-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reasonable amount of mass on 10 waters</span></span>
<span id="cb52-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0.7 is the true fraction of water covering the globe</span></span>
<span id="cb52-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Likelihood </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>) ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ppd.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of observing 10 waters in 15 tosses'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Likelihood 0.1613 of observing 10 waters in 15 tosses</code></pre>
</div>
</div>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Likelihood </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>( ppd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ppd.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of observing 8 waters in 15 tosses'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Likelihood 0.1623 of observing 8 waters in 15 tosses</code></pre>
</div>
</div>
</section>
<section id="m6" class="level2">
<h2 class="anchored" data-anchor-id="m6">3M6</h2>
<p>Suppose you want to estimate the Earth’s proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of p to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this?</p>
<div id="cell-46" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">p_water <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ground truth of the fraction of water on Earth</span></span>
<span id="cb56-2"></span>
<span id="cb56-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p_true <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_water:</span>
<span id="cb56-4">  converged<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb56-5">  N_tosses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> converged:</span>
<span id="cb56-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we observe int(N_tosses*p_true) waters in N_tosses</span></span>
<span id="cb56-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the posterior distribution of the fraction of water</span></span>
<span id="cb56-9">    p_grid, posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx( <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(N_tosses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p_true), N_tosses )</span>
<span id="cb56-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get samples from the posterior</span></span>
<span id="cb56-11">    samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(p_grid, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>posterior, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb56-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the 99% interval</span></span>
<span id="cb56-13">    interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile( samples , (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.995</span>) )</span>
<span id="cb56-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the width of the interval</span></span>
<span id="cb56-15">    width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> interval[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb56-16">    converged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ( width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span> )</span>
<span id="cb56-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(p_true, N_tosses, width)</span></span>
<span id="cb56-18">    N_tosses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-19">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_true<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:0.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, N_tosses)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.00 104
0.11 729
0.22 1217
0.33 1523
0.44 1722
0.56 1698
0.67 1509
0.78 1190
0.89 668
1.00 59</code></pre>
</div>
</div>
</section>
<section id="hard" class="level2">
<h2 class="anchored" data-anchor-id="hard">Hard</h2>
<p>The Hard problems here all use the data below. These data indicate the gender (male=1, female=0) of officially reported first and second born children in 100 two-child families.</p>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">birth1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-5">birth2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb58-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb58-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb58-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
</div>
<div id="cell-49" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth2)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>111</code></pre>
</div>
</div>
<div id="cell-50" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">birth1.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> birth2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>200</code></pre>
</div>
</div>
</section>
<section id="h1" class="level2">
<h2 class="anchored" data-anchor-id="h1">3H1</h2>
<p>Using grid approximation, compute the posterior distribution for the probability of a birth being a boy. Assume a uniform prior probability. Which parameter value maximizes the posterior probability?</p>
<div id="cell-52" class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">p_grid, posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth2), </span>
<span id="cb63-2">                                birth1.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> birth2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb63-3">p_grid[ np.argmax(posterior) ]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.5545545545545546</code></pre>
</div>
</div>
<p>##3H2</p>
<p>Using the sample function, draw 10,000 random parameter values from the posterior distribution you calculated above. Use these samples to estimate the 50%, 89%, and 97% highest posterior density intervals.</p>
<div id="cell-54" class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(p_grid, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>posterior, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-55" class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'50% HPDI </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>az<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>hdi(samples, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb66-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'89% HPDI </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>az<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>hdi(samples, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb66-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'97% HPDI </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>az<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>hdi(samples, hdi_prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.97</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>50% HPDI [0.52552553 0.57357357]
89% HPDI [0.5005005  0.61161161]
97% HPDI [0.48248248 0.63263263]</code></pre>
</div>
</div>
</section>
<section id="h3" class="level2">
<h2 class="anchored" data-anchor-id="h3">3H3</h2>
<p>Use rbinom to simulate 10,000 replicates of 200 births. You should end up with 10,000 numbers, each one a count of boys out of 200 births. Compare the distribution of predicted numbers of boys to the actual count in the data (111 boys out of 200 births). There are many good ways to visualize the simulations, but the dens command (part of the rethinking package) is probably the easiest way in this case. Does it look like the model fits the data well? That is, does the distribution of predictions include the actual observation as a central, likely outcome?</p>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">sampled_births <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb68-2">sampled_births[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([106, 116, 117, 134, 115, 105, 124, 106, 109, 122])</code></pre>
</div>
</div>
<p>It looks like the model fits the data well and the distribution of predictions includes the actual observation of 111 boys as a central, likely outcome.</p>
<div id="cell-59" class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">plt.hist(sampled_births)</span>
<span id="cb70-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive distribution of #boys per 200 births"</span>)</span>
<span id="cb70-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Boys"</span>)</span>
<span id="cb70-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-19-McElreath-Chapter-3_files/figure-html/cell-41-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="h4" class="level2">
<h2 class="anchored" data-anchor-id="h4">3H4</h2>
<p>Now compare 10,000 counts of boys from 100 simulated first borns only to the number of boys in the first births, birth1. How does the model look in this light?</p>
<div id="cell-61" class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">first_births <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb71-2">plt.hist(first_births)</span>
<span id="cb71-3">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive distribution of #boys per 100 births"</span>)</span>
<span id="cb71-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Boys"</span>)</span>
<span id="cb71-5">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb71-6">plt.axvline(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth1), c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed births"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-19-McElreath-Chapter-3_files/figure-html/cell-42-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'number of boys in birth1 is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth1)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>number of boys in birth1 is 51</code></pre>
</div>
</div>
<p>In first_births 51 is not in the center of the predicted number of boys.</p>
<p>##3H5</p>
<p>The model assumes that sex of first and second births are independent. To check this assumption, focus now on second births that followed female first borns. Compare 10,000 simulated counts of boys to only those second births that followed girls. To do this correctly, you need to count the number of first borns who were girls and simulate that many births, 10,000 times. Compare the counts of boys in your simulations to the actual observed count of boys following girls. How does the model look in this light? Any guesses what is going on in these data?</p>
<div id="cell-65" class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#number of first borns who were girls</span></span>
<span id="cb74-2">girls_first_born <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> birth1.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth1)</span>
<span id="cb74-3">girls_first_born</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>49</code></pre>
</div>
</div>
<div id="cell-66" class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Conduct 10,000 experiments where in each experiment </span></span>
<span id="cb76-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we simulate births in the 49 families which had girl first borns</span></span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we record the outcome of the number of boys</span></span>
<span id="cb76-4">second_births_after_gfb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.binomial( n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>girls_first_born, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples )</span>
<span id="cb76-5">second_births_after_gfb[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([24, 35, 28, 25, 32, 24, 25, 28, 30, 24])</code></pre>
</div>
</div>
<div id="cell-67" class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">plt.hist(second_births_after_gfb)</span>
<span id="cb78-2">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive distribution of #boys after girl births"</span>)</span>
<span id="cb78-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#Boys"</span>)</span>
<span id="cb78-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb78-5">plt.axvline(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(birth2[birth1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed births"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-19-McElreath-Chapter-3_files/figure-html/cell-46-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>More boy births were observed in comparison to what our model predicts to be the likely outcomes. This means that the independence assumption we made in our small world model of each birth being of either sex does not hold for this dataset.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-mcelreath2020statistical" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">R. McElreath, <em>Statistical rethinking: A bayesian course with examples in r and stan</em>. Chapman; Hall/CRC, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>statistical-rethinking</category>
  <category>bayesian</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-03-19-mcelreath-chapter-3.html</guid>
  <pubDate>Sat, 19 Mar 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>McElreath Chapter 2</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2022-03-11-mcelreath-chapter-2.html</link>
  <description><![CDATA[ 





<p>Exercise problems from Chapter 2, Small Worlds and Large Worlds, of <span class="citation" data-cites="mcelreath2020statistical">[1]</span>.</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arviz <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> az</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pymc3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pm</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pylab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span></code></pre></div>
</div>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">RANDOM_SEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8927</span></span>
<span id="cb2-2">np.random.seed(RANDOM_SEED)</span>
<span id="cb2-3"></span>
<span id="cb2-4">az.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"arviz-darkgrid"</span>)</span></code></pre></div>
</div>
<p>##2M1</p>
<p><em>Recall the globe tossing model from the chapter. Compute and plot the grid approximate posterior distribution for each of the following sets of observations. In each case, assume a uniform prior for p.</em></p>
<ol type="1">
<li><em>W, W, W</em></li>
<li><em>W, W, W, L</em></li>
<li><em>L, W, W, L, W, W, W</em></li>
</ol>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each tuple is:</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ( Observation , Waters, Trials )</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1,3,3) means that observation 1 consists of</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 waters in 3 globe tosses</span></span>
<span id="cb3-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)]</span></code></pre></div>
</div>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> grid_approx(num_grid_points, successes, tosses):</span>
<span id="cb4-2">    ngp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_grid_points)</span>
<span id="cb4-3">    p_success <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ngp)</span>
<span id="cb4-4">    </span>
<span id="cb4-5">    likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.binom.pmf(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>successes, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tosses, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p_success)</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uniform prior</span></span>
<span id="cb4-7">    prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.repeat(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, ngp)</span>
<span id="cb4-8"></span>
<span id="cb4-9">    unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior</span>
<span id="cb4-10">    posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unstd_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> unstd_posterior.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb4-11">    </span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> p_success, posterior</span></code></pre></div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">grid_approx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(array([0.  , 0.25, 0.5 , 0.75, 1.  ]), array([0.  , 0.01, 0.08, 0.27, 0.64]))</code></pre>
</div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">_, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> observation, waters, tosses <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:    </span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num_grid_points <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb7-5">      p_grid, posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_approx(num_grid_points, waters, tosses)</span>
<span id="cb7-6">      axs[observation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(p_grid, posterior, </span>
<span id="cb7-7">                              label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(num_grid_points)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> grid points'</span>)</span>
<span id="cb7-8">  axs[observation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Observation </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>observation<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-9">  axs[observation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parameter value - p'</span>)</span>
<span id="cb7-10">  axs[observation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posterior probability'</span>)</span>
<span id="cb7-11">  axs[observation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2022-03-11-McElreath-Chapter-2_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>##2M3</p>
<p><em>Suppose there are two globes, one for Earth and one for Mars. The Earth globe is 70% covered in water and the Mars globe is 100% land. One of these globes was tossed in the air and produced a “land” observation. Each globe was equally likely to be tossed. Compute the posterior probability that the globe was the Earth, conditional on seeing “land”.</em></p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(Earth%7Cland)%20=%20%5Cfrac%7BPr(land%7CEarth)Pr(Earth)%7D%7BPr(land%7CEarth)Pr(Earth)%20+%20Pr(land%7CMars)Pr(Mars)%7D%20=%20%5Cfrac%7B(1-0.7)*0.5%7D%7B(1-0.7)*0.5%20+%201.0*0.5%7D%20=%200.23"></p>
<p>##2M4 <em>Suppose you have a deck with only three cards. Each card has two sides, and each side is either black or white. One card has two black sides, the second card has one black, one white side and the third card has two white sides. Now these cards are shuffled in a bag, one is drawn and placed flat on a table. A black side is showing up. What is the color of the other side?</em></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?C_%7B1%7D"> denote the card with 2 black sides, <img src="https://latex.codecogs.com/png.latex?C_%7B2%7D"> be the card with one black and one white side and <img src="https://latex.codecogs.com/png.latex?C_%7B3%7D"> be the card with two white sides.</p>
<p>Now, <img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSide%20facing%20down%20is%20Black%7D%20%7C%20%5Ctext%7BSide%20facing%20up%20is%20Black%7D)%20=%20%5Cfrac%7BPr(%5Ctext%7BSide%20facing%20down%20is%20Black%20AND%20Side%20facing%20up%20is%20Black%7D)%7D%7BPr(%5Ctext%7BSide%20facing%20up%20is%20Black%7D)%7D"></p>
<p>The numerator can be computed as: <img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSide%20facing%20down%20is%20Black%20AND%20Side%20facing%20up%20is%20Black%7D)%20=%20Pr(C_%7B1%7D)Pr(%5Ctext%7BSide%20facing%20up%20is%20Black%7D%7CC_%7B1%7D)%20=%20%5Cfrac%7B1%7D%7B3%7D"></p>
<p>The <img src="https://latex.codecogs.com/png.latex?1/3"> is because each card is equally likely to be drawn.</p>
<p>The denominator can be computed as: <img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSide%20facing%20up%20is%20Black%7D)%20=%20%5Csum_%7Bi=1%7D%5E%7B3%7DPr(C_%7Bi%7D)Pr(%5Ctext%7BSide%20facing%20up%20is%20Black%7D%7CC_%7Bi%7D)%20=%20%5Cfrac%7B1%7D%7B3%7D(1.0%20+%200.5%20+%200)%20=%20%5Cfrac%7B1%7D%7B2%7D"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSide%20facing%20down%20is%20Black%7D%20%7C%20%5Ctext%7BSide%20facing%20up%20is%20Black%7D)%20=%20%5Cfrac%7B1/3%7D%7B1/2%7D%20=%20%5Cfrac%7B2%7D%7B3%7D"></p>
<p>Another way to think about this is that there are three ways for the face up card to be black. Two ways if <img src="https://latex.codecogs.com/png.latex?C_%7B1%7D"> is drawn and one way if <img src="https://latex.codecogs.com/png.latex?C_%7B2%7D"> is drawn. And in only two of those ways is the side facing down also black.</p>
<p>##2M5 <em>Now suppose there are four cards: B/B, B/W, W/W and another B/B. Again suppose a card is drawn from the bag and a black side appears face up. Again calculate the probability that the other side is black.</em></p>
<p>Given that drawing each card is equally likely then there are <img src="https://latex.codecogs.com/png.latex?5"> ways for the face up card to be black (<img src="https://latex.codecogs.com/png.latex?2"> ways each from the first and the last card and one way from the second card). Out of these there are <img src="https://latex.codecogs.com/png.latex?4"> ways for the face down card to be black.</p>
<p>Hence the probability that the side facing down is black given that the side facing up is black is <img src="https://latex.codecogs.com/png.latex?4/5">.</p>
<p>##2M6 <em>Imagine that black ink is heavy, and so cards with black sides are heavier that cards with white sides. Assume again there are three cards: B/B, B/W, and W/W and assume that for every way to pull B/B there are two ways to pull B/W and 3 ways to pull the W/W card. Again, a card is pulled and a black side appears face up. What is the probability that the other side is black?</em></p>
<p>So there are <img src="https://latex.codecogs.com/png.latex?2"> ways to get the side facing up as black from B/B. There are also <img src="https://latex.codecogs.com/png.latex?2"> ways to get the side facing up as black from B/W (since we were told that there are two ways of drawing B/W for every way to draw B/B). Of these <img src="https://latex.codecogs.com/png.latex?4"> ways there are <img src="https://latex.codecogs.com/png.latex?2"> ways in which the face down card is also black.</p>
<p>Hence the probability that the side facing down is black given that the side facing up is black is <img src="https://latex.codecogs.com/png.latex?2/4"> or <img src="https://latex.codecogs.com/png.latex?0.5">.</p>
<p>##2M7</p>
<p><em>Assume again the original card problem (2M4). This time, before looking at the other side, we draw another card from the bag and lay it face up on the table. The face that is shown on the new card is white. What is the probability that the first card is black on the other side?</em></p>
<table class="caption-top table">
<thead>
<tr class="header">
<th><img src="https://latex.codecogs.com/png.latex?C_1"></th>
<th><img src="https://latex.codecogs.com/png.latex?C_%7B2%7D"></th>
<th>ways</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>BB</td>
<td>BW</td>
<td>2x1=2</td>
</tr>
<tr class="even">
<td>BB</td>
<td>WW</td>
<td>2x2=4</td>
</tr>
<tr class="odd">
<td>BW</td>
<td>WW</td>
<td>1x2=2</td>
</tr>
</tbody>
</table>
<p>There are 8 ways of drawing two cards one after the other such that the side facing up is black for the first card and is white for the second card. Of these there are 6 ways for the side facing down of the first card to be black. Thus the probability is <img src="https://latex.codecogs.com/png.latex?6/8"> or <img src="https://latex.codecogs.com/png.latex?0.75">.</p>
<section id="h1" class="level2">
<h2 class="anchored" data-anchor-id="h1">2H1</h2>
<p><em>Suppose there are two species of panda bear. Both are equally common, they look exactly the same and there’s no genetic test to distinguish between them yet. They only differ in family size: Species A gives birth to twins 10% of the time while Species B births twins 20% of the time (otherwise it’s a single infant). Imagine you have a female panda that just gave birth to twins. What is the probability that her next birth will also be twins?</em></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?T_1"> and <img src="https://latex.codecogs.com/png.latex?T_2"> denote the event of having twins on the first and second birth respectively.</p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(T_2%7CT_1)%20=%20%5Cfrac%7BPr(T_2,T_1)%7D%7BPr(T_1)%7D%20=%20%5Cfrac%7BPr(T_2,T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_2,T_1%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D)%20%7D%7B%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D)%20%7D"></p>
<p>Since the species are equally common this means <img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSpecies%20A%7D)%20=%20Pr(%5Ctext%7BSpecies%20B%7D)%20=%200.5"> and we can rewrite the above as:</p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(T_2%7CT_1)%20=%20%5Cfrac%7BPr(T_2,T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_2,T_1%20%7C%20%5Ctext%7BSpecies%20B%7D)%20%7D%7B%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20B%7D)%20%7D%20=%20%5Cfrac%7B0.1*0.1%20+%200.2*0.2%7D%7B0.1+0.2%7D%20=%20%5Cfrac%7B0.05%7D%7B0.3%7D%20=%20%5Cfrac%7B1%7D%7B6%7D%20%5Capprox%200.17"></p>
</section>
<section id="h2" class="level2">
<h2 class="anchored" data-anchor-id="h2">2H2</h2>
<p><em>Now compute the probability that the panda we have is from species A, given that we observed one twin birth.</em></p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSpecies%20A%7D%20%7C%20T_1)%20=%20%5Cfrac%7BPr(%5Ctext%7BSpecies%20A%7D%20,%20T_1)%7D%7B%20Pr(T_1)%20%7D%20=%20%5Cfrac%7B%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20%7D%7B%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_1%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D)%20%7D%20=%20%5Cfrac%7B0.1*0.5%7D%7B0.1*0.5+0.2*0.5%7D=%5Cfrac%7B1%7D%7B3%7D"></p>
</section>
<section id="h3" class="level2">
<h2 class="anchored" data-anchor-id="h3">2H3</h2>
<p><em>Suppose the same panda mother has a second birth, this time to a singleton infant. What is the probability that this pandas is from species A?</em></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?S_2"> denote the event of a singleton infant in the second birth.</p>
<p><img src="https://latex.codecogs.com/png.latex?%F0%9D%91%83%F0%9D%91%9F(%5Ctext%7B%20Species%20A%20%7D%7C%F0%9D%91%87_1,S_2)%20=%20%5Cfrac%7B%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20%7D%7B%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D)%20%7D%20=%20%5Cfrac%7B0.1*0.9*0.5%7D%7B0.1*0.9*0.5+0.2*0.8*0.5%7D=%5Cfrac%7B9%7D%7B25%7D%20=%200.36"></p>
<p>The nicer way to think about this is that the posterior from 2H2 gives us the updated priors for Species A and Species B (as <img src="https://latex.codecogs.com/png.latex?1/3"> and <img src="https://latex.codecogs.com/png.latex?2/3"> respectively).</p>
<p>Using these updated priors we get</p>
<p><img src="https://latex.codecogs.com/png.latex?%F0%9D%91%83%F0%9D%91%9F(%5Ctext%7B%20Species%20A%20%7D%7CS_2)%20=%20%5Cfrac%7B%20Pr(S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20%7D%7B%20Pr(S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(S_2%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D)%20%7D%20=%20%5Cfrac%7B0.9*(1/3)%7D%7B0.9*(1/3)+0.8*(2/3)%7D=%5Cfrac%7B9%7D%7B25%7D%20=%200.36"></p>
</section>
<section id="h4" class="level2">
<h2 class="anchored" data-anchor-id="h4">2H4</h2>
<p><em>Suppose now, there is a new genetic test that can identify the species of our mother panda. The test is imperfect though:</em></p>
<ul>
<li><em>The probability it correctly identifies a species A panda is 0.8.</em></li>
<li><em>The probability it correctly identifies a species B panda is 0.65.</em></li>
</ul>
<p><em>The test for our mother panda is positive for species A. Ignoring the information from the births, what is the probability that our panda is species A? Next redo your calculation, now using the data on both births (twins followed by singleton).</em></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"> denote the event of testing positive for Species A and Species B respectively.</p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSpecies%20A%7D%20%7C%20A)%20=%20%5Cfrac%7BPr(A%20%7C%20%5Ctext%7BSpecies%20A%7D%20)Pr(%5Ctext%7BSpecies%20A%7D)%7D%7BPr(A%20%7C%20%5Ctext%7BSpecies%20A%7D%20)Pr(%5Ctext%7BSpecies%20A%7D)%20+%20Pr(A%20%7C%20%5Ctext%7BSpecies%20B%7D%20)Pr(%5Ctext%7BSpecies%20B%7D)%7D%20=%20%5Cfrac%7B0.8*0.5%7D%7B0.8*0.5+0.35*0.5%7D%20=%200.6956"></p>
<p>Now using the data on two births and the preceding as a prior we get:</p>
<p><img src="https://latex.codecogs.com/png.latex?%F0%9D%91%83%F0%9D%91%9F(%5Ctext%7B%20Species%20A%20%7D%7CA,%F0%9D%91%87_1,S_2)%20=%20%5Cfrac%7B%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D%7CA)%20%7D%7B%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20A%7D)Pr(%5Ctext%7BSpecies%20A%7D%7CA)%20+%20Pr(T_1,S_2%20%7C%20%5Ctext%7BSpecies%20B%7D)Pr(%5Ctext%7BSpecies%20B%7D%7CA)%20%7D%20=%20%5Cfrac%7B0.1*0.9*0.6956%7D%7B0.1*0.9*0.6956+0.2*0.8*0.3044%7D=%200.56"></p>
<p>Yet another way to attack this problem is to use the posterior 2H3 as our prior for Species A and Species B respectively,</p>
<p><img src="https://latex.codecogs.com/png.latex?Pr(%5Ctext%7BSpecies%20A%7D%20%7C%20A,%F0%9D%91%87_1,S_2)%20=%20%5Cfrac%7BPr(A%20%7C%20%5Ctext%7BSpecies%20A%7D%20)Pr(%5Ctext%7BSpecies%20A%7D%7C%F0%9D%91%87_1,S_2)%7D%7BPr(A%20%7C%20%5Ctext%7BSpecies%20A%7D%20)Pr(%5Ctext%7BSpecies%20A%7D%7C%F0%9D%91%87_1,S_2)%20+%20Pr(A%20%7C%20%5Ctext%7BSpecies%20B%7D%20)Pr(%5Ctext%7BSpecies%20B%7D%7C%F0%9D%91%87_1,S_2)%7D%20=%20%5Cfrac%7B0.8*0.36%7D%7B0.8*0.36+0.35*(1-0.36)%7D%20=%200.56"></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-mcelreath2020statistical" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">R. McElreath, <em>Statistical rethinking: A bayesian course with examples in r and stan</em>. Chapman; Hall/CRC, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>statistical-rethinking</category>
  <category>bayesian</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2022-03-11-mcelreath-chapter-2.html</guid>
  <pubDate>Fri, 11 Mar 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Chvátal Chapter 2 Simplex Implementation</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-12-11-chvatal-chapter-2-simplex-implementation.html</link>
  <description><![CDATA[ 





<div id="cell-1" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install rich</span></code></pre></div>
</details>
</div>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span></span></code></pre></div>
</div>
A basic implementation of the Simplex algorithm as described in Chapter 2 of <span class="citation" data-cites="chvatal1983linear">[1]</span> for problems of the form
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/chvatal_1dot7.png?raw=1" width="300"></p>
</div>
Roughly speaking the implementation involves iterating through a sequence of <em>dictionaries</em> until an optimal solution is uncovered. A dictionary is a system of linear equations associated with a feasible solution such as:
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/chvatal_dict_2dot13.png?raw=1" width="300"></p>
</div>
We will then use the implementation to solve
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/chvatal_chapter2_example1.png?raw=1" width="300"></p>
</div>
<p>The data corresponding to this problem and other problem instances can be obtained from the methods in the collapsed code cell below.</p>
<div id="cell-7" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_1():</span>
<span id="cb3-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-3">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#c.shape</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-7">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb3-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#A.shape</span></span>
<span id="cb3-9"></span>
<span id="cb3-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-11">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]])</span>
<span id="cb3-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#b.shape</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_2():</span>
<span id="cb3-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-18">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-19">  </span>
<span id="cb3-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-21">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-22">  </span>
<span id="cb3-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-24">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb3-25">  </span>
<span id="cb3-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_2_1a():</span>
<span id="cb3-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-30">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])</span>
<span id="cb3-31">  </span>
<span id="cb3-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-33">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-34">  </span>
<span id="cb3-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-36">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]])</span>
<span id="cb3-37">  </span>
<span id="cb3-38">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span>
<span id="cb3-39"></span>
<span id="cb3-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_2_1b():</span>
<span id="cb3-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-42">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]])</span>
<span id="cb3-43">  </span>
<span id="cb3-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-45">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-46">  </span>
<span id="cb3-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-48">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-49">  </span>
<span id="cb3-50">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span>
<span id="cb3-51"></span>
<span id="cb3-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_2_1c():</span>
<span id="cb3-53">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-54">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-55">  </span>
<span id="cb3-56">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-57">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-58">  </span>
<span id="cb3-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-60">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]])</span>
<span id="cb3-61">  </span>
<span id="cb3-62">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b  </span>
<span id="cb3-63"></span>
<span id="cb3-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_2_2():</span>
<span id="cb3-65">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-66">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]])</span>
<span id="cb3-67">  </span>
<span id="cb3-68">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-69">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-70">  </span>
<span id="cb3-71">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-72">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb3-73">  </span>
<span id="cb3-74">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span>
<span id="cb3-75"></span>
<span id="cb3-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_unbounded_problem():</span>
<span id="cb3-77">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-78">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-79">  </span>
<span id="cb3-80">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-81">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb3-82">  </span>
<span id="cb3-83">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-84">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb3-85">  </span>
<span id="cb3-86">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b  </span>
<span id="cb3-87"></span>
<span id="cb3-88"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_problem_1_6():</span>
<span id="cb3-89">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># objective function coefficients</span></span>
<span id="cb3-90">  c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]])</span>
<span id="cb3-91">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#c.shape</span></span>
<span id="cb3-92"></span>
<span id="cb3-93">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint coefficients</span></span>
<span id="cb3-94">  A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-95">                [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb3-96">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#A.shape</span></span>
<span id="cb3-97"></span>
<span id="cb3-98">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right hand sides</span></span>
<span id="cb3-99">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>]])</span>
<span id="cb3-100">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#b.shape</span></span>
<span id="cb3-101"></span>
<span id="cb3-102">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> c, A, b</span></code></pre></div>
</details>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">c, A, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_problem_1()</span></code></pre></div>
</div>
<section id="constants." class="level2">
<h2 class="anchored" data-anchor-id="constants.">Constants.</h2>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of constraints</span></span>
<span id="cb5-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of decision variables</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">FIRST_ROW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-5">ALL_BUT_LAST_ROW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">FIRST_COLUMN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-8">SECOND_COLUMN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">Z_ROW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m</span></code></pre></div>
</div>
</section>
<section id="identify-the-variable-to-enter-the-basis" class="level2">
<h2 class="anchored" data-anchor-id="identify-the-variable-to-enter-the-basis">Identify the variable to enter the basis</h2>
<p>Strictly speaking the method identifies the column corresponding to the variable that is going to be entering the basis.</p>
<div id="cell-12" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_entering_column(chvatal_dict):</span>
<span id="cb6-2">  entering_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb6-3"></span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and second column and after since we are using</span></span>
<span id="cb6-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the first column to store the RHSs.</span></span>
<span id="cb6-6">  z_coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chvatal_dict[ Z_ROW , SECOND_COLUMN : ]</span>
<span id="cb6-7"></span>
<span id="cb6-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>( z_coeffs ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the column that enters from the dictionary</span></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is one with the largest positive coefficient</span></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (since we are maximizing)</span></span>
<span id="cb6-12">    entering_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax( z_coeffs ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we need to add one since we looked from the</span></span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># second column onwards</span></span>
<span id="cb6-15"></span>
<span id="cb6-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> entering_column</span></code></pre></div>
</details>
</div>
</section>
<section id="identify-the-variable-to-leave-the-basis" class="level2">
<h2 class="anchored" data-anchor-id="identify-the-variable-to-leave-the-basis">Identify the variable to leave the basis</h2>
<p>The method identifies the row corresponding to the variable that is going to be leaving the basis.</p>
<div id="cell-14" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_leaving_row(chvatal_dict, entering_column):</span>
<span id="cb7-2">  cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chvatal_dict[ FIRST_ROW : ALL_BUT_LAST_ROW, : ]</span>
<span id="cb7-3"></span>
<span id="cb7-4">  cd_first_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cd[:, FIRST_COLUMN].copy()</span>
<span id="cb7-5">  cd_entering_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cd[:, entering_column].copy()</span>
<span id="cb7-6">  </span>
<span id="cb7-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># avoid a divide by zero - identify if any</span></span>
<span id="cb7-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># coefficients in the entering column are zero</span></span>
<span id="cb7-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(cd_entering_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set the numerator to -1</span></span>
<span id="cb7-11">    cd_first_column[cd_entering_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># now replace the 0 in the denominators with 1</span></span>
<span id="cb7-13">    cd_entering_column[cd_entering_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This ensures that such columns are not considered</span></span>
<span id="cb7-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when it comes time to decide the leaving variable</span></span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Also note that after this step</span></span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all entries in cd_entering_column==0 will be False</span></span>
<span id="cb7-18"></span>
<span id="cb7-19">  leaving_row_candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cd_first_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cd_entering_column</span>
<span id="cb7-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(leaving_row_candidates)</span></span>
<span id="cb7-21"></span>
<span id="cb7-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify the leaving variable</span></span>
<span id="cb7-23">  leaving_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>( leaving_row_candidates ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace candidates violating non-negativity by infinity</span></span>
<span id="cb7-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so these will be ignored when choosing the leaving variable</span></span>
<span id="cb7-27">    leaving_row_candidates[ leaving_row_candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.inf</span>
<span id="cb7-28"></span>
<span id="cb7-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the row that leaves from the dictionary</span></span>
<span id="cb7-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is the one that will impose the strictest</span></span>
<span id="cb7-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constraint on the requirement that the</span></span>
<span id="cb7-32">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable remain non-negative</span></span>
<span id="cb7-33">  leaving_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin( leaving_row_candidates )</span>
<span id="cb7-34"></span>
<span id="cb7-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(leaving_row)</span></span>
<span id="cb7-36">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> leaving_row</span></code></pre></div>
</details>
</div>
</section>
<section id="construct-the-system-for-the-next-iteration" class="level2">
<h2 class="anchored" data-anchor-id="construct-the-system-for-the-next-iteration">Construct the system for the next iteration</h2>
<div id="cell-16" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_pivot_row(chvatal_dict, leaving_row, entering_column):</span>
<span id="cb8-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Need to find the coefficient of the non-basic variable</span></span>
<span id="cb8-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># that is going to be entering the basis.</span></span>
<span id="cb8-4">  pivot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> chvatal_dict[leaving_row, entering_column]</span>
<span id="cb8-5">  </span>
<span id="cb8-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the pivot_array expresses the newly arrived </span></span>
<span id="cb8-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># basic variable in terms of the non-basic variables</span></span>
<span id="cb8-8">  next_pivot_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chvatal_dict[leaving_row,:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pivot</span>
<span id="cb8-9">  </span>
<span id="cb8-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the coefficent of the newly arrived non-basic variable</span></span>
<span id="cb8-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it is moving from the LHS to the RHS hence the -1</span></span>
<span id="cb8-12">  next_pivot_row[entering_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pivot</span>
<span id="cb8-13">  </span>
<span id="cb8-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pivot, next_pivot_row   </span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_next_dictionary(chvatal_dict, leaving_row, entering_column,</span>
<span id="cb8-17">                           row_lookup, column_lookup):</span>
<span id="cb8-18">  _, pivot_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_pivot_row(chvatal_dict,</span>
<span id="cb8-19">                                 leaving_row,</span>
<span id="cb8-20">                                 entering_column)</span>
<span id="cb8-21"></span>
<span id="cb8-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the remaining rows in the dictionary</span></span>
<span id="cb8-23">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># so they are now expressed in terms of the new arrived</span></span>
<span id="cb8-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># non-basic variable.</span></span>
<span id="cb8-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># m+1 since we also need to update the row for z</span></span>
<span id="cb8-26">  cd_candidate_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> leaving_row:</span>
<span id="cb8-29">      cd_candidate_rows.append( pivot_array )</span>
<span id="cb8-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-31">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the coefficient of the leaving non-basic variable</span></span>
<span id="cb8-32">      multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chvatal_dict[j, entering_column]</span>
<span id="cb8-33">      </span>
<span id="cb8-34">      multiplier_times_pivot_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pivot_array</span>
<span id="cb8-35">      updated_row_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiplier_times_pivot_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  chvatal_dict[j, : ]</span>
<span id="cb8-36">      </span>
<span id="cb8-37">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correct the multiplier for the newly entered non-basic variable</span></span>
<span id="cb8-38">      updated_row_array[entering_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiplier_times_pivot_array[entering_column]</span>
<span id="cb8-39">      </span>
<span id="cb8-40">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(updated_row_array)</span></span>
<span id="cb8-41">      cd_candidate_rows.append( updated_row_array )</span>
<span id="cb8-42"></span>
<span id="cb8-43">  cd_next_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack( cd_candidate_rows )</span>
<span id="cb8-44"></span>
<span id="cb8-45">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assemble the updated list of basic variables</span></span>
<span id="cb8-46">  basic_next_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row_lookup.copy()</span>
<span id="cb8-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the leaving row with the entering new basic variable</span></span>
<span id="cb8-48">  basic_next_it[leaving_row] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column_lookup[entering_column]</span>
<span id="cb8-49"></span>
<span id="cb8-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assemble the updated list of nonbasic variables</span></span>
<span id="cb8-51">  nonbasic_next_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> column_lookup.copy()</span>
<span id="cb8-52">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update the entering column with the new nonbasic variable</span></span>
<span id="cb8-53">  nonbasic_next_it[entering_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row_lookup[leaving_row]</span>
<span id="cb8-54"></span>
<span id="cb8-55">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(cd_next_it)</span></span>
<span id="cb8-56"></span>
<span id="cb8-57">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> basic_next_it, nonbasic_next_it, cd_next_it</span></code></pre></div>
</details>
</div>
</section>
<section id="helper-functions" class="level2">
<h2 class="anchored" data-anchor-id="helper-functions">Helper functions</h2>
<div id="cell-18" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_row_variable_names(row_lookup):</span>
<span id="cb9-2">  row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row_lookup:</span>
<span id="cb9-4">    row_names[row_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_id_to_name[row_lookup[row_index]]</span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f'row_index {row_index} variable {variable_to_name[row_lookup[row_index]]}')</span></span>
<span id="cb9-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last row is for z </span></span>
<span id="cb9-7">  row_names[Z_ROW] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z'</span></span>
<span id="cb9-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row_names</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_column_variable_names(col_lookup):</span>
<span id="cb9-11">  col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-12"></span>
<span id="cb9-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The first column contains RHSs</span></span>
<span id="cb9-14">  col_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RHS'</span></span>
<span id="cb9-15">  </span>
<span id="cb9-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> col_lookup:</span>
<span id="cb9-17">    col_names[col_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_id_to_name[col_lookup[col_index]]</span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f'column_index {col_index} variable {variable_to_name[col_lookup[col_index]]}')</span></span>
<span id="cb9-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> col_names</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_chvatal_df(cd, row_lookup, col_lookup):</span>
<span id="cb9-22">  row_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_row_variable_names(row_lookup)</span>
<span id="cb9-23">  col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_column_variable_names(col_lookup)</span>
<span id="cb9-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame(cd,</span>
<span id="cb9-25">             columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[col_names[k] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(col_names)],</span>
<span id="cb9-26">             index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [row_names[k] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row_names)])</span>
<span id="cb9-27"></span>
<span id="cb9-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the keys of nonbasic_next_iteration in the sorted order of values</span></span>
<span id="cb9-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># values here are nonbasic variables. Each key is a column index </span></span>
<span id="cb9-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordered_columns = sorted(col_lookup, </span></span>
<span id="cb9-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                       key=col_lookup.__getitem__)</span></span></code></pre></div>
</details>
</div>
</section>
<section id="the-implementation" class="level2">
<h2 class="anchored" data-anchor-id="the-implementation">The implementation</h2>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">next_iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iteration counter</span></span>
<span id="cb10-4">it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">variable_id_to_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m),[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'x_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m)]))</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable ids that will take on zero values</span></span>
<span id="cb10-9">nonbasic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)]</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># variable ids that will take on nonzero values</span></span>
<span id="cb10-12">basic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>m)]</span>
<span id="cb10-13"></span>
<span id="cb10-14">row_lookup_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># row_lookup_it[i] is a dictionary telling us the id of the </span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decision variable corresponding to any row in the Chvátal </span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dictionary for iteration i</span></span>
<span id="cb10-18">row_lookup_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>( <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(m), basic) )</span>
<span id="cb10-19"></span>
<span id="cb10-20">col_lookup_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># col_lookup_it[i] is a dictionary telling us the id of the </span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decision variable corresponding to any column (strictly greater than 0) </span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># in the Chvátal dictionary for iteration i</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We ignore column 0 since we use it to store the right hand sides.</span></span>
<span id="cb10-25">col_lookup_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>( <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), nonbasic) )</span>
<span id="cb10-26"></span>
<span id="cb10-27">z_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-28"></span>
<span id="cb10-29">cd_it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb10-30">cd_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack( [ np.hstack([b, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A]), np.vstack( [ [z_star] , c ]).T ] )</span>
<span id="cb10-31"></span>
<span id="cb10-32">cd_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_chvatal_df(cd_it[it],</span>
<span id="cb10-33">                       row_lookup_it[it],</span>
<span id="cb10-34">                       col_lookup_it[it])</span>
<span id="cb10-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>it<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Chvátal dictionary </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cd_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-36"></span>
<span id="cb10-37"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>( cd_it[it][ FIRST_ROW : ALL_BUT_LAST_ROW, FIRST_COLUMN ] ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-38">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This means that some basic variable takes on a negative</span></span>
<span id="cb10-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value in the starting solution.</span></span>
<span id="cb10-40">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stopping. Infeasible starting solution.'</span>)</span>
<span id="cb10-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb10-42">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> next_iteration:</span>
<span id="cb10-43">    entering_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_entering_column(cd_it[it])</span>
<span id="cb10-44"></span>
<span id="cb10-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> entering_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb10-46">      next_iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb10-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb10-48">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the identifier for the variable that corresponds to</span></span>
<span id="cb10-49">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the entering column</span></span>
<span id="cb10-50">      entering_var_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_lookup_it[it][entering_column]</span>
<span id="cb10-51">      entering_var_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_id_to_name[entering_var_id]</span>
<span id="cb10-52">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' Entering variable </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>entering_var_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-53"></span>
<span id="cb10-54">      leaving_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_leaving_row(cd_it[it], entering_column)</span>
<span id="cb10-55"></span>
<span id="cb10-56">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the identifier for the variable that corresponds to</span></span>
<span id="cb10-57">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the leaving row</span></span>
<span id="cb10-58">      leaving_var_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row_lookup_it[it][leaving_row]</span>
<span id="cb10-59">      leaving_var_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> variable_id_to_name[leaving_var_id]</span>
<span id="cb10-60">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f' Leaving variable </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>leaving_var_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-61"></span>
<span id="cb10-62">      basic, nonbasic, cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_next_dictionary(cd_it[it],</span>
<span id="cb10-63">                                                leaving_row,</span>
<span id="cb10-64">                                                entering_column,</span>
<span id="cb10-65">                                                row_lookup_it[it],</span>
<span id="cb10-66">                                                col_lookup_it[it])</span>
<span id="cb10-67">      </span>
<span id="cb10-68">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb10-69">      it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-70"></span>
<span id="cb10-71">      row_lookup_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> basic</span>
<span id="cb10-72">      col_lookup_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nonbasic</span>
<span id="cb10-73">      cd_it[it] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cd</span>
<span id="cb10-74"></span>
<span id="cb10-75">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pretty print the updated dictionary</span></span>
<span id="cb10-76">      cd_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_chvatal_df(cd,</span>
<span id="cb10-77">                            basic,</span>
<span id="cb10-78">                            nonbasic)</span>
<span id="cb10-79">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Iteration </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>it<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Chvátal dictionary </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cd_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Iteration <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>
 Chvátal dictionary 
      RHS  x_1  x_2  x_3
x_4    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-3</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span>
x_5   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">11</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-4</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2</span>
x_6    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">8</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-3</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-4</span>   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2</span>
z      <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">4</span>    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"> Entering variable x_1
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"> Leaving variable x_4

</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Iteration <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span>
 Chvátal dictionary 
       RHS  x_4  x_2  x_3
x_1   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5</span>
x_5   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.0</span>
x_6   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.5</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.5</span>
z    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">12.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2.5</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-3.5</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.5</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"> Entering variable x_3
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"> Leaving variable x_6

</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">Iteration <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>
 Chvátal dictionary 
       RHS  x_4  x_2  x_6
x_1   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.0</span>
x_5   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">5.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-0.0</span>
x_3   <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3.0</span>  <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-2.0</span>
z    <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">13.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-3.0</span> <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">-1.0</span>
</pre>
</div>
</div>
</section>
<section id="next-steps" class="level1">
<h1>Next steps</h1>
<p>We will continue to expand on this basic implementation (and rectify it’s many deficiences) in future posts.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-chvatal1983linear" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">V. Chvátal, <em>Linear programming</em>. Macmillan, 1983.</div>
</div>
</div></section></div> ]]></description>
  <category>math-program</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-12-11-chvatal-chapter-2-simplex-implementation.html</guid>
  <pubDate>Sat, 11 Dec 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Chvátal Chapter 1 Problem 5</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-12-08-chvatal-chapter-1-problem-5.html</link>
  <description><![CDATA[ 





<section id="problem-statement" class="level1">
<h1>Problem Statement</h1>
<p>From (page 10 Chapter 1) <span class="citation" data-cites="chvatal1983linear">[1]</span>.</p>
Problem 1.7
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/chvatal_1dot7.png?raw=1" width="300"></p>
</div>
<p>Prove or disprove: If Problem 1.7 above is unbounded, then there is a subscript <img src="https://latex.codecogs.com/png.latex?k"> such that the Problem 1.5 below is unbounded.</p>
Problem 1.5
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/chvatal_chapter1_problem5.png?raw=1" width="300"></p>
</div>
</section>
<section id="proof" class="level1">
<h1>Proof</h1>
<p>Assume without loss of generality that the objective function coefficients <img src="https://latex.codecogs.com/png.latex?c_%7Bj%7D"> of all decision variables, <img src="https://latex.codecogs.com/png.latex?x_%7Bj%7D">, in Problem 1.7 are non-zero.</p>
<p>We see that Problem 1.5 defines <img src="https://latex.codecogs.com/png.latex?n"> sub-problems, one for each decision variable <img src="https://latex.codecogs.com/png.latex?x_k"> in Problem 1.7. Now, suppose there is no subscript <img src="https://latex.codecogs.com/png.latex?k"> for which the sub-problems are unbounded. This means we can identify constants <img src="https://latex.codecogs.com/png.latex?M_%7B1%7D,%5Cldots,M_%7Bn%7D"> which are the maximum objective function values for each sub-problem in Problem 1.5. So, for example, <img src="https://latex.codecogs.com/png.latex?M_1"> is the largest value <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> can take while still staying feasible.</p>
<p>Next, let <img src="https://latex.codecogs.com/png.latex?I_%7Bc_%7Bj%7D%20%5Cgt%200%7D"> be an indicator function that tells us with a one or a zero whether the coefficient of decision variable <img src="https://latex.codecogs.com/png.latex?x_%7Bj%7D"> in the objective function of Problem 1.7 is strictly positive.</p>
<p>Now we claim that <img src="https://latex.codecogs.com/png.latex?M=%5Csum_%7Bj=1%7D%5E%7Bn%7Dc_%7Bj%7DI_%7Bc_%7Bj%7D%20%5Cgt%200%7DM_%7Bj%7D"> is the greatest upper bound on the objective function of Problem 1.7.</p>
<p>It is possible that if some objective function coefficient <img src="https://latex.codecogs.com/png.latex?c_%7Bl%7D"> is negative that a more accurate upper bound can be obtained by solving a minimization version of Problem 1.5. Solving this minimization would give us the smallest <img src="https://latex.codecogs.com/png.latex?x_%7Bl%7D"> for which the problem remains feasible. But since <img src="https://latex.codecogs.com/png.latex?c_%7Bl%7D%20%5Clt%200"> having <img src="https://latex.codecogs.com/png.latex?x_%7Bl%7D%20%3E0"> will only serve to reduce <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bj=1%7D%5E%7Bn%7Dc_%7Bj%7Dx_%7Bj%7D">.</p>
<p>What this means is that <img src="https://latex.codecogs.com/png.latex?M"> is the greatest upper bound on the objective function of Problem 1.7.</p>
<p>However, the existence of a finite upper bound contradicts the unboundedness of Problem 1.7 since for an unbounded problem we can always find a feasible solution such that <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bj=1%7D%5E%7Bn%7Dc_%7Bj%7Dx_%7Bj%7D%20%5Cgt%20M"> for any value of <img src="https://latex.codecogs.com/png.latex?M">.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-chvatal1983linear" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">V. Chvátal, <em>Linear programming</em>. Macmillan, 1983.</div>
</div>
</div></section></div> ]]></description>
  <category>math-program</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-12-08-chvatal-chapter-1-problem-5.html</guid>
  <pubDate>Wed, 08 Dec 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Image Embeddings with fastai</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings.html</link>
  <description><![CDATA[ 





<p>We start off by following Chapter 18 of <span class="citation" data-cites="fastbook2020">[1]</span>.</p>
<div id="cell-3" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</details>
</div>
<p>Load the pets dataset. We have a cat image if the filename starts with an uppercase letter otherwise it is a dog image. Thus, an output of False (or 0) corresponds to a dog image while True (or 1) corresponds to a cat image.</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.PETS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_cat(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].isupper()</span>
<span id="cb2-3"></span>
<span id="cb2-4">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, reproducible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-5">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb2-6">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,</span>
<span id="cb2-7">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb2-8"></span>
<span id="cb2-9">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span></code></pre></div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="811712512" class="" max="811706944" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [811712512/811706944 00:11&lt;00:00]
    </div>
    
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet34-b627a593.pth" to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0e5735e59d5b434483abcfecfb5d2670","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)</code></pre>
</div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.139079</td>
<td>0.015485</td>
<td>0.004060</td>
<td>01:43</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.055484</td>
<td>0.008766</td>
<td>0.002030</td>
<td>02:21</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Download a sample image for which we will extract activations from the model.</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb6-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>cd sample_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> wget https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>wallup.net<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>uploads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2016</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18662</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Nikon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>camera<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>animals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>biting.jpg</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>--2021-10-25 18:30:27--  https://wallup.net/wp-content/uploads/2016/01/18662-cat-Nikon-camera-animals-biting.jpg
Resolving wallup.net (wallup.net)... 104.21.67.12, 172.67.167.152, 2606:4700:3030::6815:430c, ...
Connecting to wallup.net (wallup.net)|104.21.67.12|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [image/jpg]
Saving to: ‘18662-cat-Nikon-camera-animals-biting.jpg’

18662-cat-Nikon-cam     [   &lt;=&gt;              ] 661.12K  1.48MB/s    in 0.4s    

2021-10-25 18:30:28 (1.48 MB/s) - ‘18662-cat-Nikon-camera-animals-biting.jpg’ saved [676983]
</code></pre>
</div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PILImage.create(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample_data/18662-cat-Nikon-camera-animals-biting.jpg'</span>)</span>
<span id="cb8-2">x, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> first(dls.test_dl([img]))</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">x.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([1, 3, 224, 224])</code></pre>
</div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Hook():</span>
<span id="cb11-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hook_func(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, m, i, o): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stored <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o.detach().clone()</span></code></pre></div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">hook_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Hook()</span>
<span id="cb12-2">hook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].register_forward_hook(hook_output.hook_func)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad(): output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()(x)</span>
<span id="cb12-5"></span>
<span id="cb12-6">act <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook_output.stored[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-7"></span>
<span id="cb12-8">act.shape, output.shape, learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([512, 7, 7]), torch.Size([1, 2]), torch.Size([2, 512]))</code></pre>
</div>
</div>
<p>The output from the final linear layer is as follows:</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">output</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-11.0284,  10.0199]], device='cuda:0')</code></pre>
</div>
</div>
<p>Pass these through a softmax to get the predictions.</p>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">F.softmax(output, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[7.2253e-10, 1.0000e+00]], device='cuda:0')</code></pre>
</div>
</div>
<p>Our model is very confident that this is a cat image. Recall that <img src="https://latex.codecogs.com/png.latex?0"> encodes the class dog while <img src="https://latex.codecogs.com/png.latex?1"> encodes cat.</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">cam_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.einsum(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ck,kij-&gt;cij'</span>, learn.model[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].weight, act)</span>
<span id="cb18-2">cam_map.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 7, 7])</code></pre>
</div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb20-2">cam_map</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[[ 2.4612,  2.2954,  2.6431,  2.6772,  2.2160,  0.7992,  0.1278],
         [ 2.4558,  2.4668,  2.6862,  2.7808,  3.5802,  3.8468,  2.2116],
         [ 2.4177,  1.4307,  0.6136,  1.9688,  3.1065,  4.2844,  4.0371],
         [ 3.1196,  2.8230,  1.0616,  1.4165,  4.1816,  7.1037,  7.4767],
         [ 1.6073,  2.0172,  1.8519,  3.1966,  5.6278,  6.5893,  5.9116],
         [ 3.6521,  5.5285,  4.9569,  5.3924,  5.6237,  5.3038,  4.2787],
         [ 4.7321,  5.9305,  4.7503,  4.2259,  4.8412,  3.8734,  1.8111]],

        [[-1.7039, -0.6877, -0.9466, -1.1840, -1.4696, -1.5489, -1.1791],
         [-2.1570, -2.2049, -2.1784, -2.7038, -1.0871, -0.4607, -1.5684],
         [-4.5787, -4.8054, -2.9991, -2.3972,  1.1643,  3.3241,  1.6656],
         [-2.7080, -2.8545, -1.7021, -1.4661,  0.9079,  3.0881,  2.8714],
         [-0.1489,  1.2784,  0.8865,  0.2769,  0.3615,  0.9657,  0.2920],
         [ 1.1236,  2.5738,  0.8960,  0.1405,  1.0975,  0.5311,  0.6032],
         [ 2.1957,  2.4272,  0.7434, -1.2605,  0.4661, -0.0410,  0.7805]]],
       device='cuda:0', grad_fn=&lt;ViewBackward&gt;)</code></pre>
</div>
</div>
<p>From the book, “<em>note that we need to decode the input x since it’s been normalized by the DataLoader, and we need to cast to TensorImage since at the time this book is written PyTorch does not maintain types when indexing</em>”.</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb22-2">decoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls.train.decode((x,))</span>
<span id="cb22-3">decoded</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(TensorImage([[[[219, 220, 221,  ...,   8,   8,   7],
           [220, 220, 221,  ...,   8,  10,  10],
           [222, 221, 221,  ...,   9,  10,  10],
           ...,
           [ 14,  29,  23,  ...,  60,  54,  60],
           [  4,  20,  36,  ...,  42,  44,  49],
           [  4,   7,  29,  ...,  43,  44,  43]],
 
          [[215, 216, 217,  ...,   7,   6,   6],
           [216, 216, 217,  ...,   6,   7,   7],
           [218, 217, 217,  ...,   6,   7,   7],
           ...,
           [ 11,  24,  14,  ...,  37,  30,  35],
           [  2,  14,  27,  ...,  26,  27,  29],
           [  1,   4,  22,  ...,  28,  29,  27]],
 
          [[214, 215, 215,  ...,   2,   1,   1],
           [214, 213, 214,  ...,   1,   0,   0],
           [215, 214, 214,  ...,   1,   0,   0],
           ...,
           [  4,  12,   7,  ...,  14,  12,  15],
           [  0,   6,  17,  ...,   6,  11,  11],
           [  0,   2,  15,  ...,  10,  10,   8]]]]),)</code></pre>
</div>
</div>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">decoded[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape, decoded[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([1, 3, 224, 224]), torch.Size([3, 224, 224]))</code></pre>
</div>
</div>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_image(the_map, the_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>):</span>
<span id="cb26-2">  x_dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorImage(decoded[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb26-3">  _,ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb26-4">  x_dec.show(ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb26-5">  ax.imshow(the_map.detach().cpu(), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>the_alpha, extent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb26-6">            interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'magma'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</div>
<p>First look at the areas of the picture that influence the network to decide that something may be a dog image. Bright yellow correspond to high activations while areas in purple correspond to low activations</p>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">plot_image(cam_map[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The network appears to be focussing on the mouth.</p>
<p>Next look at the areas of the picture that influence the network to decide that something is a cat image.</p>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">plot_image(cam_map[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The network appears to be focussing on the entire face in the decision to label this as a cat image.</p>
<p>Compare this to a random activations map where there is no singular area of focus.</p>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb29-2">rand_cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:0'</span>)</span>
<span id="cb29-3">rand_cmap</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-0.7637, -1.3432,  1.1882, -0.3386, -0.6900, -0.6698, -0.5695],
        [ 1.1075, -1.1094, -0.2857,  1.3275,  0.8616,  1.9981,  0.8572],
        [-0.3191, -0.8256,  0.6985,  0.1862,  0.1230, -1.1539, -0.0230],
        [-0.7334, -0.8848,  0.1476, -0.8934,  0.6844,  0.4076, -0.7339],
        [ 1.0249,  0.6300, -0.1655,  0.6776,  0.8610, -0.9098,  0.2662],
        [-0.1487,  0.7496,  1.2978,  0.9887, -0.6177,  0.2148, -0.4154],
        [-0.6950, -0.6311, -0.7638,  0.0544, -1.0707, -0.4667, -1.0079]],
       device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-34" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">plot_image(rand_cmap)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s create some fake maps just to get a sense for how this overlay of the map over the cat image works. The alpha determines the extent to which the map dominates the original image. Use alpha = 1 to just display the map by itself (here the cat image is not seen at all).</p>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">my_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb32-2">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb32-3">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb32-4">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb32-5">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb32-6">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb32-7">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]],</span>
<span id="cb32-8">       device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:0'</span>)</span></code></pre></div>
</div>
<div id="cell-37" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">plot_image(my_map, the_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So the row and column of ones show up as yellow. Next reduce the value of alpha so the cat image can also be seen.</p>
<div id="cell-39" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">plot_image(my_map, the_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In the following map we put weight mainly on the left half.</p>
<div id="cell-41" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">my_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-2">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-3">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-4">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-5">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-6">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb35-7">        [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]],</span>
<span id="cb35-8">       device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda:0'</span>)</span>
<span id="cb35-9"></span>
<span id="cb35-10">plot_image(my_map, the_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally remove the hook so it doesn’t leak any memory.</p>
<div id="cell-43" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">hook.remove()</span></code></pre></div>
</div>




<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-10-25-image-embeddings.html</guid>
  <pubDate>Mon, 25 Oct 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Reproducible runs with fastai</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-10-23-fastai-reproducibility-note.html</link>
  <description><![CDATA[ 





<section id="the-problem" class="level1">
<h1>The Problem</h1>
<p>Reproducibility can end up being important when trying to isolate the impact of the changes that happen as we tweak models.</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>Grab the pets dataset.</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.PETS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_cat(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].isupper()</span></code></pre></div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="811712512" class="" max="811706944" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [811712512/811706944 00:09&lt;00:00]
    </div>
    
</div>
</div>
<p>Create a data loader passing in a seed. Next create a learner and fine tune the resnet34 model for 1 epoch.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb3-2">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,</span>
<span id="cb3-3">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb3-4"></span>
<span id="cb3-5">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb3-6">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://download.pytorch.org/models/resnet34-b627a593.pth" to /root/.cache/torch/hub/checkpoints/resnet34-b627a593.pth</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9ac014902f7247a98156f971cce9abf6","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)</code></pre>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.129521</td>
<td>0.022127</td>
<td>0.007442</td>
<td>01:10</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.056711</td>
<td>0.023975</td>
<td>0.010149</td>
<td>01:18</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>We end up with an error rate of <img src="https://latex.codecogs.com/png.latex?0.010149">.</p>
<p>Let’s do another round where we recreate the dataloaders, the learner and fine tune again for a single epoch. Since we have used the same seed we will get the same final result, right?</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb6-2">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,</span>
<span id="cb6-3">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb6-4"></span>
<span id="cb6-5">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb6-6">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.140996</td>
<td>0.024327</td>
<td>0.007442</td>
<td>01:07</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.058567</td>
<td>0.012324</td>
<td>0.004736</td>
<td>01:18</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Wrong!</p>
<p>The train_loss, valid_loss and the error rate at the end of the two rounds are different.</p>
</section>
<section id="solution" class="level1">
<h1>Solution</h1>
<p>Use fastai’s <a href="https://github.com/fastai/fastai/blob/d78d7f8cf654d8c0b3dd2879483bfab7e700ccd8/fastai/torch_core.py#L140">set_seed</a> function.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, reproducible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb7-4">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb7-5">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb7-6"></span>
<span id="cb7-7">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb7-8">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.151476</td>
<td>0.018651</td>
<td>0.006766</td>
<td>01:42</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.042918</td>
<td>0.015299</td>
<td>0.006766</td>
<td>02:20</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Observe that I did not pass in the seed to the ImageDataLoaders.from_name_func call.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, reproducible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb8-4">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb8-5">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb8-6"></span>
<span id="cb8-7">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb8-8">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.151476</td>
<td>0.018651</td>
<td>0.006766</td>
<td>01:42</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.042918</td>
<td>0.015299</td>
<td>0.006766</td>
<td>02:20</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Bingo! Both runs end up with the same train_loss, valid_loss and the error rate.</p>
<section id="can-we-omit-the-call-to-set_seed-in-a-subsequent-run" class="level2">
<h2 class="anchored" data-anchor-id="can-we-omit-the-call-to-set_seed-in-a-subsequent-run">Can we omit the call to set_seed in a subsequent run?</h2>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb9-2">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb9-3">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb9-4"></span>
<span id="cb9-5">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb9-6">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.161395</td>
<td>0.019973</td>
<td>0.006766</td>
<td>01:42</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.070191</td>
<td>0.034742</td>
<td>0.012855</td>
<td>02:20</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Nice try but no.</p>
</section>
<section id="can-we-omit-the-reproducibletrue-in-the-call-to-set_seed" class="level2">
<h2 class="anchored" data-anchor-id="can-we-omit-the-reproducibletrue-in-the-call-to-set_seed">Can we omit the reproducible=True in the call to set_seed?</h2>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb10-4">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb10-5">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb10-6"></span>
<span id="cb10-7">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb10-8">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.151476</td>
<td>0.018651</td>
<td>0.006766</td>
<td>01:43</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.042918</td>
<td>0.015299</td>
<td>0.006766</td>
<td>02:21</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)</span>
<span id="cb11-2"></span>
<span id="cb11-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDataLoaders.from_name_func(</span>
<span id="cb11-4">    path, get_image_files(path), valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb11-5">    label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_cat, item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>))</span>
<span id="cb11-6"></span>
<span id="cb11-7">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb11-8">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.151476</td>
<td>0.018651</td>
<td>0.006766</td>
<td>01:43</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.042918</td>
<td>0.015299</td>
<td>0.006766</td>
<td>02:21</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Seems like we can 🤷 but I would keep it since the code of the set_seed function suggests it is being used for cudnn.</p>
</section>
<section id="can-we-avoid-recreating-the-dataloaders-from-scratch" class="level2">
<h2 class="anchored" data-anchor-id="can-we-avoid-recreating-the-dataloaders-from-scratch">Can we avoid recreating the dataloaders from scratch?</h2>
<p>Spoiler alert: No!</p>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, reproducible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-2"></span>
<span id="cb12-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet34, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb12-4">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.161448</td>
<td>0.013740</td>
<td>0.004060</td>
<td>01:42</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.048693</td>
<td>0.012253</td>
<td>0.003383</td>
<td>02:20</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="bottomline" class="level1">
<h1>Bottomline</h1>
<p>Use the set_seed function (pass in reproducible=True) and remember that any steps consuming random numbers from the pseudo random generators (such as using the learning rate finder) better be present otherwise you will end up seeing a different result.</p>


</section>

 ]]></description>
  <category>fastai</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-10-23-fastai-reproducibility-note.html</guid>
  <pubDate>Sat, 23 Oct 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Quadratic Curve Fit with Gradient Descent</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-08-27-quadratic-curve-fit-with-gradient-descent.html</link>
  <description><![CDATA[ 





<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Someone walks up to you and hands over a simple data set of x and y coordinates. You eyeball it and think, “hmm seems like we can fit a quadratic function to this”. This post walks through how this can be done using gradient descent (and follows the treatment in Chapter 4 of <span class="citation" data-cites="fastbook2020">[1]</span>).</p>
<div id="hourly-charge" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.torch_imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.torch_core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div id="chemical-basis" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">num_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,num_points).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-3">x</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.,
        14., 15., 16., 17., 18., 19.])</code></pre>
</div>
</div>
<div id="informed-helen" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span></span>
<span id="cb4-2">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span></span>
<span id="cb4-3">noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.randn(num_points)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>e)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise</span>
<span id="cb4-5">y, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>e, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([68.6996, 53.2421, 43.1072, 35.0240, 18.7474, 20.2123,  4.7285,  7.6421,
          0.6463, -0.4163, -3.0223,  5.8641,  4.2702, 12.0058, 16.8083, 20.2149,
         32.4927, 41.8890, 59.8105, 63.5625]),
 -14.25,
 67.6875)</code></pre>
</div>
</div>
<p>Since <img src="https://latex.codecogs.com/png.latex?d(x-e)%5E%7B2%7D%20=%20d*(x%5E%7B2%7D%20-2ex%20+%20e%5E%7B2%7D)%20=%20dx%5E%7B2%7D%20-%202dex%20+%20d*e%5E%7B2%7D"> we expect to see the parameters <img src="https://latex.codecogs.com/png.latex?d">, <img src="https://latex.codecogs.com/png.latex?-2*d*e"> and <img src="https://latex.codecogs.com/png.latex?%5Capprox%201+d*e%5E%7B2%7D"> being uncovered. The last term is because we are adding a <img src="https://latex.codecogs.com/png.latex?1"> in the noise.</p>
<p>The data then looks like the following</p>
<div id="pharmaceutical-forwarding" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plt.scatter(x,y)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-27-Quadratic-Curve-Fit-With-Gradient-Descent_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="recipe" class="level1">
<h1>Recipe</h1>
<section id="initialize-the-parameters" class="level2">
<h2 class="anchored" data-anchor-id="initialize-the-parameters">Initialize the parameters</h2>
<p>We need three parameters to describe a quadratic <img src="https://latex.codecogs.com/png.latex?ax%5E%7B2%7D+bx%20+c"></p>
<div id="first-startup" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).requires_grad_()</span></code></pre></div>
</div>
</section>
<section id="calculate-the-predictions" class="level2">
<h2 class="anchored" data-anchor-id="calculate-the-predictions">Calculate the predictions</h2>
<p>We create a function where we can plug in our input features (<img src="https://latex.codecogs.com/png.latex?x"> coordinate values in this case) and get a prediction for the <img src="https://latex.codecogs.com/png.latex?y">. The function below will do just that.</p>
<div id="forced-maryland" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x, params):</span>
<span id="cb8-2">    a,b,c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c</span></code></pre></div>
</div>
<p>The predictions, yhat, can then be obtained using</p>
<div id="separated-effort" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(x, params)</span>
<span id="cb9-2">yhat</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([-1.0763e-01, -9.4094e-01, -4.0345e+00, -9.3884e+00, -1.7002e+01,
        -2.6877e+01, -3.9011e+01, -5.3406e+01, -7.0062e+01, -8.8977e+01,
        -1.1015e+02, -1.3359e+02, -1.5928e+02, -1.8724e+02, -2.1746e+02,
        -2.4994e+02, -2.8467e+02, -3.2167e+02, -3.6093e+02, -4.0245e+02],
       grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
<p>Compare predictions to the data</p>
<div id="young-rehabilitation" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plt.scatter(x, y)</span>
<span id="cb11-2">plt.scatter(x, to_np(yhat), color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-27-Quadratic-Curve-Fit-With-Gradient-Descent_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="calculate-the-loss" class="level2">
<h2 class="anchored" data-anchor-id="calculate-the-loss">Calculate the loss</h2>
<p>We will use mean squared error for this.</p>
<div id="prompt-mitchell" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mse(yhat, y):</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ((yhat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span></code></pre></div>
</div>
<div id="tracked-fundamentals" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(yhat, y)</span>
<span id="cb13-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(44301.6484, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="calculate-the-gradients" class="level2">
<h2 class="anchored" data-anchor-id="calculate-the-gradients">Calculate the gradients</h2>
<div id="ranking-valuation" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">loss.backward()</span></code></pre></div>
</div>
<div id="julian-carolina" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">params.grad</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([-70097.9297,  -4488.5391,   -324.2715])</code></pre>
</div>
</div>
</section>
<section id="take-a-gradient-descent-step" class="level2">
<h2 class="anchored" data-anchor-id="take-a-gradient-descent-step">Take a gradient descent step</h2>
<p>Set a learning rate, lr, and then do a step like so</p>
<div id="artistic-internet" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span></span>
<span id="cb18-2">params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>params.grad.data</span>
<span id="cb18-3">params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<p>Get a new prediction and plot again.</p>
<div id="regular-submission" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plt.scatter(x, y)</span>
<span id="cb19-2">plt.scatter(x, to_np(f(x,params)), color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-27-Quadratic-Curve-Fit-With-Gradient-Descent_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="all-together-now" class="level1">
<h1>All together now</h1>
<p>Not much changed when we took a single gradient step so we will want to do this for multiple iterations. Before doing that we make a simple function, called <code>step</code>, that will apply all of the ingredients of the recipe.</p>
<div id="frequent-remedy" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(params, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, prn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb20-2">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f(x, params)</span>
<span id="cb20-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(yhat, y)</span>
<span id="cb20-4">    </span>
<span id="cb20-5">    loss.backward()</span>
<span id="cb20-6">    </span>
<span id="cb20-7">    params.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>params.grad.data</span>
<span id="cb20-8">    params.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb20-9">    </span>
<span id="cb20-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prn: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss.item(), params)</span>
<span id="cb20-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> yhat</span></code></pre></div>
</div>
<p>And then another function that will call the <code>step</code> function as many times as we desire.</p>
<div id="imposed-color" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> learner(num_iterations, record_interval, lr):</span>
<span id="cb21-2">    preds_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-3">    params_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iterations):</span>
<span id="cb21-5">        prn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> record_interval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-6">        preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> step(params, lr, prn)</span>
<span id="cb21-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prn: </span>
<span id="cb21-8">            preds_list.append(preds)</span>
<span id="cb21-9">            params_list.append(params.detach().clone())</span>
<span id="cb21-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> preds_list, params_list</span></code></pre></div>
</div>
<p>We will run <img src="https://latex.codecogs.com/png.latex?1,000,000"> iterations and record results every <img src="https://latex.codecogs.com/png.latex?100,000"> iterations. The first item is the loss and the second are the parameters <img src="https://latex.codecogs.com/png.latex?a,b"> and <img src="https://latex.codecogs.com/png.latex?c"> that define the quadratic we want to uncover/recover.</p>
<div id="healthy-jerusalem" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">preds_list, params_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learner(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>8900.236328125 tensor([-0.1242,  0.3612, -0.1029], requires_grad=True)
382.91522216796875 tensor([ 0.2762, -3.2625, 15.3551], requires_grad=True)
231.8618621826172 tensor([ 0.3839, -5.7625, 27.3517], requires_grad=True)
141.83514404296875 tensor([ 0.4671, -7.6927, 36.6108], requires_grad=True)
88.12383270263672 tensor([ 0.5312, -9.1819, 43.7649], requires_grad=True)
56.144981384277344 tensor([  0.5809, -10.3335,  49.2795], requires_grad=True)
37.080955505371094 tensor([  0.6190, -11.2180,  53.5353], requires_grad=True)
25.659448623657227 tensor([  0.6487, -11.9067,  56.8358], requires_grad=True)
18.909128189086914 tensor([  0.6714, -12.4334,  59.3597], requires_grad=True)
14.805198669433594 tensor([  0.6891, -12.8450,  61.3470], requires_grad=True)</code></pre>
</div>
</div>
<p>Next we plot what our best estimate of the quadratic function looked like at every <img src="https://latex.codecogs.com/png.latex?100,000"> iterations.</p>
<div id="immune-variety" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">num_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(preds_list)</span>
<span id="cb24-2">_, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_preds, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb24-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_preds):</span>
<span id="cb24-4">    </span>
<span id="cb24-5">    a,b,c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params_list[j]</span>
<span id="cb24-6">    dhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb24-7">    ehat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a)</span>
<span id="cb24-8">    </span>
<span id="cb24-9">    axs[j].scatter(x, y)</span>
<span id="cb24-10">    axs[j].scatter(x, to_np(preds_list[j]), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb24-11">    </span>
<span id="cb24-12">    axs[j].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'd=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dhat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:3.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> e=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ehat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:3.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb24-13">    </span>
<span id="cb24-14">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-27-Quadratic-Curve-Fit-With-Gradient-Descent_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The captions on each plot provide an estimate of <img src="https://latex.codecogs.com/png.latex?d"> and <img src="https://latex.codecogs.com/png.latex?e">. At the end of one million iterations we have <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bd%7D%20=%200.689"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7Be%7D=9.32">.</p>
<p>Recall that we generated the input data using <img src="https://latex.codecogs.com/png.latex?d=0.75"> and <img src="https://latex.codecogs.com/png.latex?e=9.5">.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-08-27-quadratic-curve-fit-with-gradient-descent.html</guid>
  <pubDate>Fri, 27 Aug 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Collaborative Filtering With Cross Entropy Loss</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-08-14-collaborative-filtering-on-movie-lens-with-cross-entropy-loss.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>We work through a problem posed in Chapter 8 of <span class="citation" data-cites="fastbook2020">[1]</span>.</p>
<div id="wireless-matthew" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.collab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.tabular.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-3">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.ML_100k)</span></code></pre></div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="4931584" class="" max="4924029" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.15% [4931584/4924029 00:00&lt;00:00]
    </div>
    
</div>
</div>
<div id="quality-spelling" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">Path.BASE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path</span>
<span id="cb2-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#23) [Path('u1.base'),Path('u1.test'),Path('u4.test'),Path('allbut.pl'),Path('u.item'),Path('ua.test'),Path('u.occupation'),Path('u3.test'),Path('u5.base'),Path('ub.test')...]</code></pre>
</div>
</div>
<div id="sticky-federation" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">ratings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u.data'</span>, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb4-2">                     names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'movie'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rating'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'timestamp'</span>])</span>
<span id="cb4-3">ratings.head()</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-6f61e7a6-7006-44d7-985f-cccacd4d83a2">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user</th>
<th data-quarto-table-cell-role="th">movie</th>
<th data-quarto-table-cell-role="th">rating</th>
<th data-quarto-table-cell-role="th">timestamp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>196</td>
<td>242</td>
<td>3</td>
<td>881250949</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>186</td>
<td>302</td>
<td>3</td>
<td>891717742</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>22</td>
<td>377</td>
<td>1</td>
<td>878887116</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>244</td>
<td>51</td>
<td>2</td>
<td>880606923</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>166</td>
<td>346</td>
<td>1</td>
<td>886397596</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6f61e7a6-7006-44d7-985f-cccacd4d83a2')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6f61e7a6-7006-44d7-985f-cccacd4d83a2 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6f61e7a6-7006-44d7-985f-cccacd4d83a2');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<p>We see that the rating can be one of the following values:</p>
<div id="automated-number" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ratings.rating.unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([3, 1, 2, 4, 5])</code></pre>
</div>
</div>
<div id="raising-professional" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">movies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u.item'</span>, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latin-1'</span>,</span>
<span id="cb7-2">                     usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'movie'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>), header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb7-3">movies.head()</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-6790a778-beb4-4948-9308-3a21cf136ecf">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">movie</th>
<th data-quarto-table-cell-role="th">title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>Toy Story (1995)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>GoldenEye (1995)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>Four Rooms (1995)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>Get Shorty (1995)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>Copycat (1995)</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-6790a778-beb4-4948-9308-3a21cf136ecf')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-6790a778-beb4-4948-9308-3a21cf136ecf button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-6790a778-beb4-4948-9308-3a21cf136ecf');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="muslim-prize" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">ratings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ratings.merge(movies)</span>
<span id="cb8-2">ratings.head()</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-0b8ebe54-f6bf-42c5-8381-a8b05cb53ba6">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user</th>
<th data-quarto-table-cell-role="th">movie</th>
<th data-quarto-table-cell-role="th">rating</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>196</td>
<td>242</td>
<td>3</td>
<td>881250949</td>
<td>Kolya (1996)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>63</td>
<td>242</td>
<td>3</td>
<td>875747190</td>
<td>Kolya (1996)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>226</td>
<td>242</td>
<td>5</td>
<td>883888671</td>
<td>Kolya (1996)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>154</td>
<td>242</td>
<td>3</td>
<td>879138235</td>
<td>Kolya (1996)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>306</td>
<td>242</td>
<td>5</td>
<td>876503793</td>
<td>Kolya (1996)</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-0b8ebe54-f6bf-42c5-8381-a8b05cb53ba6')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-0b8ebe54-f6bf-42c5-8381-a8b05cb53ba6 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-0b8ebe54-f6bf-42c5-8381-a8b05cb53ba6');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
</section>
<section id="dataloaders" class="level1">
<h1>DataLoaders</h1>
<div id="dated-partnership" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CollabDataLoaders.from_df(ratings, item_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb9-2">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user</th>
<th data-quarto-table-cell-role="th">title</th>
<th data-quarto-table-cell-role="th">rating</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>328</td>
<td>Star Trek VI: The Undiscovered Country (1991)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>251</td>
<td>Toy Story (1995)</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>456</td>
<td>Judgment Night (1993)</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>653</td>
<td>Raiders of the Lost Ark (1981)</td>
<td>5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>551</td>
<td>Aliens (1986)</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>416</td>
<td>Edge, The (1997)</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>116</td>
<td>Good Will Hunting (1997)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>500</td>
<td>Chain Reaction (1996)</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>393</td>
<td>Barb Wire (1996)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>227</td>
<td>Father of the Bride Part II (1995)</td>
<td>3</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="probabilistic-matrix-factorization-baseline" class="level1">
<h1>Probabilistic Matrix Factorization baseline</h1>
<p>Underneath the covers we have a dot product model (where the dot product is between the user embedding and the item embedding). We use L2 regularization (wd=0.5) and use y_range to make sure the sigmoid_range can get to a rating of <img src="https://latex.codecogs.com/png.latex?5">. Recall that in the sigmoid function only an activation of <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> will get us a <img src="https://latex.codecogs.com/png.latex?1">. This will use the MSE as the loss function.</p>
<div id="synthetic-steel" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collab_learner(dls, n_factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, y_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>))</span>
<span id="cb10-2">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.938077</td>
<td>0.954516</td>
<td>00:09</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.845044</td>
<td>0.872871</td>
<td>00:09</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.723613</td>
<td>0.843354</td>
<td>00:18</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.586253</td>
<td>0.829404</td>
<td>00:09</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.491200</td>
<td>0.829491</td>
<td>00:10</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>So <img src="https://latex.codecogs.com/png.latex?0.829"> is what we want to beat!</p>
</section>
<section id="deep-learning-baseline" class="level1">
<h1>Deep Learning baseline</h1>
<p>Instead of a Dot Product model we use a model where the user and the movie embeddings are concatenated together and then passed through a neural net. We continue to use MSE as our loss.</p>
<div id="gross-wagner" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">learn2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collab_learner(dls, n_factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, use_nn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>], y_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>))</span>
<span id="cb11-2">learn2.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.991514</td>
<td>0.999929</td>
<td>00:12</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.940058</td>
<td>0.930773</td>
<td>00:13</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.867342</td>
<td>0.879026</td>
<td>00:12</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.810829</td>
<td>0.855366</td>
<td>00:12</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.753963</td>
<td>0.852470</td>
<td>00:12</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>The model is as follows:</p>
<div id="brutal-invention" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">learn2.model</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>EmbeddingNN(
  (embeds): ModuleList(
    (0): Embedding(944, 74)
    (1): Embedding(1665, 102)
  )
  (emb_drop): Dropout(p=0.0, inplace=False)
  (bn_cont): BatchNorm1d(0, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layers): Sequential(
    (0): LinBnDrop(
      (0): Linear(in_features=176, out_features=100, bias=False)
      (1): ReLU(inplace=True)
      (2): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): LinBnDrop(
      (0): Linear(in_features=100, out_features=1, bias=True)
    )
    (2): SigmoidRange(low=0, high=5.5)
  )
)</code></pre>
</div>
</div>
</section>
<section id="cross-entropy-loss" class="level1">
<h1>Cross Entropy Loss</h1>
<p>Turn each rating into a class label by subtracting one. Recall we saw that ratings are integers from <img src="https://latex.codecogs.com/png.latex?1"> to <img src="https://latex.codecogs.com/png.latex?5">.</p>
<div id="initial-assumption" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">ratings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ratings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rating'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-2">ratings.head(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

  <div id="df-0a80bc4e-a680-484b-93fe-6ab5514ee2d7">
    <div class="colab-df-container">
      <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user</th>
<th data-quarto-table-cell-role="th">movie</th>
<th data-quarto-table-cell-role="th">rating</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">title</th>
<th data-quarto-table-cell-role="th">class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>196</td>
<td>242</td>
<td>3</td>
<td>881250949</td>
<td>Kolya (1996)</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>63</td>
<td>242</td>
<td>3</td>
<td>875747190</td>
<td>Kolya (1996)</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>226</td>
<td>242</td>
<td>5</td>
<td>883888671</td>
<td>Kolya (1996)</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>154</td>
<td>242</td>
<td>3</td>
<td>879138235</td>
<td>Kolya (1996)</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>306</td>
<td>242</td>
<td>5</td>
<td>876503793</td>
<td>Kolya (1996)</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
      <button class="colab-df-convert" onclick="convertToInteractive('df-0a80bc4e-a680-484b-93fe-6ab5514ee2d7')" title="Convert this dataframe to an interactive table." style="display:none;">
        
  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <path d="M0 0h24v24H0V0z" fill="none"></path>
    <path d="M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z"></path><path d="M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z"></path>
  </svg>
      </button>
      
  <style>
    .colab-df-container {
      display:flex;
      flex-wrap:wrap;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

      <script>
        const buttonEl =
          document.querySelector('#df-0a80bc4e-a680-484b-93fe-6ab5514ee2d7 button.colab-df-convert');
        buttonEl.style.display =
          google.colab.kernel.accessAllowed ? 'block' : 'none';

        async function convertToInteractive(key) {
          const element = document.querySelector('#df-0a80bc4e-a680-484b-93fe-6ab5514ee2d7');
          const dataTable =
            await google.colab.kernel.invokeFunction('convertToInteractive',
                                                     [key], {});
          if (!dataTable) return;

          const docLinkHtml = 'Like what you see? Visit the ' +
            '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
            + ' to learn more about interactive tables.';
          element.innerHTML = '';
          dataTable['output_type'] = 'display_data';
          await google.colab.output.renderOutput(dataTable, element);
          const docLink = document.createElement('div');
          docLink.innerHTML = docLinkHtml;
          element.appendChild(docLink);
        }
      </script>
    </div>
  </div>
  
</div>
</div>
<div id="norman-reading" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">ratings[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([2, 4, 3, 1, 0])</code></pre>
</div>
</div>
<div id="amateur-campaign" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">dls3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CollabDataLoaders.from_df(ratings, item_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>, rating_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class'</span>, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb17-2">dls3.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user</th>
<th data-quarto-table-cell-role="th">title</th>
<th data-quarto-table-cell-role="th">class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>581</td>
<td>Return of the Jedi (1983)</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>159</td>
<td>Courage Under Fire (1996)</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>521</td>
<td>Long Kiss Goodnight, The (1996)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>533</td>
<td>Stupids, The (1996)</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>77</td>
<td>Brazil (1985)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>12</td>
<td>Lion King, The (1994)</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>605</td>
<td>Usual Suspects, The (1995)</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>561</td>
<td>Richard III (1995)</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>246</td>
<td>Doors, The (1991)</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>658</td>
<td>Boot, Das (1981)</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Create a class that is able to output as many activations as there are classes.</p>
<div id="chinese-philippines" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CollabNN(Module):</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, user_sz, item_sz, n_act<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_factors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Embedding(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>user_sz)</span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_factors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Embedding(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>item_sz)</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb18-6">            nn.Linear(user_sz[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>item_sz[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], n_act),</span>
<span id="cb18-7">            nn.ReLU(),</span>
<span id="cb18-8">            nn.Linear(n_act, n_classes))</span>
<span id="cb18-9">        </span>
<span id="cb18-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb18-11">        embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_factors(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_factors(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb18-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers(torch.cat(embs, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="infectious-plumbing" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">embs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_emb_sz(dls3)</span>
<span id="cb19-2">embs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[(944, 74), (1665, 102)]</code></pre>
</div>
</div>
<div id="august-beaver" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CollabNN(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>embs)</span></code></pre></div>
</div>
<p>Examine a batch of inputs and outputs</p>
<div id="binary-radical" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dls3.one_batch()</span>
<span id="cb22-2">x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[ 763, 1211],
         [ 474, 1006],
         [ 261,  734]]), tensor([[3],
         [4],
         [3]], dtype=torch.int8))</code></pre>
</div>
</div>
<p>Get activations by passing through the model</p>
<div id="needed-gasoline" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 0.1065, -0.0083, -0.1098, -0.1151, -0.0471],
        [ 0.1053, -0.0053, -0.1108, -0.1145, -0.0490],
        [ 0.1017, -0.0110, -0.1114, -0.1135, -0.0478]],
       grad_fn=&lt;AddmmBackward0&gt;)</code></pre>
</div>
</div>
<p>Apply softmax to the activations</p>
<div id="checked-singer" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">torch.softmax(model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.2296, 0.2047, 0.1849, 0.1839, 0.1969],
        [0.2293, 0.2053, 0.1848, 0.1841, 0.1965],
        [0.2289, 0.2045, 0.1850, 0.1846, 0.1971]], grad_fn=&lt;SoftmaxBackward0&gt;)</code></pre>
</div>
</div>
<p>Take the argmax to get the prediction of the class</p>
<div id="touched-feeding" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">torch.softmax(model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0, 0, 0])</code></pre>
</div>
</div>
<p>Unsqueeze to match the shape of the y’s</p>
<div id="enhanced-pavilion" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">torch.softmax(model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0],
        [0],
        [0]])</code></pre>
</div>
</div>
<p>Convert to float and compute the mse_loss</p>
<div id="accessible-handling" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">F.mse_loss(torch.softmax(model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(11.3333)</code></pre>
</div>
</div>
<p>Create our custom mse function that can get a loss from these activations for the different classes. We do this so we can compare the validation loss metric against the previous baselines. Clearly cross entropy loss cannot be compared directly to the mean squared error.</p>
<div id="periodic-separation" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ks_mse(inp, targ, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb34-2">    sm_acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(inp, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-3">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm_acts.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axis).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> F.mse_loss(preds.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), targ)</span></code></pre></div>
</div>
<p>Compare with our custom function</p>
<div id="amber-alliance" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ks_mse(model(x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]), y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(11.3333)</code></pre>
</div>
</div>
<div id="cardiac-olympus" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">learn3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls3, model, loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CrossEntropyLossFlat(), metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[accuracy, ks_mse])</span></code></pre></div>
</div>
<div id="sharing-chocolate" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">lrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn3.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-14-Collaborative-Filtering-On-Movie-Lens-With-Cross-Entropy-Loss_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="vocational-zealand" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">lrs</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>SuggestedLRs(valley=0.0012022644514217973)</code></pre>
</div>
</div>
<div id="alternate-valley" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">learn3.fit_one_cycle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lrs.valley)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">ks_mse</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.177951</td>
<td>1.238908</td>
<td>0.444100</td>
<td>1.217100</td>
<td>00:13</td>
</tr>
<tr class="even">
<td>1</td>
<td>1.186859</td>
<td>1.232669</td>
<td>0.448450</td>
<td>1.215550</td>
<td>00:13</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1.168161</td>
<td>1.228795</td>
<td>0.452750</td>
<td>1.146900</td>
<td>00:12</td>
</tr>
<tr class="even">
<td>3</td>
<td>1.132046</td>
<td>1.233022</td>
<td>0.451050</td>
<td>1.154100</td>
<td>00:12</td>
</tr>
<tr class="odd">
<td>4</td>
<td>1.096163</td>
<td>1.237107</td>
<td>0.450800</td>
<td>1.162600</td>
<td>00:13</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Unfortunately, in this attempt, we came up short and were unable to beat the baseline.</p>
<p>Finally, let’s use a confusion matrix to visualize where this model is coming up short.</p>
<div id="9feHIla-QC4c" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">raw_preds, targs, decoded_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn3.get_preds(with_decoded<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-2">raw_preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], decoded_preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], targs[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[0.0255, 0.2153, 0.2651, 0.4588, 0.0353],
         [0.0089, 0.0586, 0.2399, 0.4129, 0.2797],
         [0.0028, 0.1422, 0.3484, 0.3990, 0.1076]]),
 tensor([3, 3, 3]),
 tensor([[4],
         [4],
         [3]], dtype=torch.int8))</code></pre>
</div>
</div>
<div id="AcdlgJmpSiRH" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb44-2">ConfusionMatrixDisplay.from_predictions(targs, decoded_preds)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-14-Collaborative-Filtering-On-Movie-Lens-With-Cross-Entropy-Loss_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="ZtC2RV_I0qNL" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb45-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(targs, decoded_preds, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       0.45      0.35      0.39      1216
           1       0.34      0.19      0.25      2254
           2       0.43      0.42      0.43      5437
           3       0.46      0.56      0.51      6931
           4       0.49      0.47      0.48      4162

    accuracy                           0.45     20000
   macro avg       0.43      0.40      0.41     20000
weighted avg       0.44      0.45      0.44     20000
</code></pre>
</div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-08-14-collaborative-filtering-on-movie-lens-with-cross-entropy-loss.html</guid>
  <pubDate>Sat, 14 Aug 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Multi-Label Classification</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-08-12-multi-label-classification.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In a previous <a href="https://nasheqlbrm.github.io/blog/posts/2021-07-31-bear-classification-and-gradio.html#sadness">post</a> we saw our Bear classifier confidently predict that an image of a Maine Coone was a Teddy bear. Roughly speaking the problem, in a multi-class setting, is that the exponential (in the softmax) pushes the class with the highest activation to receive a score close to <img src="https://latex.codecogs.com/png.latex?1">. So while our classifier had never seen a Maine Coone when training, at inference time the image of the Maine Coone happened to push the activations for the Teddy Bear class higher than those for the other classes (Black Bear and Grizzly).</p>
<p>In this post we use multi-label classification to solve this problem following Chapter 6 of <span class="citation" data-cites="fastbook2020">[1]</span> and the note in <span class="citation" data-cites="pdito_note_may2020">[2]</span>. A multi-label classification problem (as opposed to multi-class classification) is one where there can be multiple labels, instead of there being a single correct class, for every object.</p>
<p>We want our multi-label classifier to predict the different labels present in the object or no label if it is not confident about the presence of any of the labels. For this we switch to using Binary Cross Entropy as our loss function (and will also come up with a threshold probability for our classifier to use for inference).</p>
<section id="binary-cross-entropy" class="level2">
<h2 class="anchored" data-anchor-id="binary-cross-entropy">Binary Cross Entropy</h2>
<div id="accessory-glass" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>Suppose the following are the activations, on a single training example, for the different labels possible in a multi-label classification problem. Pretend that we can have as many as three labels for each image.</p>
<div id="cardiac-briefs" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-2">activations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 0.7260, -3.3489, -2.3491]])</code></pre>
</div>
</div>
<p>Next suppose the correct labels in this case are the first and third label. A one-hot encoded representation of the labels for this single training example is as follows.</p>
<div id="cordless-strike" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb4-2">targets</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[1, 0, 1]])</code></pre>
</div>
</div>
<p>The first step is to take the sigmoid activations for each label to convert each activation into a probability score.</p>
<div id="patient-possibility" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">sigmoid_activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activations.sigmoid()</span>
<span id="cb6-2">sigmoid_activations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.6739, 0.0339, 0.0871]])</code></pre>
</div>
</div>
<p>The next step is to compute the binary cross entropy loss using</p>
<div id="powerful-straight" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">bce_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sigmoid_activations, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sigmoid_activations).log()</span>
<span id="cb8-2">bce_loss</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.3946, 0.0345, 2.4403]])</code></pre>
</div>
</div>
<p>When a label is present, in the target, we take the sigmoid activation corresponding to that label. Otherwise, when the label is absent, we take one minus the that sigmoid activation. By doing this we are asking for the confidence that the classifier places on the particular label being absent.</p>
<p>Thus the binary cross entropy function summarizes the “correctness” of the classifer across the presence and absence of each possible label in a training example. Contrast this with the use of <a href="https://nasheqlbrm.github.io/blog/fastai/pytorch/jupyter/2021/08/07/Cross-Entropy-Loss-PyTorch.html">cross entropy loss</a> in multi-class classification where we only care about the probability being predicted for the single correct class of the training example.</p>
<div id="typical-actor" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.reshape(torch.cat([activations, sigmoid_activations, targets, bce_loss], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb10-2">pd.DataFrame(results, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activations'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">activations</td>
<td>0.725968</td>
<td>-3.348915</td>
<td>-2.349130</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">sigmoid</td>
<td>0.673920</td>
<td>0.033931</td>
<td>0.087135</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">target</td>
<td>1.000000</td>
<td>0.000000</td>
<td>1.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">loss</td>
<td>0.394644</td>
<td>0.034520</td>
<td>2.440297</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Each row in the dataframe above shows us the step needed to go from an activation to the loss associated with each possible label of a single training example. We can get the losses directly by</p>
<div id="historical-import" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">F.binary_cross_entropy_with_logits(activations, targets.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.3946, 0.0345, 2.4403]])</code></pre>
</div>
</div>
<p>Or by</p>
<div id="composite-sympathy" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">nn.BCEWithLogitsLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)(activations, targets.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.3946, 0.0345, 2.4403]])</code></pre>
</div>
</div>
<p>Of course we will want to take the mean of the loss across the labels using any of the two methods below</p>
<div id="german-quick" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">F.binary_cross_entropy_with_logits(activations, targets.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()), nn.BCEWithLogitsLoss()(activations, targets.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor(0.9565), tensor(0.9565))</code></pre>
</div>
</div>
</section>
<section id="soft-labels" class="level2">
<h2 class="anchored" data-anchor-id="soft-labels">Soft Labels</h2>
<p>In the preceding the labels were hard. In other words, we knew with certainty the labels that are present for any training example. What if we only knew the probability with which a label would be present in a training example?</p>
<p>Feel free to skip to the next section as this is somewhat of a digression.</p>
<p>In the example below we have four training examples and only a single label. The activations for the training examples are as below:</p>
<div id="q_ahoggkLKic" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0122</span>],[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2294</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1563</span>],[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1483</span>]])</span>
<span id="cb17-2">activations.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([4, 1])</code></pre>
</div>
</div>
<p>Apply sigmoid to get the predictions for whether the label is present.</p>
<div id="3_k8KScdMZjT" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">sigmoid_activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activations.sigmoid()</span>
<span id="cb19-2">sigmoid_activations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.5030],
        [0.5571],
        [0.4610],
        [0.4630]])</code></pre>
</div>
</div>
<p>Get the predictions for whether the label is absent (i.e., some other label is present).</p>
<div id="yUA8tZHqMkN1" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">one_minus_sigmoid_activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigmoid_activations)</span>
<span id="cb21-2">one_minus_sigmoid_activations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.4970],
        [0.4429],
        [0.5390],
        [0.5370]])</code></pre>
</div>
</div>
<p>The targets for each example is as follows. This says that in the first training example label 0 is present with probability 0.5, similarly the probability for label 0 being present in the second example is 0.29 and so on.</p>
<div id="cH9yzMT4LiMD" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.29</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>])</span>
<span id="cb23-2">targets.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([4])</code></pre>
</div>
</div>
<p>Compute the binary cross entropy loss for each training example.</p>
<div id="_iOpvI_bMwqM" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">bce_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigmoid_activations.flatten().log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> targets)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>( one_minus_sigmoid_activations.flatten().log() ) )</span>
<span id="cb25-2">bce_loss</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0.6932, 0.7479, 0.6743, 0.6262])</code></pre>
</div>
</div>
<p>Compute the average binary cross entropy loss across training examples.</p>
<div id="Dei15MomNUag" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">bce_loss.mean()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(0.6854)</code></pre>
</div>
</div>
<p>The above can just be done as a one-liner using BCEWithLogitsLossFlat</p>
<div id="dY21dKbNLr_n" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">BCEWithLogitsLossFlat(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)(activations, targets)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>TensorBase(0.6854)</code></pre>
</div>
</div>
<p>Note that we cannot just use nn.BCEWithLogitsLoss because the input tensor isn’t flattened and we will get an error.</p>
<p><em>ValueError: Target size (torch.Size([4])) must be the same as input size (torch.Size([4, 1]))</em></p>
<p>Now suppose we have two examples and three soft labels per example.</p>
<div id="tkNHjRzwSENw" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0122</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>],[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2294</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>]])</span>
<span id="cb31-2">activations.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 3])</code></pre>
</div>
</div>
<p>The soft labels are:</p>
<div id="_nL9mf-TSRAU" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>],[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33</span> ])</span>
<span id="cb33-2">targets.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([2, 3])</code></pre>
</div>
</div>
<p>We can compute the binary cross entropy loss in the cumbersome way as below:</p>
<div id="ZtkPeiplWlMj" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">bce_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ( targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> activations.sigmoid().log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> targets)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>( <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> activations.sigmoid() ).log() )</span>
<span id="cb35-2">bce_loss, bce_loss.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(), bce_loss.mean()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([[0.6883, 0.6935, 0.8741],
         [0.7571, 0.7044, 0.8894]]), tensor(4.6067), tensor(0.7678))</code></pre>
</div>
</div>
<p>Or just use the one-liner to get the average loss.</p>
<div id="Jx-6GPWdUkFf" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">nn.BCEWithLogitsLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)(activations, targets)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(0.7678)</code></pre>
</div>
</div>
<p>I find it useful to think of each individual training example as being replicated as many times as there are possible labels. Then 2 training examples each with 3 possible labels is better thought of as 6 training examples. Hence the average loss, in this setting, requires us to divide by <img src="https://latex.codecogs.com/png.latex?2*3%20=%206">.</p>
<p><em>Note that we could reasonably think that the loss for each label would be summed up into a single loss per training example and we would then divide that by <img src="https://latex.codecogs.com/png.latex?2"> but do me a favor and don’t walk down that path!</em></p>
</section>
</section>
<section id="bear-images" class="level1">
<h1>Bear Images</h1>
<p>Now let’s get back to our multi-label classification exercise. So we start by assembling images of bears.</p>
<div id="south-corner" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jmd_imagescraper.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scrape_images(path, labels, search_suffix, erase_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb39-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> erase_dir:</span>
<span id="cb39-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rf {path}</span>
<span id="cb39-6">    </span>
<span id="cb39-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb39-8">        path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-9">    </span>
<span id="cb39-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> some_label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> labels:</span>
<span id="cb39-11">        duckduckgo_search(path, some_label,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb39-12">                          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>some_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>search_suffix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)</span>
<span id="cb39-13">        </span>
<span id="cb39-14">    filenames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb39-15">    failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(filenames)</span>
<span id="cb39-16">    </span>
<span id="cb39-17">    failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> []:</span>
<span id="cb39-19">        _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [filenames.remove(f) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> failed]</span>
<span id="cb39-20">    </span>
<span id="cb39-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To avoid Transparency warnings, convert PNG images to RGBA</span></span>
<span id="cb39-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://forums.fast.ai/t/errors-when-training-the-bear-image-classification-model/83422/9</span></span>
<span id="cb39-23">    converted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb39-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filenames:</span>
<span id="cb39-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(image):</span>
<span id="cb39-26">            im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image)</span>
<span id="cb39-27">            converted.append(image)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># old file name before resaving</span></span>
<span id="cb39-28">            im.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGBA"</span>).save(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2.png"</span>)    </span>
<span id="cb39-29">            </span>
<span id="cb39-30">    converted.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete originals</span></span>
<span id="cb39-31">    </span>
<span id="cb39-32">    total_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(get_image_files(path))</span>
<span id="cb39-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"After checking for issues, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_images<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (total) images remain."</span>)</span>
<span id="cb39-34">    </span>
<span id="cb39-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> path</span></code></pre></div>
</details>
</div>
<div id="ancient-village" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grizzly'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'teddy'</span></span>
<span id="cb40-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scrape_images(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/data/kaushik/bears'</span>), labels, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bear'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: grizzly bear
Downloading results into /data/kaushik/bears/grizzly</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:05&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: black bear
Downloading results into /data/kaushik/bears/black</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:21&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: teddy bear
Downloading results into /data/kaushik/bears/teddy</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:05&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>After checking for issues, 300 (total) images remain.</code></pre>
</div>
</div>
<section id="set-up-data-block" class="level2">
<h2 class="anchored" data-anchor-id="set-up-data-block">Set up Data Block</h2>
<p>We will need a multicategory block and a function that takes a single label and converts it into a list.</p>
<div id="closed-northern" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_label_list(some_label): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [some_label]</span>
<span id="cb45-2"></span>
<span id="cb45-3">dblock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb45-4">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, MultiCategoryBlock),</span>
<span id="cb45-5">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb45-6">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb45-7">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([parent_label, get_label_list]),</span>
<span id="cb45-8">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">228</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb45-9">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb45-10"></span>
<span id="cb45-11">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dblock.dataloaders(path)</span></code></pre></div>
</div>
<div id="funny-cruise" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-12-Multi-Label-Classification_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="train-model" class="level2">
<h2 class="anchored" data-anchor-id="train-model">Train Model</h2>
<p>For the model we will use the fastai’s BCEWithLogitsLossFlat to compute the binary cross entropy loss. Another item to note is the use of accuracy_multi as the metric. Accuracy multi is defined as</p>
<pre><code>def accuracy_multi(inp, targ, thresh=0.5, sigmoid=True):
    "Compute accuracy when `inp` and `targ` are the same size."
    inp,targ = flatten_check(inp,targ)
    if sigmoid: inp = inp.sigmoid()
    return ((inp&gt;thresh)==targ.bool()).float().mean()</code></pre>
<p>This shows that accuracy_multi uses the threshold to determine whether a label is present and then takes a mean across the labels for every example in the inputs. The training process does not care about the threshold it only cares about minimizing the loss function.</p>
<div id="photographic-fraud" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[partial(accuracy_multi, thresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>),<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb48-2">                                            APScoreMulti()], </span>
<span id="cb48-3">                    loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BCEWithLogitsLossFlat())</span>
<span id="cb48-4">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy_multi</th>
<th data-quarto-table-cell-role="th">average_precision_score</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.037557</td>
<td>0.579388</td>
<td>0.783333</td>
<td>0.868948</td>
<td>00:07</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy_multi</th>
<th data-quarto-table-cell-role="th">average_precision_score</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.497570</td>
<td>0.354649</td>
<td>0.883333</td>
<td>0.960842</td>
<td>00:09</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.386510</td>
<td>0.170127</td>
<td>0.961111</td>
<td>0.987437</td>
<td>00:09</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.306835</td>
<td>0.135320</td>
<td>0.966667</td>
<td>0.989491</td>
<td>00:09</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.263357</td>
<td>0.124831</td>
<td>0.966667</td>
<td>0.989491</td>
<td>00:09</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Let’s look at the results.</p>
<div id="wired-entertainment" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">learn.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-12-Multi-Label-Classification_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sadness-revisited" class="level2">
<h2 class="anchored" data-anchor-id="sadness-revisited">Sadness revisited</h2>
<p>Let’s test with our Maine Coon image.</p>
<div id="conditional-timing" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">test_mainecoon_image_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../test_images/mc.jpg'</span></span>
<span id="cb50-2">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_mainecoon_image_location)</span>
<span id="cb50-3">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-12-Multi-Label-Classification_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="detected-dealer" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">learn.predict(test_mainecoon_image_location)</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>((#2) ['black','teddy'],
 tensor([ True, False,  True]),
 tensor([0.5806, 0.0633, 0.8982]))</code></pre>
</div>
</div>
<p>What happened? Our multi-label classifier still chooses to predict some of the labels.</p>
<p>Looking at the predicted probabilities we see that none has a score of greater than 0.95 so this means that the threshold we passed in for accuracy_multi is not being used during inference.</p>
<p>If we look at the source of learn.predict we see that it calls out to learn.get_preds(…, with_decoded=True). Per the documentation of <a href="https://docs.fast.ai/learner.html#Learner.get_preds">get_predict</a> with_decoded=True <em>will also return the decoded predictions using the decodes function of the loss function (if it exists).</em></p>
<p>Looking at the definition of BCEWithLogitsLossFlat we see the presence of the decodes method.</p>
<pre><code>class BCEWithLogitsLossFlat(BaseLoss):
    "Same as `nn.BCEWithLogitsLoss`, but flattens input and target."
    @use_kwargs_dict(keep=True, weight=None, reduction='mean', pos_weight=None)
    def __init__(self, *args, axis=-1, floatify=True, thresh=0.5, **kwargs):
        if kwargs.get('pos_weight', None) is not None and kwargs.get('flatten', None) is True:
            raise ValueError("`flatten` must be False when using `pos_weight` to avoid a RuntimeError due to shape mismatch")
        if kwargs.get('pos_weight', None) is not None: kwargs['flatten'] = False
        super().__init__(nn.BCEWithLogitsLoss, *args, axis=axis, floatify=floatify, is_2d=False, **kwargs)
        self.thresh = thresh

    def decodes(self, x):    return x&gt;self.thresh
    def activation(self, x): return torch.sigmoid(x)</code></pre>
<p>Thus, all we need to do is pass the threshold into BCEWithLogitsLossFlat.</p>
<div id="downtown-child" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">learn.loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BCEWithLogitsLossFlat(thresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb54-2">learn.predict(test_mainecoon_image_location)</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>((#0) [], tensor([False, False, False]), tensor([0.5806, 0.0633, 0.8982]))</code></pre>
</div>
</div>
<p>Much better. Now none of the labels are predicted.</p>
<p>To get the best threshold we first get all the predictions on the validation set.</p>
<div id="substantial-destruction" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">preds,targs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learn.get_preds()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
</div>
<p>Since the predictions from get_preds has the sigmoid applied already we will pass sigmoid=False when assessing the accuracy_multi at different threshold values .</p>
<div id="infinite-bailey" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.995</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb57-2">accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [accuracy_multi(preds, targs, thresh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i, sigmoid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> xs]</span>
<span id="cb57-3">plt.plot(xs,accs)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-12-Multi-Label-Classification_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looks like our choice of threshold is fine. One more thing to note is that for multi-label problems it is useful to look at the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.average_precision_score.html">average precision score</a> using APScoreMulti. This is because on harder datasets it will provide a decidely less rosier view of classifier performance than accuracy_multi.</p>
<p>As a future step it would be nice to do threshold selection for each label following <span class="citation" data-cites="fan2007study">[3]</span>.</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
<div id="ref-pdito_note_may2020" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">P. Davis, <span>“&lt;A href="https://pdito.github.io/blog/deep.”</span> <a href="https://pdito.github.io/blog/deep%20learning/fastai/fastai2/multicat/multi/label/classification/2020/05/27/multi-cat-fastai2.html" class="uri">https://pdito.github.io/blog/deep%20learning/fastai/fastai2/multicat/multi/label/classification/2020/05/27/multi-cat-fastai2.html</a>, May 2020.</div>
</div>
<div id="ref-fan2007study" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">R.-E. Fan and C.-J. Lin, <span>“&lt;A href="https://www.csie.ntu.edu.tw/%7Ecjlin/papers/threshold.pdf"&gt;a study on threshold selection for multi-label classification&lt;/a&gt;,”</span> <em>Department of Computer Science, National Taiwan University</em>, pp. 1–23, 2007.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-08-12-multi-label-classification.html</guid>
  <pubDate>Thu, 12 Aug 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A note on Cross Entropy loss with PyTorch</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-08-07-cross-entropy-loss-pytorch.html</link>
  <description><![CDATA[ 





<section id="maximizing-the-likelihood-of-the-labels-of-the-data" class="level1">
<h1>Maximizing the likelihood of the labels of the data</h1>
<p>Suppose we have <img src="https://latex.codecogs.com/png.latex?N"> training examples and we have a multi-class problem such that each training example belongs to one and only one out of <img src="https://latex.codecogs.com/png.latex?K"> possible classes. Let <img src="https://latex.codecogs.com/png.latex?C(i)%20%5Cin%20%5C%7B1,%5Cldots,%20K%5C%7D"> be the correct class for the <img src="https://latex.codecogs.com/png.latex?i">-th training example and <img src="https://latex.codecogs.com/png.latex?o%5E%7B%5BC(i)%5D%7D_%7Bi%7D"> is the probability assigned by a classifier to the correct class for the <img src="https://latex.codecogs.com/png.latex?i">-th training example. We want this classifier to maximize: <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bi=1%7D%5E%7BN%7D%20o%5E%7B%5BC(i)%5D%7D_%7Bi%7D"></p>
<p>If the classifier assigns a probability of <img src="https://latex.codecogs.com/png.latex?1"> to the correct class for <img src="https://latex.codecogs.com/png.latex?N-1"> training examples and a probability of <img src="https://latex.codecogs.com/png.latex?0"> for the <img src="https://latex.codecogs.com/png.latex?N">-th example then the entire product shown above becomes zero. So to maximize this product of probabilities, the classifier has to assign a high probability to the correct class for each and every training example.</p>
<p>Now, maximizing the product is equivalent to maximizing <img src="https://latex.codecogs.com/png.latex?ln(%5Cprod_%7Bi=1%7D%5E%7BN%7Do%5E%7B%5BC(i)%5D%7D_%7Bi%7D)%20=%20%5Csum_%7Bi=1%7D%5E%7BN%7Dln(o%5E%7B%5BC(i)%5D%7D_%7Bi%7D)"></p>
<p>This is the same as minimizing the sum of the negative log likelihoods <img src="https://latex.codecogs.com/png.latex?-%5Csum_%7Bi=1%7D%5E%7BN%7Dln(o%5E%7B%5BC(i)%5D%7D_%7Bi%7D)"></p>
<p>The above can now serve as a loss function for an optimization routine.</p>
<p>Recall that Cross Entropy = <img src="https://latex.codecogs.com/png.latex?-%5Csum_%7Bk=1%7D%5E%7BK%7Dy%5E%7B%5Bk%5D%7Dln(o%5E%7B%5Bk%5D%7D)"> where <img src="https://latex.codecogs.com/png.latex?y"> is the reference distribution over <img src="https://latex.codecogs.com/png.latex?K"> classes while our predictions over the <img src="https://latex.codecogs.com/png.latex?K"> classes is given by <img src="https://latex.codecogs.com/png.latex?o">. Observe that this summation will collapse to being a single term when, in the reference distribution <img src="https://latex.codecogs.com/png.latex?y">, only one of the classes has a probability of <img src="https://latex.codecogs.com/png.latex?1">.</p>
<p>Thus <img src="https://latex.codecogs.com/png.latex?-%5Csum_%7Bi=1%7D%5E%7BN%7Dln(o%5E%7B%5BC(i)%5D%7D_%7Bi%7D)"> can be interpreted as the sum of cross entropy losses across all examples.</p>
<div id="intense-gateway" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>Pretend the following are the activations of each class of a multiclass classification problem. So we have 6 examples and in each row we have the activation for each class the example could belong to.</p>
<div id="brief-parking" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-2">activations</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-1.6453,  1.8893],
        [ 1.9800,  1.7681],
        [ 2.8183,  4.6643],
        [-0.3635, -0.0614],
        [ 0.4064, -0.4668],
        [-3.3801,  3.2484]])</code></pre>
</div>
</div>
<p>Suppose the correct class of each example is as follows</p>
<div id="polar-cannon" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-2">targets</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0, 1, 0, 1, 1, 0])</code></pre>
</div>
</div>
<p>Take the softmax of the activations</p>
<div id="bibliographic-clerk" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">sm_acts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(activations, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-2">sm_acts</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[0.0283, 0.9717],
        [0.5528, 0.4472],
        [0.1363, 0.8637],
        [0.4250, 0.5750],
        [0.7054, 0.2946],
        [0.0013, 0.9987]])</code></pre>
</div>
</div>
<p>Extract the probabilities predicted for the correct class.</p>
<div id="clean-interface" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(idx)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 2, 3, 4, 5]</code></pre>
</div>
</div>
<div id="technological-diary" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">p_correct_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm_acts[idx, targets]</span>
<span id="cb10-2">p_correct_class</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([0.0283, 0.4472, 0.1363, 0.5750, 0.2946, 0.0013])</code></pre>
</div>
</div>
<p>Take the log of the softmax activations</p>
<div id="voluntary-companion" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">torch.log(sm_acts)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-3.5634e+00, -2.8753e-02],
        [-5.9281e-01, -8.0469e-01],
        [-1.9925e+00, -1.4659e-01],
        [-8.5559e-01, -5.5344e-01],
        [-3.4895e-01, -1.2222e+00],
        [-6.6298e+00, -1.3213e-03]])</code></pre>
</div>
</div>
<p>Computing the softmax of the activations and then taking the log is equivalent to applying PyTorch’s log_softmax function directly to the original activations. We want to do the latter because it will faster and more accurate.</p>
<div id="civilian-dodge" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">torch.log_softmax(activations, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[-3.5634e+00, -2.8753e-02],
        [-5.9281e-01, -8.0469e-01],
        [-1.9925e+00, -1.4659e-01],
        [-8.5559e-01, -5.5344e-01],
        [-3.4895e-01, -1.2222e+00],
        [-6.6298e+00, -1.3213e-03]])</code></pre>
</div>
</div>
<p>Let’s compute the mean of cross entropy losses across the training examples:</p>
<div id="antique-gamma" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.log(p_correct_class), (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.log(p_correct_class)).mean()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([3.5634, 0.8047, 1.9925, 0.5534, 1.2222, 6.6298]), tensor(2.4610))</code></pre>
</div>
</div>
<p>We can just use Pytorch to compute this directly</p>
<div id="sunset-kansas" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">nn.CrossEntropyLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>)(activations, targets), nn.CrossEntropyLoss()(activations, targets)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([3.5634, 0.8047, 1.9925, 0.5534, 1.2222, 6.6298]), tensor(2.4610))</code></pre>
</div>
</div>
<p>or by using:</p>
<div id="diagnostic-trademark" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">F.cross_entropy(activations, targets, reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>), F.cross_entropy(activations, targets)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(tensor([3.5634, 0.8047, 1.9925, 0.5534, 1.2222, 6.6298]), tensor(2.4610))</code></pre>
</div>
</div>
</section>
<section id="gradient-of-cross-entropy" class="level1">
<h1>Gradient of Cross Entropy</h1>
<p>We follow the exposition in <span class="citation" data-cites="markusthill_ce_note">[1]</span>.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?z%5E%7B%5B1%5D%7D,%5Cldots,%20z%5E%7B%5BK%5D%7D"> denote the activations corresponding to the <img src="https://latex.codecogs.com/png.latex?K"> classes. The softmax activation for each class is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?o%5E%7B%5Bj%5D%7D%20=%20%5Cfrac%7Be%5E%7Bz%5E%7B%5Bj%5D%7D%7D%7D%7B%5Csum_%7Bl=1%7D%5E%7BK%7D%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%7D"></p>
<p>The cross-entropy loss across the <img src="https://latex.codecogs.com/png.latex?K"> classes is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?E=-%5Csum_%7Bl=1%7D%5E%7BK%7Dy%5E%7B%5Bl%5D%7Dln(o%5E%7B%5Bl%5D%7D)"></p>
<section id="partial-derivative-of-oj-with-respect-to-zi" class="level2">
<h2 class="anchored" data-anchor-id="partial-derivative-of-oj-with-respect-to-zi">Partial derivative of <img src="https://latex.codecogs.com/png.latex?o%5E%7B%5Bj%5D%7D"> with respect to <img src="https://latex.codecogs.com/png.latex?z%5E%7B%5Bi%5D%7D"></h2>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20o%5E%7B%5Bj%5D%7D%20%20=%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20%5Cfrac%7Be%5E%7Bz%5E%7B%5Bj%5D%7D%7D%7D%7B%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%7D%0A=%20e%5E%7Bz%5E%7B%5Bj%5D%7D%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20%5CBigg(%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%20%5CBigg)%5E%7B-1%7D%20%5C%5C%0A%5Cqquad%20=%20-e%5E%7Bz%5E%7B%5Bj%5D%7D%7D%20%5CBigg(%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%20%5CBigg)%5E%7B-2%7D%20e%5E%7Bz%5E%7B%5Bi%5D%7D%7D%0A=%20-o%5E%7B%5Bj%5D%7D%20%5Ccdot%20o%5E%7B%5Bi%5D%7D%0A"></p>
</section>
<section id="partial-derivative-of-oi-with-respect-to-zi" class="level2">
<h2 class="anchored" data-anchor-id="partial-derivative-of-oi-with-respect-to-zi">Partial derivative of <img src="https://latex.codecogs.com/png.latex?o%5E%7B%5Bi%5D%7D"> with respect to <img src="https://latex.codecogs.com/png.latex?z%5E%7B%5Bi%5D%7D"></h2>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20o%5E%7B%5Bi%5D%7D%0A=%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20%5Cfrac%7Be%5E%7Bz%5E%7B%5Bi%5D%7D%7D%7D%7B%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%7D%0A=%20%5Cfrac%7Be%5E%7Bz%5E%7B%5Bi%5D%7D%7D%7D%7B%5Csum_%7Bl%7D%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%7D%20+%20e%5E%7Bz%5E%7B%5Bi%5D%7D%7D%20%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20z%5E%7B%5Bi%5D%7D%7D%20%5CBigg(%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%20%5CBigg)%5E%7B-1%7D%5C%5C%0A%5Cquad%20%5Cqquad%20%5Cqquad%20%5Cqquad%20=%20o%5E%7B%5Bi%5D%7D-e%5E%7Bz%5E%7B%5Bi%5D%7D%7D%20%5CBigg(%5Csum_l%20e%5E%7Bz%5E%7B%5Bl%5D%7D%7D%20%5CBigg)%5E%7B-2%7D%20e%5E%7Bz%5E%7B%5Bi%5D%7D%7D%0A=%20o%5E%7B%5Bi%5D%7D%20-%20o%5E%7B%5Bi%5D%7D%20%5Ccdot%20o%5E%7B%5Bi%5D%7D%0A=%20o%5E%7B%5Bi%5D%7D%20%5Ccdot%20(1%20-%20o%5E%7B%5Bi%5D%7D)%0A"></p>
<p>Let’s compute the gradient of the cross-entropy loss with respect to the activation of the <img src="https://latex.codecogs.com/png.latex?i">-the class:</p>
<div>
<p><img src="https://github.com/nasheqlbrm/blog/blob/main/images/ce_derivative.png?raw=1" width="500"></p>
</div>
<p>Per the <em>Sylvain says</em> section (page 203 Chapter 5) of <span class="citation" data-cites="fastbook2020">[2]</span>, ” <em>The gradient is proportional to the difference between the prediction and the target.</em>… <em>Because the gradient is linear we won’t see sudden jumps or exponential increases in gradients, which should lead to smoother training of models.</em>”</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-markusthill_ce_note" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">M. Thill, <span>“&lt;A href="https://markusthill.github.io/stats/ml/gradient-softmax-function-with-cross-entropy/"&gt;gradient of the softmax function with cross-entropy loss&lt;/a&gt;.”</span> <a href="https://markusthill.github.io/stats/ml/gradient-softmax-function-with-cross-entropy/" class="uri">https://markusthill.github.io/stats/ml/gradient-softmax-function-with-cross-entropy/</a>, 2017.</div>
</div>
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>pytorch</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-08-07-cross-entropy-loss-pytorch.html</guid>
  <pubDate>Sat, 07 Aug 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>MNIST: Distinguishing Threes from Sevens</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-08-06-mnist-threes-and-sevens.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I am following along with Chapter 4 of <span class="citation" data-cites="fastbook2020">[1]</span>.</p>
<section id="download-dataset" class="level2">
<h2 class="anchored" data-anchor-id="download-dataset">Download dataset</h2>
<div id="funny-teens" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div id="maritime-moses" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> untar_data(URLs.MNIST_SAMPLE)</span></code></pre></div>
</div>
<p>So what got downloaded?</p>
<div id="every-portugal" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#3) [Path('/data/kaushik/.fastai/data/mnist_sample/valid'),Path('/data/kaushik/.fastai/data/mnist_sample/train'),Path('/data/kaushik/.fastai/data/mnist_sample/labels.csv')]</code></pre>
</div>
</div>
<p>That huge path is a pain to look at so shorten it by setting the BASE_PATH.</p>
<div id="breeding-cooper" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">Path.BASE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path</span>
<span id="cb5-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#3) [Path('valid'),Path('train'),Path('labels.csv')]</code></pre>
</div>
</div>
<p>What do we have under train?</p>
<div id="persistent-discharge" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#2) [Path('train/3'),Path('train/7')]</code></pre>
</div>
</div>
<p>What do we have under the 7?</p>
<div id="quarterly-block" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#6265) [Path('train/7/10002.png'),Path('train/7/1001.png'),Path('train/7/10014.png'),Path('train/7/10019.png'),Path('train/7/10039.png'),Path('train/7/10046.png'),Path('train/7/10050.png'),Path('train/7/10063.png'),Path('train/7/10077.png'),Path('train/7/10086.png')...]</code></pre>
</div>
</div>
<p>We have 6,265 images of sevens. Look at one using the PIL library.</p>
<div id="fifth-tucson" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>((path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-06-MNIST-Threes-And-Sevens_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="brutal-arcade" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">seven_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pic_path)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pic_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()]</span>
<span id="cb12-2">three_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pic_path)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pic_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()]</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(seven_tensors), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(three_tensors)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(6265, 6131)</code></pre>
</div>
</div>
<p>Use Fastai convenience function <em>show_image</em> to display the tensor</p>
<div id="acquired-galaxy" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">show_image(seven_tensors[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-06-MNIST-Threes-And-Sevens_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="distributed-improvement" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">stacked_sevens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(seven_tensors)</span>
<span id="cb15-2">stacked_threes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(three_tensors)</span>
<span id="cb15-3">stacked_sevens.shape, stacked_threes.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([6265, 28, 28]), torch.Size([6131, 28, 28]))</code></pre>
</div>
</div>
</section>
</section>
<section id="assemble-train-and-validation-set" class="level1">
<h1>Assemble train and validation set</h1>
<p>Assemble the training data. Each input will be a vector of 784 values.</p>
<div id="yellow-glucose" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">train_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([stacked_threes, stacked_sevens]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb17-2">train_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(three_tensors) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(seven_tensors)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-3">train_x.shape, train_y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([12396, 784]), torch.Size([12396, 1]))</code></pre>
</div>
</div>
<p>Assemble the validation data</p>
<div id="deluxe-update" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">valid_7_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pic_path)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pic_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()])</span>
<span id="cb19-2">valid_3_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack([tensor(Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pic_path)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pic_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>).ls().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>()])</span>
<span id="cb19-3">valid_7_tensors.shape, valid_3_tensors.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([1028, 28, 28]), torch.Size([1010, 28, 28]))</code></pre>
</div>
</div>
<div id="starting-payroll" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">valid_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([valid_3_tensors, valid_7_tensors]).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb21-2">valid_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_3_tensors) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_7_tensors)).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-3">valid_x.shape, valid_y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([2038, 784]), torch.Size([2038, 1]))</code></pre>
</div>
</div>
</section>
<section id="initialize-parameters" class="level1">
<h1>Initialize Parameters</h1>
<div id="disciplinary-entry" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_params(size, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (torch.randn(size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>std).requires_grad_()</span></code></pre></div>
</div>
<p>We have one weight for each pixel in the image. We will also have a bias term.</p>
<div id="formed-liabilities" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-2">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3">weights.shape, bias.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([784, 1]), torch.Size([1]))</code></pre>
</div>
</div>
</section>
<section id="get-predictions" class="level1">
<h1>Get Predictions</h1>
<p>Calculate the prediction for a single image</p>
<div id="exposed-israeli" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">(train_x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weights.T).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([3.9740], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
<div id="answering-judges" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">train_x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape, weights.shape, weights.T.shape, (train_x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weights).shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([784]),
 torch.Size([784, 1]),
 torch.Size([1, 784]),
 torch.Size([784, 784]))</code></pre>
</div>
</div>
<div id="quality-midnight" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> linear1(xb): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> xb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bias</span>
<span id="cb30-2">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(train_x)</span>
<span id="cb30-3">preds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 3.9740],
        [-0.7695],
        [ 2.8669],
        ...,
        [-2.1245],
        [-6.0483],
        [-9.3377]], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="compute-loss" class="level1">
<h1>Compute Loss</h1>
<div id="moderate-victor" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span></code></pre></div>
</div>
<div id="several-gravity" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mnist_loss(predictions, targets):</span>
<span id="cb33-2">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions.sigmoid()</span>
<span id="cb33-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.where(targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>preds, preds).mean()</span></code></pre></div>
</div>
<div id="promising-times" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">mnist_loss(preds, train_y)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(0.3764, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
</section>
<section id="mini-batches" class="level1">
<h1>Mini-Batches</h1>
<div id="informative-lease" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(string.ascii_lowercase))</span>
<span id="cb36-2">ds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(#26) [(0, 'a'),(1, 'b'),(2, 'c'),(3, 'd'),(4, 'e'),(5, 'f'),(6, 'g'),(7, 'h'),(8, 'i'),(9, 'j')...]</code></pre>
</div>
</div>
<p>Each mini-batch is a tuple of some number of training examples and their corresponding labels</p>
<div id="falling-vessel" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds,batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-2">first(dl), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dl)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((tensor([ 5, 20, 14, 11, 13]), ('f', 'u', 'o', 'l', 'n')),
 [(tensor([ 1, 13, 14,  7,  0]), ('b', 'n', 'o', 'h', 'a')),
  (tensor([ 8, 16,  4, 17, 19]), ('i', 'q', 'e', 'r', 't')),
  (tensor([11,  6,  2, 20, 15]), ('l', 'g', 'c', 'u', 'p')),
  (tensor([ 9, 18, 21, 12, 22]), ('j', 's', 'v', 'm', 'w')),
  (tensor([24, 25, 10,  3,  5]), ('y', 'z', 'k', 'd', 'f')),
  (tensor([23]), ('x',))])</code></pre>
</div>
</div>
<div id="complete-immigration" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(train_x, train_y))</span>
<span id="cb40-2">dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb40-3"></span>
<span id="cb40-4">valid_dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(valid_x, valid_y))</span>
<span id="cb40-5">valid_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</div>
<p>Simulate a batch of training examples.</p>
<div id="cutting-phenomenon" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb41-2">batch.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>torch.Size([4, 784])</code></pre>
</div>
</div>
<div id="prime-occasion" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear1(batch)</span>
<span id="cb43-2">preds</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor([[ 3.9740],
        [-0.7695],
        [ 2.8669],
        [-6.0669]], grad_fn=&lt;AddBackward0&gt;)</code></pre>
</div>
</div>
<div id="fifty-tunisia" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_loss(preds, train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb45-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(0.4383, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<div id="light-exhibition" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">loss.backward()</span>
<span id="cb47-2">weights.grad.shape, weights.grad.mean(), bias.grad</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([784, 1]), tensor(-0.0103), tensor([-0.0719]))</code></pre>
</div>
</div>
</section>
<section id="gradient-computation" class="level1">
<h1>Gradient computation</h1>
<div id="basic-intervention" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_grad(xb,yb,model):</span>
<span id="cb49-2">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(xb)</span>
<span id="cb49-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist_loss(preds, yb)</span>
<span id="cb49-4">    loss.backward()</span></code></pre></div>
</div>
</section>
<section id="train" class="level1">
<h1>Train</h1>
<div id="intellectual-garage" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb50-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dl:</span>
<span id="cb50-3">        calc_grad(xb,yb,model)</span>
<span id="cb50-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> params:</span>
<span id="cb50-5">            p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lr</span>
<span id="cb50-6">            p.grad.zero_()</span></code></pre></div>
</div>
<section id="batch-accuracy" class="level2">
<h2 class="anchored" data-anchor-id="batch-accuracy">Batch Accuracy</h2>
<div id="creative-focus" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> batch_accuracy(preds, yb):</span>
<span id="cb51-2">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preds.sigmoid() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#note</span></span>
<span id="cb51-3">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yb</span>
<span id="cb51-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> correct.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span></code></pre></div>
</div>
<div id="ranking-nothing" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">batch_accuracy(linear1(batch), train_y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>tensor(0.5000)</code></pre>
</div>
</div>
<div id="requested-china" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validate_epoch(model):</span>
<span id="cb54-2">    accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [batch_accuracy(model(xb), yb) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_dl]</span>
<span id="cb54-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(torch.stack(accs).mean().item(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<div id="agricultural-invention" class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">validate_epoch(linear1)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.6533</code></pre>
</div>
</div>
<p>Train one epoch</p>
<div id="northern-tractor" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb57-2"></span>
<span id="cb57-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb57-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb57-5">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights, bias</span>
<span id="cb57-6"></span>
<span id="cb57-7">train_epoch(linear1, lr, params)</span>
<span id="cb57-8">validate_epoch(linear1)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.6836</code></pre>
</div>
</div>
<p>Train multiple epochs</p>
<div id="variable-arabic" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb59-2"></span>
<span id="cb59-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb59-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb59-5">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights, bias</span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb59-8">    train_epoch(linear1, lr, params)</span>
<span id="cb59-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear1), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.6765 0.8387 0.8988 0.9267 0.9374 0.9462 0.954 0.9565 0.9599 0.9618 0.9638 0.9653 0.9667 0.9682 0.9682 0.9706 0.9711 0.9721 0.9721 0.9721 </code></pre>
</div>
</div>
</section>
</section>
<section id="refactor" class="level1">
<h1>Refactor</h1>
<section id="replace-gradient-update-with-a-home-grown-optimizer" class="level2">
<h2 class="anchored" data-anchor-id="replace-gradient-update-with-a-home-grown-optimizer">Replace gradient update with a home grown optimizer</h2>
<div id="remarkable-peace" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BasicOptim(nn.Module):</span>
<span id="cb61-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,params,lr): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(params), lr</span>
<span id="cb61-3">        </span>
<span id="cb61-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb61-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p.grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr</span>
<span id="cb61-6">            </span>
<span id="cb61-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> zero_grad(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb61-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params: p.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
</div>
<div id="sapphire-complexity" class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb62-2"></span>
<span id="cb62-3">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb62-4">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-5">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights, bias</span>
<span id="cb62-6"></span>
<span id="cb62-7">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicOptim(params, lr)</span>
<span id="cb62-8"></span>
<span id="cb62-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb62-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dl:</span>
<span id="cb62-11">        calc_grad(xb,yb,model)</span>
<span id="cb62-12">        opt.step()</span>
<span id="cb62-13">        opt.zero_grad()</span>
<span id="cb62-14"></span>
<span id="cb62-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb62-16">    train_epoch(linear1, lr, params)</span>
<span id="cb62-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear1), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.6269 0.8379 0.9174 0.9409 0.9496 0.9545 0.9589 0.9623 0.9658 0.9672 0.9687 0.9697 0.9692 0.9697 0.9721 0.9721 0.9721 0.9726 0.9726 0.9731 </code></pre>
</div>
</div>
</section>
<section id="replace-init_params-and-linear1-with-pytorch-nn.linear" class="level2">
<h2 class="anchored" data-anchor-id="replace-init_params-and-linear1-with-pytorch-nn.linear">Replace init_params and linear1 with Pytorch nn.Linear</h2>
<p>nn.Linear holds both the weights and bias and takes care of initializing the parameters.</p>
<div id="fabulous-music" class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">linear_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb64-2">weights, bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_model.parameters()</span>
<span id="cb64-3">weights.shape, bias.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(torch.Size([1, 784]), torch.Size([1]))</code></pre>
</div>
</div>
<div id="structural-verification" class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb66-2"></span>
<span id="cb66-3">linear_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb66-4">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicOptim(linear_model.parameters(), lr)</span>
<span id="cb66-5"></span>
<span id="cb66-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb66-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dl:</span>
<span id="cb66-8">        calc_grad(xb,yb,model)</span>
<span id="cb66-9">        opt.step()</span>
<span id="cb66-10">        opt.zero_grad()</span>
<span id="cb66-11"></span>
<span id="cb66-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb66-13">    train_epoch(linear_model, lr, params)</span>
<span id="cb66-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear_model), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.4932 0.4932 0.6816 0.8687 0.9185 0.936 0.9502 0.958 0.9638 0.9658 0.9678 0.9697 0.9712 0.9741 0.9746 0.9761 0.9765 0.9775 0.9785 0.9785 </code></pre>
</div>
</div>
</section>
<section id="replace-home-grown-optimizer-with-fastai-sgd" class="level2">
<h2 class="anchored" data-anchor-id="replace-home-grown-optimizer-with-fastai-sgd">Replace home grown optimizer with fastai SGD</h2>
<div id="scheduled-honor" class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb68-2"></span>
<span id="cb68-3">linear_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb68-4">opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SGD(linear_model.parameters(), lr)</span>
<span id="cb68-5"></span>
<span id="cb68-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_epoch(model, lr, params):</span>
<span id="cb68-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xb, yb <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dl:</span>
<span id="cb68-8">        calc_grad(xb,yb,model)</span>
<span id="cb68-9">        opt.step()</span>
<span id="cb68-10">        opt.zero_grad()</span>
<span id="cb68-11"></span>
<span id="cb68-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb68-13">    train_epoch(linear_model, lr, params)</span>
<span id="cb68-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(validate_epoch(linear_model), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.4932 0.8447 0.8398 0.9126 0.9336 0.9478 0.9551 0.9629 0.9658 0.9678 0.9692 0.9717 0.9741 0.9751 0.9761 0.9761 0.977 0.978 0.9785 0.9785 </code></pre>
</div>
</div>
</section>
<section id="replace-training-loop-with-fastai-learner.fit" class="level2">
<h2 class="anchored" data-anchor-id="replace-training-loop-with-fastai-learner.fit">Replace training loop with Fastai Learner.fit</h2>
<p>Observe how we are able to pass in the mnist_loss and batch_accuracy functions. Recall that within these functions we pass the predictions through the sigmoid function.</p>
<div id="patent-azerbaijan" class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb70-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoaders(dl, valid_dl)</span>
<span id="cb70-3">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss</span>
<span id="cb70-4">                , opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD</span>
<span id="cb70-5">                , metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_accuracy)</span>
<span id="cb70-6">learn.fit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.637023</td>
<td>0.503487</td>
<td>0.495584</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.524831</td>
<td>0.192524</td>
<td>0.839058</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.192777</td>
<td>0.178215</td>
<td>0.840039</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.084406</td>
<td>0.105942</td>
<td>0.912169</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.044523</td>
<td>0.077318</td>
<td>0.933268</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.028958</td>
<td>0.061924</td>
<td>0.947988</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.022560</td>
<td>0.052394</td>
<td>0.955839</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.019714</td>
<td>0.046067</td>
<td>0.962709</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.018272</td>
<td>0.041615</td>
<td>0.966143</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.017409</td>
<td>0.038327</td>
<td>0.967125</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.016804</td>
<td>0.035799</td>
<td>0.969578</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.016330</td>
<td>0.033789</td>
<td>0.972031</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.015934</td>
<td>0.032144</td>
<td>0.973503</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.015597</td>
<td>0.030771</td>
<td>0.974975</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.015305</td>
<td>0.029609</td>
<td>0.975957</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.015053</td>
<td>0.028614</td>
<td>0.976938</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.014832</td>
<td>0.027755</td>
<td>0.977429</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.014637</td>
<td>0.027009</td>
<td>0.977920</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.014463</td>
<td>0.026354</td>
<td>0.978410</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.014305</td>
<td>0.025776</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
</section>
<section id="add-a-rectified-linear-unit" class="level1">
<h1>Add a rectified linear unit</h1>
<div id="psychological-fleece" class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb71-2">simple_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), </span>
<span id="cb71-3">                           nn.ReLU(), </span>
<span id="cb71-4">                           nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb71-5"></span>
<span id="cb71-6">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Learner(dls, simple_net, loss_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mnist_loss</span>
<span id="cb71-7">                  , opt_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SGD</span>
<span id="cb71-8">                  , metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_accuracy)</span>
<span id="cb71-9"></span>
<span id="cb71-10"></span>
<span id="cb71-11">learn.fit(n_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">batch_accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.334276</td>
<td>0.397611</td>
<td>0.510304</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.153756</td>
<td>0.235990</td>
<td>0.795878</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.084339</td>
<td>0.117733</td>
<td>0.915113</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.054809</td>
<td>0.079118</td>
<td>0.940137</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.041189</td>
<td>0.061640</td>
<td>0.954367</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.034297</td>
<td>0.051851</td>
<td>0.963690</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.030381</td>
<td>0.045687</td>
<td>0.965653</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.027859</td>
<td>0.041476</td>
<td>0.966634</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.026048</td>
<td>0.038415</td>
<td>0.968106</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.024647</td>
<td>0.036075</td>
<td>0.969578</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.023509</td>
<td>0.034219</td>
<td>0.971541</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.022557</td>
<td>0.032701</td>
<td>0.973013</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.021745</td>
<td>0.031426</td>
<td>0.973503</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.021041</td>
<td>0.030334</td>
<td>0.973503</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.020424</td>
<td>0.029385</td>
<td>0.973994</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.019877</td>
<td>0.028547</td>
<td>0.975466</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.019388</td>
<td>0.027802</td>
<td>0.976938</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.018946</td>
<td>0.027133</td>
<td>0.977920</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.018545</td>
<td>0.026529</td>
<td>0.977920</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.018177</td>
<td>0.025982</td>
<td>0.977920</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>20</td>
<td>0.017839</td>
<td>0.025482</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>21</td>
<td>0.017526</td>
<td>0.025026</td>
<td>0.978901</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>22</td>
<td>0.017234</td>
<td>0.024606</td>
<td>0.979882</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>23</td>
<td>0.016962</td>
<td>0.024220</td>
<td>0.980373</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>24</td>
<td>0.016708</td>
<td>0.023863</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>25</td>
<td>0.016468</td>
<td>0.023533</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>26</td>
<td>0.016243</td>
<td>0.023226</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>27</td>
<td>0.016030</td>
<td>0.022941</td>
<td>0.981354</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>28</td>
<td>0.015829</td>
<td>0.022676</td>
<td>0.981845</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>29</td>
<td>0.015638</td>
<td>0.022429</td>
<td>0.981845</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>30</td>
<td>0.015457</td>
<td>0.022199</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>31</td>
<td>0.015285</td>
<td>0.021983</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>32</td>
<td>0.015121</td>
<td>0.021782</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>33</td>
<td>0.014964</td>
<td>0.021593</td>
<td>0.983317</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>34</td>
<td>0.014815</td>
<td>0.021416</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>35</td>
<td>0.014672</td>
<td>0.021249</td>
<td>0.982826</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>36</td>
<td>0.014535</td>
<td>0.021091</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>37</td>
<td>0.014403</td>
<td>0.020943</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="odd">
<td>38</td>
<td>0.014276</td>
<td>0.020802</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
<tr class="even">
<td>39</td>
<td>0.014154</td>
<td>0.020669</td>
<td>0.982336</td>
<td>00:00</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>learn.recorder records the output from the training process. The three items recorded here are train_loss, valid_loss and batch_accuracy</p>
<div id="hollow-senator" class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">learn.recorder.values[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[(#3) [0.334276407957077,0.39761149883270264,0.5103042125701904],
 (#3) [0.1537560522556305,0.2359904646873474,0.7958782911300659]]</code></pre>
</div>
</div>
<p>Plot how the accuracy evolved during the training.</p>
<div id="crazy-brass" class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">plt.plot(L(learn.recorder.values).itemgot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-08-06-MNIST-Threes-And-Sevens_files/figure-html/cell-46-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The final accuracy is as below:</p>
<div id="invalid-reduction" class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">learn.recorder.values[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.98233562707901</code></pre>
</div>
</div>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-08-06-mnist-threes-and-sevens.html</guid>
  <pubDate>Fri, 06 Aug 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Bear Classification and Gradio</title>
  <link>https://nasheqlbrm.github.io/blog/posts/2021-07-31-bear-classification-and-gradio.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I am following along with Chapter 2 of <span class="citation" data-cites="fastbook2020">[1]</span>.</p>
<section id="preliminaries" class="level2">
<h2 class="anchored" data-anchor-id="preliminaries">Preliminaries</h2>
<ul>
<li><p>Install the jmd_imagescraper <a href="https://github.com/joedockrill/jmd_imagescraper/tree/master/">library</a> using <code>!pip3 install jmd_imagescraper</code></p></li>
<li><p>I set FASTAI_HOME in my .bashrc so that datasets downloaded using Fastai are stored under a different location than the default. I do this because the default location, /home/kaushik/.fastai, is space constrained. Feel free to omit this step.</p></li>
</ul>
<pre><code>export FASTAI_HOME=/data/kaushik/.fastai
export PATH=$FASTAI_HOME:$PATH</code></pre>
</section>
</section>
<section id="download-and-clean-images" class="level1">
<h1>Download and Clean Images</h1>
<div id="described-triple" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jmd_imagescraper.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>See utility function to download images, using the Duck Duck Go search engine, below (modified from here).</p>
<div id="synthetic-favorite" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scrape_images(path, labels, search_suffix, erase_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> erase_dir:</span>
<span id="cb3-3">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rf {path}</span>
<span id="cb3-4">    </span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> path.exists():</span>
<span id="cb3-6">        path.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-7">    </span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> some_label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> labels:</span>
<span id="cb3-9">        duckduckgo_search(path, some_label,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-10">                          <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>some_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>search_suffix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, max_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_images)</span>
<span id="cb3-11">        </span>
<span id="cb3-12">    filenames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path)</span>
<span id="cb3-13">    failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(filenames)</span>
<span id="cb3-14">    </span>
<span id="cb3-15">    failed.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> []:</span>
<span id="cb3-17">        _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [filenames.remove(f) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> failed]</span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To avoid Transparency warnings, convert PNG images to RGBA</span></span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://forums.fast.ai/t/errors-when-training-the-bear-image-classification-model/83422/9</span></span>
<span id="cb3-21">    converted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L()</span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filenames:</span>
<span id="cb3-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(image):</span>
<span id="cb3-24">            im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image)</span>
<span id="cb3-25">            converted.append(image)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># old file name before resaving</span></span>
<span id="cb3-26">            im.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGBA"</span>).save(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>image<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2.png"</span>)    </span>
<span id="cb3-27">            </span>
<span id="cb3-28">    converted.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(Path.unlink)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete originals</span></span>
<span id="cb3-29">    </span>
<span id="cb3-30">    total_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(get_image_files(path))</span>
<span id="cb3-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"After checking for issues, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_images<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (total) images remain."</span>)</span>
<span id="cb3-32">    </span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> path</span></code></pre></div>
</details>
</div>
<p>Get 100 images for each kind of bear.</p>
<div id="gothic-hours" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grizzly'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'teddy'</span></span>
<span id="cb4-2">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scrape_images(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/data/kaushik/bears'</span>), labels, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bear'</span>, max_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: grizzly bear
Downloading results into /data/kaushik/bears/grizzly</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:05&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: black bear
Downloading results into /data/kaushik/bears/black</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:05&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Duckduckgo search: teddy bear
Downloading results into /data/kaushik/bears/teddy</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
        <style>
            /* Turns off some styling */
            progress {
                /* gets rid of default border in Firefox and Opera. */
                border: none;
                /* Needs to be in here for Safari polyfill so background images work as expected. */
                background-size: auto;
            }
            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
                background: #F44336;
            }
        </style>
      <progress value="100" class="" max="100" style="width:300px; height:20px; vertical-align: middle;"></progress>
      100.00% [100/100 00:05&lt;00:00 Images downloaded]
    </div>
    
</div>
<div class="cell-output cell-output-stdout">
<pre><code>After checking for issues, 300 (total) images remain.</code></pre>
</div>
</div>
</section>
<section id="define-the-datablock" class="level1">
<h1>Define the DataBlock</h1>
<p>A <em>DataBlock</em> is a <em>template</em> for creating a <em>DataLoader</em></p>
<div id="progressive-plasma" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb9-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb9-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_image_files,</span>
<span id="cb9-4">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-5">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb9-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>))</span></code></pre></div>
</div>
<section id="inspect-a-few-items-from-the-validation-set" class="level2">
<h2 class="anchored" data-anchor-id="inspect-a-few-items-from-the-validation-set">Inspect a few items from the validation set</h2>
<div id="subsequent-truth" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb10-2">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb10-3">dls.valid.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="inspect-effect-of-data-augmentations" class="level2">
<h2 class="anchored" data-anchor-id="inspect-effect-of-data-augmentations">Inspect effect of Data Augmentations</h2>
<div id="handed-array" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb11-2">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>), batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms(mult<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb11-3">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span>
<span id="cb11-4">dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, unique<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="train-model" class="level1">
<h1>Train Model</h1>
<div id="chicken-parts" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(</span>
<span id="cb12-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">228</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb12-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb12-4">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span></code></pre></div>
</div>
<div id="racial-vessel" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb13-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.668255</td>
<td>0.410353</td>
<td>0.150000</td>
<td>00:03</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.551829</td>
<td>0.221585</td>
<td>0.100000</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.401239</td>
<td>0.252073</td>
<td>0.083333</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.327227</td>
<td>0.271660</td>
<td>0.083333</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.274876</td>
<td>0.251819</td>
<td>0.083333</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="bright-reaction" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb14-2">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="miniature-german" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="clean-the-data" class="level2">
<h2 class="anchored" data-anchor-id="clean-the-data">Clean the data</h2>
<div id="about-blair" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.widgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>The following will give us a UI that allows to mark images that are mislabeled (for relabeling) or completely wrong (for deletion).</p>
<div id="elementary-extent" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">cleaner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageClassifierCleaner(learn)</span>
<span id="cb17-2">cleaner</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cb25000b5cd1485b8115daa7e9ae2f24","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>So for each label we do the following:</p>
<ul>
<li><p>First we choose the images to delete or relabel.</p></li>
<li><p>Second we run the following:</p></li>
</ul>
<pre><code>for idx in cleaner.delete() : cleaner.fns[idx].unlink()
for idx, cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)</code></pre>
<p>Items that need to be deleted or whose label needs to be changed</p>
<div id="distributed-capitol" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">cleaner.delete(), cleaner.change()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((#4) [5,9,21,27],
 (#11) [(0, 'black'),(1, 'black'),(2, 'black'),(3, 'black'),(11, 'black'),(14, 'black'),(15, 'black'),(16, 'black'),(17, 'black'),(19, 'black')...])</code></pre>
</div>
</div>
<div id="meaning-vulnerability" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cleaner.delete() : cleaner.fns[idx].unlink()</span>
<span id="cb21-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, cat <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> cleaner.change(): shutil.move(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(cleaner.fns[idx]), path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cat)</span></code></pre></div>
</div>
</section>
</section>
<section id="retrain-model" class="level1">
<h1>Retrain Model</h1>
<div id="handed-polymer" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">bears <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.new(</span>
<span id="cb22-2">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RandomResizedCrop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">228</span>, min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb22-3">    batch_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>aug_transforms())</span>
<span id="cb22-4">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bears.dataloaders(path)</span></code></pre></div>
</div>
<div id="proud-accreditation" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">learn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cnn_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>error_rate)</span>
<span id="cb23-2">learn.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1.947632</td>
<td>0.435558</td>
<td>0.189655</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">error_rate</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.471205</td>
<td>0.192515</td>
<td>0.103448</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.352979</td>
<td>0.143951</td>
<td>0.086207</td>
<td>00:02</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.290317</td>
<td>0.153008</td>
<td>0.068965</td>
<td>00:02</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.261623</td>
<td>0.159573</td>
<td>0.051724</td>
<td>00:02</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="surprised-holder" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learn)</span>
<span id="cb24-2">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Performance on Black bears has improved but we are now misclassifying some Grizzlies as Black bears.</p>
<div id="collect-budget" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">interp.print_classification_report()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

       black       0.86      1.00      0.92        18
     grizzly       1.00      0.86      0.92        21
       teddy       1.00      1.00      1.00        19

    accuracy                           0.95        58
   macro avg       0.95      0.95      0.95        58
weighted avg       0.96      0.95      0.95        58
</code></pre>
</div>
</div>
</section>
<section id="save-the-model" class="level1">
<h1>Save the model</h1>
<div id="spread-longer" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">learn.export(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/data/kaushik/20210731/bear_v0/classifier.pkl'</span>)</span></code></pre></div>
</div>
</section>
<section id="load-serialized-model" class="level1">
<h1>Load serialized model</h1>
<div id="visible-english" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">learn_inf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_learner(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/data/kaushik/20210731/bear_v0/classifier.pkl'</span>)</span></code></pre></div>
</div>
</section>
<section id="inference" class="level1">
<h1>Inference</h1>
<div id="optional-injury" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_prediction(model, image_location):</span>
<span id="cb29-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.predict(image_location)</span></code></pre></div>
</div>
<div id="described-shape" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">test_black_bear_image_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../test_images/black_bear.jpg'</span></span>
<span id="cb30-2">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_black_bear_image_location)</span>
<span id="cb30-3">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="located-hindu" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">pred, pred_idx, probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_prediction(learn_inf, test_black_bear_image_location)</span>
<span id="cb31-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; Probability: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[pred_idx]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.04f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>'Prediction: black; Probability: 1.0000'</code></pre>
</div>
</div>
<div id="touched-guidance" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">test_grizzly_image_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../test_images/grizzly.jpg'</span></span>
<span id="cb33-2">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_grizzly_image_location)</span>
<span id="cb33-3">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="crazy-bradley" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pred, pred_idx, probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_prediction(learn_inf, test_grizzly_image_location)</span>
<span id="cb34-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; Probability: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[pred_idx]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.04f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>'Prediction: grizzly; Probability: 1.0000'</code></pre>
</div>
</div>
<section id="sadness" class="level2">
<h2 class="anchored" data-anchor-id="sadness">Sadness</h2>
<p>So far so good, test images of bears seem to be recognized perfectly. So now there is nowhere to go but downhill.</p>
<div id="distinct-chess" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">test_mainecoon_image_location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../test_images/mc.jpg'</span></span>
<span id="cb36-2">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_mainecoon_image_location)</span>
<span id="cb36-3">im.to_thumb(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://nasheqlbrm.github.io/blog/posts/2021-07-31-Bear-Classification-And-Gradio_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="abstract-seeker" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">pred, pred_idx, probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_prediction(learn_inf, test_mainecoon_image_location)</span>
<span id="cb37-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Prediction: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">; Probability: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>probs[pred_idx]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.04f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span></code></pre></div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<pre><code>'Prediction: teddy; Probability: 0.8470'</code></pre>
</div>
</div>
<p>So our classifier is very confident that the Maine Coon is a Teddy!</p>
<p>We work through how to tackle this issue by the use of multi-label classification in <a href="https://nasheqlbrm.github.io/blog/posts/2021-08-12-multi-label-classification.html">this</a> post.</p>
</section>
</section>
<section id="model-demo" class="level1">
<h1>Model Demo</h1>
<p>Chapter 2 of the book shows how to create a notebook app with Voila. However I recently ran into <a href="https://www.gradio.app">gradio</a> which provides a neat way to quickly demo your model. The demo below will only run <strong>as long as my notebook is up</strong>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Gradio has a paid <a href="https://www.gradio.app/introducing-hosted">hosted</a> option which gives on the ability to have a permanent link.</p>
</div>
</div>
<div id="protecting-tension" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gradio_predict(img):</span>
<span id="cb39-4">    pred, pred_idx, probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  learn_inf.predict(img)    </span>
<span id="cb39-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {learn_inf.dls.vocab[i]: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(probs[i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(probs))}</span>
<span id="cb39-6"></span>
<span id="cb39-7">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gr.outputs.Label(num_top_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div id="subject-sympathy" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">iface <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gr.Interface(fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gradio_predict,</span>
<span id="cb40-2">                     inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gr.inputs.Image(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)),</span>
<span id="cb40-3">                     outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label)</span>
<span id="cb40-4">iface.launch(share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p>The following <strong>screenshot</strong> shows the finished product. The UI allows one to upload an image, click submit and that’s it. Pretty neat!</p>
<p><img src="https://nasheqlbrm.github.io/blog/images/gradio_screenshot2.png" class="img-fluid"></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0">
<div id="ref-fastbook2020" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. Howard and S. Gugger, <em>Deep learning for coders with fastai and PyTorch: AI applications without a PhD</em>, 1st ed. O’Reilly, 2020.</div>
</div>
</div></section></div> ]]></description>
  <category>fastai</category>
  <category>gradio</category>
  <category>jupyter</category>
  <guid>https://nasheqlbrm.github.io/blog/posts/2021-07-31-bear-classification-and-gradio.html</guid>
  <pubDate>Sat, 31 Jul 2021 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
